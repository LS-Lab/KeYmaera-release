/***************************************************************************
 *   Copyright (C) 2007 by Jan David Quesel                                *
 *   quesel@informatik.uni-oldenburg.de                                    *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
/* Generated by Together */

package de.uka.ilkd.key.dl.model.impl;

import java.util.Map;
import java.util.WeakHashMap;

import de.uka.ilkd.key.dl.model.MetaVariable;
import de.uka.ilkd.key.logic.Name;

/**
 * Implementation of {@link MetaVariable}. Weak hashing of the variables is
 * done to assert that there is only one instance of this object per name.
 * 
 * @author jdq
 * @since 13.02.2007
 * 
 */
public class MetaVariableImpl extends VariableImpl implements
        MetaVariable {
    private static Map<Name, MetaVariable> instances = new WeakHashMap<Name, MetaVariable>();

    /**
     * Creates a new MetaVariable or returns a cached one with the given
     * name. This method ensures that there is only one meta variable object
     * for one function name at a time.
     * 
     * @param name
     *            the name of the program variable
     * @return the new or cached program variable
     */
    public static MetaVariable getMetaVariable(String name) {
        return getMetaVariable(new Name(name), true);
    }

    /**
     * Creates a new MetaVariable or returns a cached one with the given
     * name. This method ensures that there is only one meta variable object
     * for one function name at a time.
     * 
     * @param name
     *            the name of the meta variable
     * @return the new or cached meta variable
     */
    public static MetaVariable getMetaVariable(String name, boolean create) {
        return getMetaVariable(new Name(name), create);
    }

    /**
     * Creates a new MetaVariable or returns a cached one with the given
     * name. This method ensures that there is only one meta variable object
     * for one function name at a time.
     * 
     * @param name
     *            the name of the meta variable
     * @return the new or cached meta variable
     */
    public static MetaVariable getMetaVariable(Name name, boolean create) {
        MetaVariable result = instances.get(name);
        if (result == null) {
            if (create) {
                result = new MetaVariableImpl(name);
                instances.put(name, result);
            } else {
                throw new IllegalStateException("Programvariable " + name
                        + " was used, but not declared");
            }
        }
        return result;
    }

    /**
     * Creates a new meta variable with a given name
     * 
     * @param name
     *            the name to use
     */
    protected MetaVariableImpl(Name name) {
        super(name);
    }

}
