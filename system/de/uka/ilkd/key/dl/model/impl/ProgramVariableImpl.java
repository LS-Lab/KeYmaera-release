/* Generated by Together */

package de.uka.ilkd.key.dl.model.impl;

import java.util.Map;
import java.util.WeakHashMap;

import de.uka.ilkd.key.dl.model.ProgramVariable;
import de.uka.ilkd.key.logic.Name;

/**
 * Implementation of {@link ProgramVariable}. Weak hashing of the variables is
 * done to assert that there is only one instance of this object per name.
 * 
 * @author jdq
 * @since 13.02.2007
 * 
 */
public class ProgramVariableImpl extends VariableImpl implements
        ProgramVariable {
    private static Map<Name, ProgramVariable> instances = new WeakHashMap<Name, ProgramVariable>();

    /**
     * Creates a new ProgramVariable or returns a cached one with the given
     * name. This method ensures that there is only one program variable object
     * for one function name at a time.
     * 
     * @param name
     *            the name of the program variable
     * @return the new or cached program variable
     */
    public static ProgramVariable getProgramVariable(String name) {
        return getProgramVariable(new Name(name), true);
    }

    /**
     * Creates a new ProgramVariable or returns a cached one with the given
     * name. This method ensures that there is only one program variable object
     * for one function name at a time.
     * 
     * @param name
     *            the name of the program variable
     * @return the new or cached program variable
     */
    public static ProgramVariable getProgramVariable(String name, boolean create) {
        return getProgramVariable(new Name(name), create);
    }

    /**
     * Creates a new ProgramVariable or returns a cached one with the given
     * name. This method ensures that there is only one program variable object
     * for one function name at a time.
     * 
     * @param name
     *            the name of the program variable
     * @return the new or cached program variable
     */
    public static ProgramVariable getProgramVariable(Name name, boolean create) {
        ProgramVariable result = instances.get(name);
        if (result == null) {
            if (create) {
                result = new ProgramVariableImpl(name);
                instances.put(name, result);
            } else {
                throw new IllegalStateException("Programvariable " + name
                        + " was used, but not declared");
            }
        }
        return result;
    }

    /**
     * Creates a new program variable with a given name
     * 
     * @param name
     *            the name to use
     */
    protected ProgramVariableImpl(Name name) {
        super(name);
    }

}
