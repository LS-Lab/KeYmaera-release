/***************************************************************************
 *   Copyright (C) 2007 by Jan David Quesel                                *
 *   quesel@informatik.uni-oldenburg.de                                    *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
/* Generated by Together */

package de.uka.ilkd.key.dl.model.impl;

import java.util.Map;
import java.util.WeakHashMap;

import de.uka.ilkd.key.dl.model.LogicalVariable;
import de.uka.ilkd.key.logic.Name;

/**
 * Implementation of {@link LogicalVariable}. Weak hashing of the variables is
 * done to assert that there is only one instance of this object per name.
 * 
 * @author jdq
 * @since 13.02.2007
 * 
 */
public class LogicalVariableImpl extends VariableImpl implements
		LogicalVariable {
	private static Map<Name, LogicalVariable> instances = new WeakHashMap<Name, LogicalVariable>();

	/**
	 * Creates a new LogicalVariable or returns a cached one with the given
	 * name. This method ensures that there is only one logical variable object
	 * for one function name at a time.
	 * 
	 * @param name
	 *            the name of the logical variable
	 * @return the new or cached logical variable
	 */
	public static LogicalVariable getLogicalVariable(String name) {
		return getLogicalVariable(new Name(name));
	}

	/**
	 * Creates a new LogicalVariable or returns a cached one with the given
	 * name. This method ensures that there is only one logical variable object
	 * for one function name at a time.
	 * 
	 * @param name
	 *            the name of the logical variable
	 * @return the new or cached logical variable
	 */
	public static LogicalVariable getLogicalVariable(Name name) {
		LogicalVariable result = instances.get(name);
		if (result == null) {
			result = new LogicalVariableImpl(name);
			instances.put(name, result);
		}
		return result;
	}

	/**
	 * Creates a new logical variable with a given name
	 * 
	 * @param name
	 *            the name to use
	 */
	protected LogicalVariableImpl(Name name) {
		super(name);
	}
}
