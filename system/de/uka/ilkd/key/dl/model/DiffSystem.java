/***************************************************************************
 *   Copyright (C) 2007 by Jan David Quesel                                *
 *   quesel@informatik.uni-oldenburg.de                                    *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
/* Generated by Together */

package de.uka.ilkd.key.dl.model;

import java.util.List;

import de.uka.ilkd.key.java.ProgramElement;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.NamespaceSet;
import de.uka.ilkd.key.logic.Term;

/**
 * The DiffSystem is used to represent the elementary DLProgram of a system of
 * differential equations and invariants.
 * 
 * @author jdq
 * @author ap
 * @since 13.02.2007
 */
public interface DiffSystem extends ElementaryDLProgram {
    /**
     * @link aggregation
     */
    /* # Formula lnkFormula; */

    /**
     * Test whether the given program element is a differential equation, 
     * i.e., contains a Dot.
     * 
     * @param el the element to check for being a differential constraint
     * @return true if el contains an element that is an instance of Dot
     */
    public boolean isDifferentialEquation(ProgramElement el);

    /**
     * Get the (accumulated) invariant of this DiffSystem, i.e., the non-differential part.
     */
    public Term getInvariant(Services services);

    /**
     * Get the set of differential equations occurring in this DiffSystem.
     * @param system TODO
     */
    public List<ProgramElement> getDifferentialEquations(NamespaceSet nss);

    /**
     * Get the differential part of this DiffSystem, i.e., all parts with differential symbols.
     * @param system TODO
     * @see #getDifferentialEquations()
     */
    public DiffSystem getDifferentialFragment();

    /**
     * Get the non-differential part of this DiffSystem, i.e., all parts without differential symbols.
     * @param system TODO
     * @see #getInvariant()
     */
    public DiffSystem getInvariantFragment();
}
