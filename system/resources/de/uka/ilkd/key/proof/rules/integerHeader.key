\sorts{
  numbers;
  int;  
  jbyte \extends int;
  jshort \extends int;
  jint \extends int;
  jlong \extends int;
  jchar \extends int;
  integerDomain \extends jbyte, jshort, jint, jlong, jchar;

  // these sort are not axiomatised yet; to come in CHARTER
  // they are here included to allow us to load Java program that
  // contain some methods or fields of type float or double
  jfloat, jdouble;

}

\functions {

  /**
     The functions declared below preserve their semantics independently 
     from the current integer semantics.
   */
  numbers #;
  numbers 0 (numbers);
  numbers 1 (numbers);
  numbers 2 (numbers);
  numbers 3 (numbers);
  numbers 4 (numbers);
  numbers 5 (numbers);
  numbers 6 (numbers);
  numbers 7 (numbers);
  numbers 8 (numbers);
  numbers 9 (numbers);
  numbers neglit (numbers);

  int Z (numbers);
  int C (numbers);

  int add(int,int);
  int neg(int);
  int sub(int,int);
  
  int mul(int, int);

// modulo and division function with mathematical semantics
  int mod(int, int);
  int div(int, int);

// modulo and division function with Java semantics
  int jmod(int, int);
  int jdiv(int, int);

  int byte_MAX;
  int byte_MIN;
  int char_MAX;
  int char_MIN;
  int short_MAX;
  int short_MIN;
  int int_MAX;
  int int_MIN;
  int long_MAX;
  int long_MIN;

  int byte_RANGE;
  int byte_HALFRANGE;
  int short_RANGE;
  int short_HALFRANGE;
  int char_RANGE;
  int int_RANGE;
  int int_HALFRANGE;
  int long_RANGE;
  int long_HALFRANGE;

  int unaryMinusJint(int);
  int unaryMinusJlong(int);
  int addJint(int,int);
  int addJlong(int,int);
  int subJint(int,int);
  int subJlong(int,int);
  int mulJint(int, int);
  int mulJlong(int, int);
  int modJint(int, int);
  int modJlong(int, int);
  int divJint(int, int);
  int divJlong(int, int);
  int shiftrightJint(int, int);
  int shiftrightJlong(int, int);
  int shiftleftJint(int, int);
  int shiftleftJlong(int, int);
  int unsignedshiftrightJint(int, int);
  int unsignedshiftrightJlong(int, int);
  int orJint(int, int);
  int orJlong(int, int);
  int andJint(int, int);
  int andJlong(int, int);
  int xorJint(int, int);
  int xorJlong(int, int);
  int moduloByte(int);
  int moduloShort(int);
  int moduloInt(int);
  int moduloLong(int);
  int moduloChar(int);

  /**
     The functions declared below change their semantics when switching the
     used integer semantics.
   */
  // javaTranslationFunctions

  int javaUnaryMinusInt(int);
  int javaUnaryMinusLong(int);

  int javaBitwiseNegation(int);

  int javaAddInt(int,int);
  int javaAddLong(int,int);
  int javaSubInt(int,int);
  int javaSubLong(int,int);
  int javaMulInt(int, int);
  int javaMulLong(int, int);
  int javaMod(int, int);
  int javaDivInt(int, int);
  int javaDivLong(int, int);
  int javaShiftRightInt(int, int);
  int javaShiftRightLong(int, int);
  int javaShiftLeftInt(int, int);
  int javaShiftLeftLong(int, int);
  int javaUnsignedShiftRightInt(int, int);
  int javaUnsignedShiftRightLong(int, int);
  int javaBitwiseOrInt(int, int);
  int javaBitwiseOrLong(int, int);
  int javaBitwiseAndInt(int, int);
  int javaBitwiseAndLong(int, int);
  int javaBitwiseXOrInt(int, int);
  int javaBitwiseXOrLong(int, int);
  int javaCastByte(int);
  int javaCastShort(int);
  int javaCastInt(int);
  int javaCastLong(int);
  int javaCastChar(int);
}


\predicates {
  /**
     The predicates declared below preserve their semantics independently 
     from the current integer semantics.
   */
  lt(int, int);
  gt(int, int);
  geq(int, int);
  leq(int, int);

  /**
     The predicates declared below change their semantics when switching the
     used integer semantics.
   */
  inByte(int);
  inShort(int);
  inInt(int);
  inLong(int);
  inChar(int);
}
