// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2005 Universitaet Karlsruhe Germany
//                         Universitaet Koblenz-Landau, Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//

// These schema variables are used to write the following rules.
// They will not be visible in later runs of the parser, so you are
// fairly free in choosing their names.

\schemaVariables {
  \formula phi, psi, eta;
}

\rules {

// Propositional simplification

  eq_imp   { \find (phi -> phi)
             \replacewith (true)
             \heuristics(concrete)
             \displayname "simplify self_implies"};

  eq_and   { \find (phi & phi)
             \replacewith (phi)
             \heuristics(concrete)
             \displayname "simplify self_and"};

  eq_and_2 { \find ((psi & phi) & phi)
             \replacewith (psi & phi)
             \heuristics(concrete)
             \displayname "simplify self_and"};

  eq_or    { \find (phi | phi)
             \replacewith (phi)
             \heuristics(concrete)
             \displayname "simplify self_or"};

  eq_or_2  { \find ((psi | phi) | phi)
             \replacewith (psi | phi)
             \heuristics(concrete)
             \displayname "simplify self_or"};

  eq_eq    { \find (phi <-> phi)
             \replacewith (true)
             \heuristics(concrete)
             \displayname "simplify self_equivalent"};

  neq_and  { \find (phi&(!phi))
	     \replacewith(false)
	     \heuristics(concrete)
	     \displayname "simplify not_self_and"};
 
  neq_and_2{ \find ((!phi)&phi)
	     \replacewith(false)
	     \heuristics(concrete)
		 \displayname "simplify not_self_and"};
 
  neq_and_3{ \find ((psi&phi)&(!phi))
	     \replacewith(false)
	     \heuristics(concrete)
	     \displayname "simplify not_self_and"};
 
  neq_and_4{ \find ((psi&(!phi))&phi)
	     \replacewith(false)
	     \heuristics(concrete)
	     \displayname "simplify not_self_and"};
 
  neq_or   { \find (phi|(!phi))
	     \replacewith(true)
	     \heuristics(concrete)
	     \displayname "simplify not_self_or"};
 
  neq_or_2 { \find ((!phi)|phi)
	     \replacewith(true)
	     \heuristics(concrete)
	     \displayname "simplify not_self_or"};
 
  neq_or_3 { \find ((psi|phi)|(!phi))
	     \replacewith(true)
	     \heuristics(concrete)
	     \displayname "simplify not_self_or"};
 
  neq_or_4 { \find ((psi|(!phi))|phi)
	     \replacewith(true)
	     \heuristics(concrete)
	     \displayname "simplify not_self_or"};
}