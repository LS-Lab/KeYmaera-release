\optionsDecl{
  assertions:{on, off, safe};
}

\schemaVariables {
  \program Expression #e, #e1, #e2;
  \program NonSimpleExpression #nse1, #nse2;
  \program SimpleExpression #se1, #se2;
  \program Variable #condition, #message;
  \program ExecutionContext #ex;

  \formula b;

  \modalOperator { diamond, box, throughout,
                   diamond_trc, box_trc, throughout_trc,
                   diamond_tra, box_tra, throughout_tra,
	           diamond_susp, box_susp, throughout_susp } #allmodal;
}

\rules(programRules:Java, assertions:on) {

   evaluateAssertCondition_1 {
       \find (\modality{#allmodal}{.. assert #nse1; ...}\endmodality(b))
       \varcond (\new(#condition, \typeof(#nse1)))
       \replacewith (\modality{#allmodal}{.. #typeof(#nse1) #condition = #nse1; 
                           assert #condition; ...}\endmodality(b))
       \heuristics (simplify_prog)
       \displayname "evaluate assert condition"
   };

   evaluateAssertCondition_2 {
       \find (\modality{#allmodal}{.. assert #nse1 : #e; ...}\endmodality(b))
       \varcond (\new(#condition, \typeof(#nse1)))
       \replacewith (\modality{#allmodal}{.. #typeof(#nse1) #condition = #nse1; 
                           assert #condition : #e; ...}\endmodality(b))
       \heuristics (simplify_prog)
       \displayname "evaluate assert condition"
   };


   evaluateAssertMessage {
       \find (\modality{#allmodal}{.. assert #se1 : #nse2; ...}\endmodality(b))
       \varcond (\new(#message, \typeof(#nse2)))
       \replacewith (\modality{#allmodal}{.. #typeof(#nse2) #message = #nse2; 
                           assert #se1 : #message; ...}\endmodality(b))
       \heuristics (simplify_prog)
       \displayname "evaluate assert condition"
   };

   assert {
       \find (\modality{#allmodal}{.. assert #se1; ...}\endmodality(b)) \sameUpdateLevel
       "Assertion (#se1) OK" : \replacewith (\modality{#allmodal}{..  ...}\endmodality(b)) \add(#se1 = TRUE ==>);
       "Assertion (#se1) Failure" : \replacewith (\modality{#allmodal}{.. throw new java.lang.AssertionError(); ...}\endmodality(b)) \add(#se1 = FALSE ==>)
       \heuristics (simplify_prog)
       \displayname "assert"
   };

   assertWithReferenceMessage {
       \find (\modality{#allmodal}{.. assert #se1 : #se2; ...}\endmodality(b)) \sameUpdateLevel
       \varcond(\isReference[non_null](\typeof(#se2)))
       "Assertion (#se1) OK" : \replacewith (\modality{#allmodal}{..  ...}\endmodality(b)) \add(#se1 = TRUE ==>);
       "Assertion (#se1) Failure" : \replacewith (\modality{#allmodal}{.. throw new java.lang.AssertionError(#se2); ...}\endmodality(b)) \add(#se1 = FALSE ==>)
       \heuristics (simplify_prog)
       \displayname "assert"
   };

   assertWithReferenceMessageNull {
       \find (\modality{#allmodal}{.. assert #se1 : null; ...}\endmodality(b)) \sameUpdateLevel
       "Assertion (#se1) OK" : \replacewith (\modality{#allmodal}{..  ...}\endmodality(b)) \add(#se1 = TRUE ==>);
       "Assertion (#se1) Failure" : 
		  \replacewith (\modality{#allmodal}{.. 
				    throw new java.lang.AssertionError((java.lang.Object)null); ...}\endmodality(b)) \add(#se1 = FALSE ==>)
       \heuristics (simplify_prog)
       \displayname "assert"
   };

   assertWithPrimitiveMessage {
       \find (\modality{#allmodal}{.. assert #se1 : #se2; ...}\endmodality(b)) \sameUpdateLevel
       \varcond(\not\isReference(\typeof(#se2)))
       "Assertion (#se1) OK" : \replacewith (\modality{#allmodal}{..  ...}\endmodality(b)) \add(#se1 = TRUE ==>);
       "Assertion (#se1) Failure" : \replacewith (\modality{#allmodal}{.. throw new java.lang.AssertionError(#se2); ...}\endmodality(b)) \add(#se1 = FALSE ==>)
       \heuristics (simplify_prog)
       \displayname "assert"
   };

}

\rules(programRules:Java, assertions:off) {
   skipAssert {
       \find (\modality{#allmodal}{.. assert #e1 : #e2; ...}\endmodality(b))
       \replacewith (\modality{#allmodal}{..  ...}\endmodality(b))
       \heuristics (simplify_prog)
       \displayname "skip assert"
   };

   skipAssert_2 {
       \find (\modality{#allmodal}{.. assert #e1; ...}\endmodality(b))
       \replacewith (\modality{#allmodal}{..  ...}\endmodality(b))
       \heuristics (simplify_prog)
       \displayname "skip assert"
   };

}

\rules(programRules:Java, assertions:safe) {


   assertSafe {
       \schemaVar \modalOperator { diamond, box } #allNotThroughout;
      
       \find (\modality{#allNotThroughout}{.#ex.. assert #e1; ...}\endmodality(b)) \sameUpdateLevel
       \varcond (\new(#condition, \typeof(#e1)))
       "Assertion (#e1) Skip" : \replacewith (\modality{#allNotThroughout}{..  ...}\endmodality(b));
       "Assertion (#e1) Terminates And OK" : 
		  \add (==>\<{method-frame(#ex):{#condition = #e1;}}\> #condition  = TRUE);
       "Assertion (#e1) No Effects" : 
		  \add (==>(\[{ method-frame(#ex) : {
                                      #typeof(#e1) #condition = #e1 ;				      
                                    } 
                                }\] \modality{#allNotThroughout}{..  ...}\endmodality(b))
                                <-> \modality{#allNotThroughout}{..  ...}\endmodality(b))  
       \heuristics (simplify_prog)
       \displayname "assert"
   };

   assertSafeWithMessage {
       \schemaVar \modalOperator { diamond, box } #allNotThroughout;      
       \find (\modality{#allNotThroughout}{.#ex.. assert #e1 : #e2; ...}\endmodality(b)) \sameUpdateLevel
       \varcond (\new(#condition, \typeof(#e1)), \new(#message, \typeof(#e2)))
       "Assertion (#e1) Skip" : 
		  \replacewith (\modality{#allNotThroughout}{..  ...}\endmodality(b));
       "Assertion (#e1) Terminates And OK" : 
		  \add (==>\<{method-frame(#ex):{#typeof(#e1) #condition = #e1;
		                                      #typeof(#e2) #message   = #e2;}}\> #condition  = TRUE);
       "Assertion (#e1) No Effects" : 
		  \add (==>(\[{ method-frame(#ex) : {
                                      #typeof(#e1) #condition = #e1;
				      #typeof(#e2) #message   = #e2;				      
                                    } 
                                }\] \modality{#allNotThroughout}{..  ...}\endmodality(b))
                                <-> \modality{#allNotThroughout}{..  ...}\endmodality(b))  
       \heuristics (simplify_prog)
       \displayname "assert"
   };



   // in throughout we cannot skip evaluation of the assertion condition
   assertSafe_throughout {
       \schemaVar \modalOperator { throughout } #allThroughout;
       \find (\modality{#allThroughout}{.#ex.. assert #e1; ...}\endmodality(b)) \sameUpdateLevel
       \varcond (\new(#condition, \typeof(#e1)))
       "Assertion (#e1) Eval" : \replacewith (\modality{#allThroughout}
					 {.. #typeof(#e1) #condition = #e1; ...}\endmodality(b));
       "Assertion (#e1) Terminates And OK" : 
		  \add (==>\<{method-frame(#ex):{#typeof(#e1) #condition = #e1;}}\> #condition  = TRUE);
       "Assertion (#e1) No Side Effects" : 
		  \add(==>(\[{ method-frame(#ex) : {
                                      #typeof(#e1) #condition = #e1 ;				      
                                    } 
                                }\]\modality{#allThroughout}{..  ...}\endmodality(b)) <-> 
                                   \modality{#allThroughout}{..  ...}\endmodality(b))
       \heuristics (simplify_prog)
       \displayname "assert"
   };
   
    assertSafeWithMessage_throughout {
       \schemaVar \modalOperator { throughout } #allThroughout;

       \find (\modality{#allThroughout}{.#ex.. assert #e1 : #e2; ...}\endmodality(b)) \sameUpdateLevel
       \varcond (\new(#condition, \typeof(#e1)), \new(#message, \typeof(#e2)))
       "Assertion (#e1) Eval" : \replacewith (\modality{#allThroughout}
					 {.. #typeof(#e1) #condition = #e1; 
					     #typeof(#e2) #message   = #e2;
					  ...}\endmodality(b));
       "Assertion (#e1) Terminates And OK" : 
		  \add (==>\<{method-frame(#ex):{
		                      #typeof(#e1) #condition = #e1;
				      #typeof(#e2) #message   = #e2 ;
		                 }}\> #condition  = TRUE);
       "Assertion (#e1) No Side Effects" : 
		  \add (==>(\[{ method-frame(#ex) : {
                                      #typeof(#e1) #condition = #e1 ;
				      #typeof(#e2) #message   = #e2 ;
                                    } 
                                }\]\modality{#allThroughout}{..  ...}\endmodality(b)) <-> 
                                   \modality{#allThroughout}{..  ...}\endmodality(b))
       \heuristics (simplify_prog)
       \displayname "assert"
   };
}
