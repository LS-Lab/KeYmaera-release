// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2005 Universitaet Karlsruhe Germany
//                           Universitaet Koblenz-Landau, Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules for handling hybrid programs


\include ruleSetsDeclarations;
//\include dlPropRule;

\optionsDecl{
}

\sorts{
  R;
}

\schemaVariables {
  // non-trace modalities
  \modalOperator { diamond, box } #allmodal;
  \modalOperator { diamond } #dia;
  \modalOperator { box } #box;

  // mixed trace/non-trace modalities
  // all modalities including traces
  \modalOperator { diamond, box, throughout /*, finally*/} #allmodaltr;
  \modalOperator { diamond /*, finally*/} #diatr;
  \modalOperator { box, throughout } #boxtr;

  // only trace modalities
  // all trace modalities
  \modalOperator { throughout /*, finally*/ } #trace;
  \modalOperator { throughout } #boxtbox;

  \formula phi, psi, post, inv, target;
  \term R trm;  
  \skolemTerm R sk ;
  \variables R u;

  \term R q;
  \skolemTerm R queryValue ;

  \program Literal #lit ;
  \program Statement #alpha;
  \program[list] Statement #gamma;

  \program Expression #e;
  \program SimpleExpression #se, #se0, #se1 ;
  \program NonSimpleExpression #nse, #nse0, #nse1, #nse2, #nv ;
  \program[list] Statement #s, #s0, #s1 ;  

  \program Type #t;
  \program Variable #v, #v0, #v1, #v2, #boolv, #a, #a0, #a1 ;

   \program Variable #loc ;
   \variables R iv, iv2, iv3, t ;
   \term R idx;
   \term R #sval, #byte1, #byte2; 
   
   \program DLProgram #dl, #dl2;
	\program DLFormula #dlform;
	\program DLExpression #dle;
	\program DLVariable #dlvar;
	\program RandomAssign #rdm;
	\program DiffSystem #diffsystem;
	\program DLVariableDeclaration #decl;

  \formula b,c,d;
  \formula[rigid] br, cr;

 \location[list] #modifies;
 \formula anon1, anon2, anon3;

}

\functions{
  R neg(R);
  R sub(R,R);
  R add(R,R);
  R mul(R,R);
  R div(R,R);
  R exp(R,R);
  R sin(R);
  R cos(R);
  R tan(R);
  R E;
}

\predicates{   
  \nonRigid inReachableState;
  gt(R,R);
  geq(R,R);
  equals(R,R);
  leq(R,R);
  lt(R,R);
  neq(R,R);
}

\rules {

////////////////////////////////////////
//
// program rules
// rewrite variant
//
 
 if_then_else_right {
 	\find(==>\modality{#allmodaltr} if(#dlform) then #dl else #dl2 fi\endmodality(post))
	"#dlform": \replacewith(#dlform ==> \modality{#allmodaltr} #dl\endmodality(post)); 
	"! #dlform": \replacewith(! #dlform ==> \modality{#allmodaltr} #dl2\endmodality(post)) 
\heuristics(simplify_prog)

 };

 if_then_right {
 	\find(==>\modality{#allmodaltr} if(#dlform) then #dl fi\endmodality(post))
	"#dlform": \replacewith(#dlform ==> \modality{#allmodaltr} #dl\endmodality(post)); 
	"! #dlform": \replacewith(! #dlform ==> post) 
	\heuristics(simplify_prog)

 };

 if_then_else_left {
 	\find(\modality{#allmodaltr} if(#dlform) then #dl else #dl2 fi\endmodality(post) ==>)
	"#dlform": \replacewith(#dlform, \modality{#allmodaltr} #dl\endmodality(post) ==>); 
	"! #dlform": \replacewith(! #dlform, \modality{#allmodaltr} #dl2\endmodality(post) ==>) 
	\heuristics(simplify_prog)
 };

 if_then_left {
 	\find(\modality{#allmodaltr} if(#dlform) then #dl fi\endmodality(post) ==>)
	"#dlform": \replacewith(#dlform, \modality{#allmodaltr} #dl\endmodality(post) ==>); 
	"! #dlform": \replacewith(! #dlform, post ==>) 
	\heuristics(simplify_prog)

 };

 modality_split { 
 	\find (\modality{#allmodal}#dl;#dl2\endmodality(post)) 
 	"Modality Split": \replacewith(\modality{#allmodal}#dl\endmodality(\modality{#allmodal}#dl2\endmodality(post))) 
 	\heuristics(simplify_prog)
};

 through_split { 
 	\find (\modality{#boxtbox}#dl;#dl2\endmodality(post)) 
 	"Modality Split": \replacewith(\modality{throughout}#dl\endmodality(post) & \modality{box}#dl\endmodality(\modality{throughout}#dl2\endmodality(post))) 
 	\heuristics(simplify_prog)
};

/*diamond_quest { \find (\modality{#dia}?#dlform\endmodality(post)) \replacewith(#prog2logic(#dlform) & post) \heuristics(simplify_prog)};
box_quest { \find (\modality{#box}?#dlform\endmodality(post)) \replacewith(#prog2logic(#dlform) -> post) \heuristics(simplify_prog)};*/

diamond_quest { 
 	\find (\modality{#dia}?#dlform\endmodality(post)) 
	\replacewith(#dlform & post) 
	\heuristics(simplify_prog)
};
box_quest { 
 	\find (\modality{#box}?#dlform\endmodality(post)) 
	\replacewith(#dlform -> post) 
	\heuristics(simplify_prog)
};
boxtbox_quest { 
 	\find (\modality{#boxtbox}?#dlform\endmodality(post)) 
	\replacewith(post) 
	\heuristics(simplify_prog)
};

box_choice { 
 	\find (\modality{#boxtr}#dl ++ #dl2 \endmodality(post)) 
	\replacewith(\modality{#boxtr}#dl\endmodality(post) & \modality{#boxtr}#dl2\endmodality(post)) 
	\heuristics(simplify_prog)
};

diamond_choice { 
 	\find (\modality{#diatr}#dl ++ #dl2 \endmodality(post)) 
	\replacewith(\modality{#diatr}#dl\endmodality(post) | \modality{#diatr}#dl2\endmodality(post)) 
	\heuristics(simplify_prog)
};
 
 // loop handling
 /*
 // These rules do not work, as KeY cannot reintroduce the *. Further, they are wrong
 diamond_unwind { 
 	\find (\modality{#dia}#dl* \endmodality(post)) 
	\replacewith(post | \modality{#dia}#dl\endmodality(\modality{#dia}(#dl)*\endmodality(post))) 
};
 box_unwind { 
 	\find (\modality{#box}#dl* \endmodality(post)) 
	\replacewith(post & \modality{#box}#dl\endmodality(\modality{#box}(#dl)*\endmodality(post)))
};
*/

loop_unwind_box { 
	\find (\modality{#box}#dl* \endmodality(post)) 
	\replacewith(post & (#dlunwind(\modality{box}#dl\endmodality(post))))
};

loop_unwind_dia { 
	\find (\modality{#dia}#dl* \endmodality(post)) 
	\replacewith(post | (#dlunwind(\modality{#dia}#dl\endmodality(post))))
};

loop_unwind_trace { 
	\find (\modality{#trace}#dl* \endmodality(post)) 
	\replacewith(#dlunwind(\modality{#trace}#dl\endmodality(post)))
};

//@todo add loop_inv_boxtbox trace versions for loops

 loop_inv_box { \find (==> \[#dl*\]post) 
          \varcond(
                   \new(anon1, \dependingOnMod(#modifies)),
          	   \new(anon2, \dependingOnMod(#modifies)),
                   \new(anon1, \dependingOn(post)),
                   \new(anon1, \dependingOn(inv)),
                   \new(anon2, \dependingOn(post)),
                   \new(anon2, \dependingOn(inv)))
    "Invariant Initially Valid":
          \replacewith (==> inv );
    "Body Preserves Invariant":
          \replacewith (==>  #introNewAnonUpdate(#modifies, (inv -> \[#dl\]inv), anon1));
    "Use Case":
          \replacewith (==> #introNewAnonUpdate(#modifies, inv -> post, anon2)) 
          \heuristics (loop_invariant, loop_invariant_proposal)
          \displayname "loop_invariant"}; 

 ODESolve { \find (\modality{#allmodal}#diffsystem \endmodality(post)) \replacewith(#ODESolve(\modality{#allmodal}#diffsystem\endmodality(post)))  \heuristics(simplify_prog)};

 ODESolve_boxtbox { \find (\modality{#boxtbox}#diffsystem \endmodality(post)) \replacewith(\modality{box}#diffsystem \endmodality(post))  \heuristics(simplify_prog)};
 
 assignment_to_update { \find (\modality{#allmodal}#dlvar := #dle \endmodality(post)) \replacewith(({#dlvar := #dle} post)) \heuristics(simplify_prog)};

 assignment_boxtbox {
     \find (\modality{#boxtbox}#dlvar := #dle \endmodality(post))
     \replacewith(post & ({#dlvar := #dle}(post)))
     \heuristics(simplify_prog)
 };

random_ass_box { \find (\modality{#box}#rdm\endmodality(post))  \replacewith(#randomass(\modality{#box}#rdm\endmodality(post))) \heuristics(simplify_prog)};

random_ass_boxtbox { \find (\modality{#boxtbox}#rdm\endmodality(post))  \replacewith(post & (\modality{box}#rdm\endmodality(post))) \heuristics(simplify_prog)};

random_ass_dia { \find (\modality{#dia}#rdm\endmodality(post))  \replacewith(#randomass(\modality{#dia}#rdm\endmodality(post))) \heuristics(simplify_prog)};

}
