// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2003 Universitaet Karlsruhe, Germany
//                         and Chalmers University of Technology, Sweden          
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//

\include ruleSetsDeclarations; 

\schemaVariables {
  \term R trm, q, i, j;
  \skolemTerm R sk;
  \variables R u;

  \variables R n;
}

\rules {

////////////////////////////////////////
//
// Rules for handling inequations
// Transformations normalising inequalities to one of the forms
//   a>b ==> 
//   a>=b ==> 
//

  less_right { \find (==> lt(trm, q))
		\replacewith (geq(trm, q) ==>) // \heuristics (inequation_normalization)
  };

  less_equal_right { \find (==> leq(trm, q))
		 \replacewith (gt(trm, q) ==>) // \heuristics (inequation_normalization)
  };

  less_left { \find (lt(trm,q) ==>)
		 \replacewith (gt(q, trm) ==>) // \heuristics (inequation_normalization)
  };

  less_equal_left { \find (leq(trm,q) ==>)
		 \replacewith (geq(q, trm) ==>) // \heuristics (inequation_normalization)
  };

  greater_right { \find (==> gt(trm, q))
		\replacewith (geq(q,trm) ==>) // \heuristics (inequation_normalization)
  };

  greater_equal_right { \find (==> geq(trm, q))
		\replacewith (gt(q, trm) ==>) // \heuristics (inequation_normalization)
  };

  // further inequation normalization

  inequality_right { \find (==> neq(trm, q))
		\replacewith (trm=q ==>) // \heuristics (inequation_normalization)
  };

  simplify_greater_greater_equal_left { \assumes (gt(trm,q) ==> )
		\find (geq(trm,q) ==>)
		\replacewith (==>) // \heuristics (inequation_normalization)
  };

  simplify_greater_equal_greater_equal_left {
                \assumes (geq(trm,q)==>)  /* this part will be removed by simplify_equal_greater_equal */
		\find (geq(q,trm)==>)
		\replacewith (trm=q ==>) // \heuristics (inequation_normalization)
  };
  
  simplify_equal_greater_equal_left { \assumes (trm=q ==> )
		\find (geq(trm,q) ==>)
		\replacewith (==>) // \heuristics (inequation_normalization)
  };
  simplify_equal_greater_equal_left2 { \assumes (trm=q ==> )
		\find (geq(q,trm) ==>)
		\replacewith (==>) // \heuristics (inequation_normalization)
  };

  close_ineq { \assumes ( gt(trm, q) ==>)
  	\find( gt(q, trm) ==>)
	\closegoal
	// \heuristics(closure)
  };

  close_ineq_eq_1 { \assumes ( gt(trm, q) ==>)
  	\find( q= trm ==>)
	\closegoal
	// \heuristics(closure)
  };

  close_ineq_eq_2 { \assumes ( gt(trm, q) ==>)
  	\find( trm=q ==>)
	\closegoal
	// \heuristics(closure)
  };

  equal_reflexive { \find (trm=trm)
        \replacewith (true)
        // \heuristics(inequation_normalization)
  };

  inequality_irreflexive { \find (neq(trm,trm))
        \replacewith (false)
        // \heuristics(inequation_normalization)
  };


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Evaluation of constant expressions

  add_literals { \find(i+j) \replacewith(#evaluate(i+j))
                 \heuristics (eval_literals) };
  sub_literals { \find(i-j) \replacewith(#evaluate(i-j))
                 \heuristics (eval_literals) };
  mul_literals { \find(i*j) \replacewith(#evaluate(i*j))
                 \heuristics (eval_literals) };
  div_literals { \find(i/j) \replacewith(#evaluate(i/j))
                 \heuristics (eval_literals) };
  pow_literals { \find(i^j) \replacewith(#evaluate(i^j))
                 \heuristics (eval_literals) };

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Integer rules adapted to the reals


  mul_zero_right {\find (mul(i,0)) \replacewith (0)
                  \heuristics (simplify_literals)};

  mul_zero_left  {\find (mul(0,i)) \replacewith (0)
                  \heuristics (simplify_literals)};

  add_zero_left  { \find (add(0, i)) \replacewith (i)
                   \heuristics (simplify_literals) };

  add_zero_right { \find (add(i, 0)) \replacewith (i)
                   \heuristics (simplify_literals) };
}