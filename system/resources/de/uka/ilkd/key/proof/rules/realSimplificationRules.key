// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2003 Universitaet Karlsruhe, Germany
//                         and Chalmers University of Technology, Sweden          
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//

\include ruleSetsDeclarations; 

\schemaVariables {
  \term R trm, q, i, i0, j;
  \term[rigid] R i0r;
  \term R homoLeft, homoRight;
  \term R distSummand0, distSummand1, distCoeff;
  \term R commLeft, commRight;
  \term R addAssocMono, addAssocPoly0, addAssocPoly1;
  \term R mulAssocAtom, mulAssocMono0, mulAssocMono1;
  \term R expandExp, negateExp;
  \term R calcRight0, calcRight1;
  \term R pullOutCommon, pullOutLeft, pullOutRight;
  \term R invertLeft, invertRight;
  \term R sepPosMono, sepNegMono, sepResidue;
  \term R applyEqDividend, applyEqDivisor;
  \term R cpLeft1, cpLeft2, cpRight1, cpRight2;
  \term R fractNum, fractDenom, fractDenom2;
  \term R esLeft, esRight1, esRight2, esCoeff1, esCoeff2;
  \term R subsumLeft, subsumRightBigger, subsumRightSmaller,
          subsumCoeffBigger, subsumCoeffSmaller;
  \term R contradLeft, contradRightBigger, contradRightSmaller,
          contradCoeffBigger, contradCoeffSmaller;
  \term R strengthenLeft, strengthenRight;
  \term R elimGcdLeft, elimGcdRight, elimGcd;
  \term R multLeft, multRight, multFac;
  \term[rigid] R applyEqDivisorr;
  \skolemTerm R sk;
  \variables R u;
  \formula phi;

  \variables R n;
}

\rules {

////////////////////////////////////////
//
// Rules for handling inequations
// Transformations normalising inequalities to one of the forms
//   a>b ==> 
//   a>=b ==> 
//

  less_equal_left { \find (leq(trm,q) ==>)
                    \replacewith (geq(q, trm) ==>) // \heuristics (inequation_normalization)
                    \displayname "normalize <="
                    \unicodename "<html><body>normalize &ge;</body></html>"
  };

  less_left { \find (lt(trm,q) ==>)
              \replacewith (gt(q, trm) ==>) // \heuristics (inequation_normalization)
              \displayname "normalize <"
  };


  // further inequation normalization

  inequality_right { \find (==> neq(trm, q))
		\replacewith (trm=q ==>) // \heuristics (inequation_normalization)
        \displayname "normalize !="
        \unicodename "<html><body>normalize &ne;</body></html>"
  };

  simplify_greater_greater_equal_left { \assumes (gt(trm,q) ==> )
		\find (geq(trm,q) ==>)
		\replacewith (==>) // \heuristics (inequation_normalization)
        \displayname "simplify >= from >" 
        \unicodename "<html><body>simplify &ge; from &gt;</body></html>"
  };

  simplify_greater_equal_greater_equal_left {
                \assumes (geq(trm,q)==>)  /* this part will be removed by simplify_equal_greater_equal */
		\find (geq(q,trm)==>)
		\replacewith (trm=q ==>) // \heuristics (inequation_normalization)
        \displayname "simplify >= converse" 
        \unicodename "<html><body>simplify &ge; converse</body></html>"
  };
  
  simplify_equal_greater_equal_left { \assumes (trm=q ==> )
		\find (geq(trm,q) ==>)
		\replacewith (==>) // \heuristics (inequation_normalization)
        \displayname "simplify >= from ="
        \unicodename "<html><body>simplify &ge; from =</body></html>"
  };
  simplify_equal_greater_equal_left2 { \assumes (trm=q ==> )
		\find (geq(q,trm) ==>)
		\replacewith (==>) // \heuristics (inequation_normalization)
        \displayname "simplify >= from ="
        \unicodename "<html><body>simplify &ge; from =</body></html>"
  };

  close_ineq { \assumes ( gt(trm, q) ==>)
  	\find( gt(q, trm) ==>)
	\closegoal
	\heuristics(closure)  // not necessary for dL
  };

  close_ineq_eq_1 { \assumes ( gt(trm, q) ==>)
  	\find( q= trm ==>)
	\closegoal
	\heuristics(closure)  // not necessary for dL
  };

  close_ineq_eq_2 { \assumes ( gt(trm, q) ==>)
  	\find( trm=q ==>)
	\closegoal
	\heuristics(closure)  // not necessary for dL
  };

  equal_reflexive { \find (trm=trm)
        \replacewith (true)
        \heuristics(inequation_normalization)    // not necessary for dL
        \displayname "= reflexive"
  };

  inequality_irreflexive { \find (neq(trm,trm))
        \replacewith (false)
        \heuristics(inequation_normalization)   // not necessary for dL
        \displayname "!= irreflexive"
        \unicodename "<html><body>&ne; irreflexive</body></html>"
  };


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Evaluation of constant expressions

  eval_literals { \find(i) \replacewith(#evaluate(i))
                  \heuristics (eval_literals)
                  \displayname "evaluate literals"};
  eval_literals_for { \find(phi) \varcond( \isFirstOrderFormula(phi))
					  \replacewith(#evaluate(phi))
                      \heuristics (eval_literals)
                      \displayname "evaluate literals"};

/*  add_literals { \find(i+j) \replacewith(#evaluate(i+j))
                 \heuristics (eval_literals) };
  sub_literals { \find(i-j) \replacewith(#evaluate(i-j))
                 \heuristics (eval_literals) };
  neg_literal  { \find(-i) \replacewith(#evaluate(-i))
                 \heuristics (eval_literals) };
  mul_literals { \find(i*j) \replacewith(#evaluate(i*j))
                 \heuristics (eval_literals) };
  div_literals { \find(i/j) \replacewith(#evaluate(i/j))
                 \heuristics (eval_literals) };
  pow_literals { \find(i^j) \replacewith(#evaluate(i^j))
                 \heuristics (eval_literals) };
  eq_literals  { \find(i=j) \replacewith(#evaluate(i=j))
                 \heuristics (eval_literals) };
  lt_literals  { \find(i<j) \replacewith(#evaluate(i<j))
                 \heuristics (eval_literals) };
  gt_literals  { \find(i>j) \replacewith(#evaluate(i>j))
                 \heuristics (eval_literals) };
  le_literals  { \find(i<=j) \replacewith(#evaluate(i<=j))
                 \heuristics (eval_literals) };
  ge_literals  { \find(i>=j) \replacewith(#evaluate(i>=j))
                 \heuristics (eval_literals) }; */

  add_literals_right {\find (add(add(i, calcRight0), calcRight1))
                      \replacewith (add(i, #evaluate(calcRight0 + calcRight1)))
                      \heuristics (eval_literals_right) \noninteractive};

  mul_literals_right {\find (mul(mul(i, calcRight0), calcRight1))
                      \replacewith (mul(i, #evaluate(calcRight0 * calcRight1)))
                      \heuristics (eval_literals_right) \noninteractive};


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Integer rules adapted to the reals


  mul_zero_right {\find (mul(i,0)) \replacewith (0)
                  \heuristics (simplify_literals)
                  \displayname "simplify *0"};

  mul_zero_left  {\find (mul(0,i)) \replacewith (0)
                  \heuristics (simplify_literals)
                  \displayname "simplify 0*"}; 

  mul_one_right {\find (mul(i,1)) \replacewith (i)
                  \heuristics (simplify_literals)
                  \displayname "simplify *1"};

  mul_one_left  {\find (mul(1,i)) \replacewith (i)
                  \heuristics (simplify_literals)
                  \displayname "simplify 1*"};

  add_zero_left  { \find (add(0, i)) \replacewith (i)
                   \heuristics (simplify_literals)
                   \displayname "simplify 0+"};

  add_zero_right { \find (add(i, 0)) \replacewith (i)
                   \heuristics (simplify_literals)
                   \displayname "simplify +0"};

  pow_one { \find (exp(i, 1)) \replacewith(i)
            \heuristics(simplify_literals)
            \displayname "simplify ^1"};

  /* @todo not completely sound when i=0
  pow_zero { \find (exp(i, 0)) \replacewith(1)
             \heuristics(simplify_literals) };
             */

// ---------------------------------------------------------
// ------------- decomposition of products and fractions ---
// ---------------------------------------------------------

  decompose_mult { \find(i * i0 = 0) \replacewith(i = 0 | i0 = 0)
                   \heuristics(polySimp_expand) \noninteractive};

  decompose_fract { \find(fractNum / fractDenom)
                    \replacewith(\if (fractDenom = 0)
                                 \then (fractNum / 0)
                                 \else (fractNum * (1 / fractDenom)))
                    \heuristics(polySimp_expand, polySimp_decompFract) \noninteractive};

  decompose_fract2 { \find(fractNum / (fractDenom * fractDenom2))
                     \replacewith(\if (fractDenom = 0 | fractDenom2 = 0)
                                  \then (fractNum / 0)
                                  \else ((1 / fractDenom) *
                                         (fractNum / fractDenom2)))
                     \heuristics(polySimp_expand, polySimp_decompFractMul) \noninteractive};

  div_axiom { \find(1 / fractDenom) \sameUpdateLevel
              \add((1 / fractDenom) * fractDenom = 1 ==> fractDenom = 0);
              \replacewith(1 / 0) \add(fractDenom = 0 ==>)
              \heuristics(polySimp_expand, polySimp_divAxiom) \noninteractive };

// ---------------------------------------------------------
// ------------- normalisation of polynomials --------------
// ---------------------------------------------------------

  polySimp_expandPow { \find (exp(i, expandExp))
                       \replacewith(\if (expandExp >= 1)
                                    \then (i * exp(i, expandExp - 1))
                                    \else (exp(i, expandExp)))
                       \heuristics(polySimp_expand, polySimp_expandPow) \noninteractive
  };

  polySimp_negatePow { \find (exp(i, negateExp))
                       \replacewith(\if (negateExp < 1)
                                    \then (1 / exp(i, -negateExp))
                                    \else (exp(i, negateExp)))
                       \heuristics(polySimp_expand, polySimp_negatePow) \noninteractive
  };

  polySimp_elimSub { \find (sub(i, i0)) \replacewith (add(i, mul(i0, -1)))
                     \heuristics(polySimp_expand, polySimp_elimSubNeg) \noninteractive
  };

  polySimp_elimNeg { \find (neg(i)) \replacewith (mul(i, -1))
                     \heuristics(polySimp_expand, polySimp_elimSubNeg) \noninteractive
  };

  polySimp_elimOne {\find (mul(i,1)) \replacewith (i)
                    \heuristics (polySimp_expand, polySimp_elimOneRight) \noninteractive};

  polySimp_elimOneLeft0 {\find (mul(1,i)) \replacewith (i)
                         \heuristics (polySimp_expand, polySimp_elimOneLeft) \noninteractive};

  polySimp_elimOneLeft1 {\find (mul(mul(i0,1),i)) \replacewith (mul(i0,i))
                         \heuristics (polySimp_expand, polySimp_elimOneLeft) \noninteractive};

  polySimp_homoEq  { \find (homoLeft = homoRight)
                     \replacewith (add(homoRight, mul(homoLeft, -1)) = 0)
                     \heuristics(polySimp_expand, polySimp_homo) \noninteractive
  };

  polySimp_rightDist { \find ( mul(distCoeff, add(distSummand0, distSummand1)) )
                       \replacewith( add(mul(distCoeff, distSummand0),
                                         mul(distSummand1, distCoeff)))
                       \heuristics(polySimp_expand, polySimp_dist) \noninteractive
  };


  polySimp_addAssoc {
         \find (add(addAssocPoly0, add(addAssocPoly1, addAssocMono)))
         \replacewith(add(add(addAssocPoly0, addAssocPoly1), addAssocMono))
         \heuristics(polySimp_expand, polySimp_addAssoc) \noninteractive
  };

  polySimp_mulAssoc {
         \find (mul(mulAssocMono0, mul(mulAssocMono1, mulAssocAtom)))
         \replacewith(mul(mul(mulAssocMono0, mulAssocMono1), mulAssocAtom))
         \heuristics(polySimp_expand, polySimp_mulAssoc) \noninteractive
  };


  polySimp_addComm0  { \find (add(commLeft, commRight))
                       \replacewith(add(commRight, commLeft))
                       \heuristics(polySimp_expand, polySimp_addOrder) \noninteractive
  };

  polySimp_addComm1  { \find (add(add(i0, commLeft), commRight))
                       \replacewith(add(add(i0, commRight), commLeft))
                       \heuristics(polySimp_expand, polySimp_addOrder) \noninteractive
  };


  polySimp_mulComm0  { \find (mul(commLeft, commRight))
                       \replacewith(mul(commRight, commLeft))
                       \heuristics(polySimp_expand, polySimp_mulOrder) \noninteractive
  };

  polySimp_mulComm1  { \find (mul(mul(i0, commLeft), commRight))
                       \replacewith(mul(mul(i0, commRight), commLeft))
                       \heuristics(polySimp_expand, polySimp_mulOrder) \noninteractive
  };

  polySimp_pullOutFactor0 {\find (add(mul(pullOutCommon, pullOutLeft),
                                      mul(pullOutCommon, pullOutRight)))
                           \replacewith (mul(pullOutCommon,
                                             add(pullOutLeft, pullOutRight)))
                           \heuristics (polySimp_expand, polySimp_pullOutFactor) \noninteractive};

  polySimp_pullOutFactor1 {\find (add(pullOutCommon,
                                      mul(pullOutCommon, pullOutRight)))
                           \replacewith (mul(pullOutCommon,
                                             add(1, pullOutRight)))
                           \heuristics (polySimp_expand, polySimp_pullOutFactor) \noninteractive};

  polySimp_pullOutFactor2 {\find (add(mul(pullOutCommon, pullOutLeft),
                                      pullOutCommon))
                           \replacewith (mul(pullOutCommon,
                                             add(pullOutLeft, 1)))
                           \heuristics (polySimp_expand, polySimp_pullOutFactor) \noninteractive};

  polySimp_pullOutFactor3 {\find (add(pullOutCommon, pullOutCommon))
                           \replacewith (mul(pullOutCommon, 2))
                           \heuristics (polySimp_expand, polySimp_pullOutFactor) \noninteractive};

  polySimp_pullOutFactor0b {\find (add(add(i0, mul(pullOutCommon, pullOutLeft)),
                                       mul(pullOutCommon, pullOutRight)))
                            \replacewith (add(i0, mul(pullOutCommon,
                                                      add(pullOutLeft, pullOutRight))))
                            \heuristics (polySimp_expand, polySimp_pullOutFactor) \noninteractive};

  polySimp_pullOutFactor1b {\find (add(add(i0, pullOutCommon),
                                       mul(pullOutCommon, pullOutRight)))
                            \replacewith (add(i0, mul(pullOutCommon,
                                                      add(1, pullOutRight))))
                            \heuristics (polySimp_expand, polySimp_pullOutFactor) \noninteractive};

  polySimp_pullOutFactor2b {\find (add(add(i0, mul(pullOutCommon, pullOutLeft)),
                                       pullOutCommon))
                            \replacewith (add(i0, mul(pullOutCommon,
                                                      add(pullOutLeft, 1))))
                            \heuristics (polySimp_expand, polySimp_pullOutFactor) \noninteractive};

  polySimp_pullOutFactor3b {\find (add(add(i0, pullOutCommon), pullOutCommon))
                            \replacewith (add(i0, mul(pullOutCommon, 2)))
                            \heuristics (polySimp_expand, polySimp_pullOutFactor) \noninteractive};

/*  polySimp_invertEq  { \find ( invertLeft = invertRight )
                       \replacewith ( invertLeft * (-1) = invertRight * (-1) )
                       \heuristics (polySimp_directEquations, polySimp_normalise) }; */

  polySimp_sepPosMonomial {\find (add(sepResidue, sepPosMono) = 0)
                           \replacewith (sepPosMono = mul(sepResidue, -1))
                           \heuristics (polySimp_directEquations, polySimp_balance) \noninteractive};

  polySimp_sepNegMonomial {\find (add(sepResidue, sepNegMono) = 0)
                           \replacewith (mul(sepNegMono, -1) = sepResidue)
                           \heuristics (polySimp_directEquations, polySimp_balance) \noninteractive};

  apply_eq_monomials {
     \assumes ( applyEqDivisor = i0 ==> ) \find ( applyEqDividend ) \sameUpdateLevel
     \replacewith ( #divideMonomialsReals(applyEqDividend, applyEqDivisor) *
                    ( i0 + applyEqDivisor * -1 ) 
                    + applyEqDividend )
     \heuristics ( polySimp_applyEq, apply_equations )  \noninteractive};

  apply_eq_monomials_rigid {
     \assumes ( applyEqDivisorr = i0r ==> ) \find ( applyEqDividend )
     \replacewith ( #divideMonomialsReals(applyEqDividend, applyEqDivisorr) *
                    ( i0r + applyEqDivisorr * -1 )
                    + applyEqDividend )
     \heuristics ( polySimp_applyEqRigid, apply_equations )  \noninteractive};

  polySimp_critPair { \assumes ( cpLeft1=cpRight1 ==> )
                      \find ( cpLeft2=cpRight2 ==> )
                      \add ( #divideLCRMonomialsReals(cpLeft2, cpLeft1)
                             * ( -1 * cpRight1 + cpLeft1 )
                             +
                             #divideLCRMonomialsReals(cpLeft1, cpLeft2)
                             * ( cpRight2 + -1 * cpLeft2 )
                             = 0 ==> )
                      \heuristics (polySimp_saturate, polySimp_critPair) \noninteractive};

  
// ---------------------------------------------------------
// ------------- normalisation of inequations --------------
// ---------------------------------------------------------

  less_right { \find (==> lt(trm, q))
               \replacewith (geq(trm, q) ==>)
               \heuristics(inEqSimp_expand, inEqSimp_moveLeft)
              \displayname "normalize <"
  };

  less_equal_right { \find (==> leq(trm, q))
                     \replacewith (gt(trm, q) ==>)
                     \heuristics(inEqSimp_expand, inEqSimp_moveLeft)
	              \displayname "normalize <="
  };

  greater_right { \find (==> gt(trm, q))
                  \replacewith (geq(q,trm) ==>)
                  \heuristics(inEqSimp_expand, inEqSimp_moveLeft)
	              \displayname "normalize >"
  };

  greater_equal_right { \find (==> geq(trm, q))
                        \replacewith (gt(q, trm) ==>)
                        \heuristics(inEqSimp_expand, inEqSimp_moveLeft)
		              \displayname "normalize >="
  };

  inEqSimp_commuteLeq { \find (commLeft <= commRight)
                        \replacewith (commRight >= commLeft)
                        \heuristics(inEqSimp_expand, inEqSimp_commute)
  };

  inEqSimp_commuteGeq { \find (commLeft >= commRight)
                        \replacewith (commRight <= commLeft)
                        \heuristics(inEqSimp_expand, inEqSimp_commute)
  };
  
  inEqSimp_commuteLt { \find (commLeft < commRight)
                       \replacewith (commRight > commLeft)
                       \heuristics(inEqSimp_expand, inEqSimp_commute)
  };

  inEqSimp_commuteGt { \find (commLeft > commRight)
                       \replacewith (commRight < commLeft)
                       \heuristics(inEqSimp_expand, inEqSimp_commute)
  };

  inEqSimp_homoInEq0  { \find (homoLeft <= homoRight)
                        \replacewith (add(homoRight, mul(homoLeft, -1)) >= 0)
                        \heuristics(inEqSimp_expand, inEqSimp_homo) \noninteractive
  };

  inEqSimp_homoInEq1  { \find (homoLeft >= homoRight)
                        \replacewith (add(homoRight, mul(homoLeft, -1)) <= 0)
                        \heuristics(inEqSimp_expand, inEqSimp_homo) \noninteractive
  };
  
  inEqSimp_homoInEq2  { \find (homoLeft < homoRight)
                        \replacewith (add(homoRight, mul(homoLeft, -1)) > 0)
                        \heuristics(inEqSimp_expand, inEqSimp_homo) \noninteractive
  };

  inEqSimp_homoInEq3  { \find (homoLeft > homoRight)
                        \replacewith (add(homoRight, mul(homoLeft, -1)) < 0)
                        \heuristics(inEqSimp_expand, inEqSimp_homo) \noninteractive
  };
 
  inEqSimp_invertInEq0  { \find ( invertLeft <= invertRight )
                          \replacewith ( invertLeft * (-1) >= invertRight * (-1) )
                          \heuristics (inEqSimp_directInEquations, inEqSimp_normalise) \noninteractive };

  inEqSimp_invertInEq1  { \find ( invertLeft >= invertRight )
                          \replacewith ( invertLeft * (-1) <= invertRight * (-1) )
                          \heuristics (inEqSimp_directInEquations, inEqSimp_normalise) \noninteractive};

  inEqSimp_invertInEq2  { \find ( invertLeft < invertRight )
                          \replacewith ( invertLeft * (-1) > invertRight * (-1) )
                          \heuristics (inEqSimp_directInEquations, inEqSimp_normalise) \noninteractive};

  inEqSimp_invertInEq3  { \find ( invertLeft > invertRight )
                          \replacewith ( invertLeft * (-1) < invertRight * (-1) )
                          \heuristics (inEqSimp_directInEquations, inEqSimp_normalise) \noninteractive};


  inEqSimp_sepPosMonomial0 {\find (add(sepResidue, sepPosMono) <= 0)
                            \replacewith (sepPosMono <= mul(sepResidue, -1))
                            \heuristics (inEqSimp_directInEquations, inEqSimp_balance) \noninteractive};

  inEqSimp_sepNegMonomial0 {\find (add(sepResidue, sepNegMono) <= 0)
                            \replacewith (mul(sepNegMono, -1) >= sepResidue)
                            \heuristics (inEqSimp_directInEquations, inEqSimp_balance) \noninteractive};

  inEqSimp_sepPosMonomial1 {\find (add(sepResidue, sepPosMono) >= 0)
                            \replacewith (sepPosMono >= mul(sepResidue, -1))
                            \heuristics (inEqSimp_directInEquations, inEqSimp_balance) \noninteractive};

  inEqSimp_sepNegMonomial1 {\find (add(sepResidue, sepNegMono) >= 0)
                            \replacewith (mul(sepNegMono, -1) <= sepResidue)
                            \heuristics (inEqSimp_directInEquations, inEqSimp_balance) \noninteractive};
 
  inEqSimp_sepPosMonomial2 {\find (add(sepResidue, sepPosMono) < 0)
                            \replacewith (sepPosMono < mul(sepResidue, -1))
                            \heuristics (inEqSimp_directInEquations, inEqSimp_balance) \noninteractive};

  inEqSimp_sepNegMonomial2 {\find (add(sepResidue, sepNegMono) < 0)
                            \replacewith (mul(sepNegMono, -1) > sepResidue)
                            \heuristics (inEqSimp_directInEquations, inEqSimp_balance) \noninteractive};

  inEqSimp_sepPosMonomial3 {\find (add(sepResidue, sepPosMono) > 0)
                            \replacewith (sepPosMono > mul(sepResidue, -1))
                            \heuristics (inEqSimp_directInEquations, inEqSimp_balance) \noninteractive};

  inEqSimp_sepNegMonomial3 {\find (add(sepResidue, sepNegMono) > 0)
                            \replacewith (mul(sepNegMono, -1) < sepResidue)
                            \heuristics (inEqSimp_directInEquations, inEqSimp_balance) \noninteractive};
 
  inEqSimp_antiSymm    { \assumes ( i <= i0 ==> ) \find ( i >= i0 ==> )
                         \add ( i = i0 ==> )
                         \heuristics (inEqSimp_saturate, inEqSimp_antiSymm) \noninteractive};

// ---------------------------------------------------------
// ------------- Fourier-Motzkin              --------------
// ---------------------------------------------------------

  inEqSimp_exactShadow0 { \assumes ( mul(esLeft, esCoeff1) <= esRight1 ==> )
                          \find ( mul(esLeft, esCoeff2) >= esRight2 ==> )
                          \add (   (esCoeff1 > 0 & esCoeff2 > 0)
                                   ->
                                   (-1) * mul(esCoeff1, esRight2)
                                             + mul(esCoeff2, esRight1) >= 0
                                 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow01 { \assumes ( mul(esLeft, esCoeff1) < esRight1 ==> )
                           \find ( mul(esLeft, esCoeff2) >= esRight2 ==> )
                           \add (   (esCoeff1 > 0 & esCoeff2 > 0)
                                    ->
                                    (-1) * mul(esCoeff1, esRight2)
                                              + mul(esCoeff2, esRight1) > 0
                                  ==> )
                           \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow02 { \assumes ( mul(esLeft, esCoeff1) <= esRight1 ==> )
                           \find ( mul(esLeft, esCoeff2) > esRight2 ==> )
                           \add (   (esCoeff1 > 0 & esCoeff2 > 0)
                                    ->
                                    (-1) * mul(esCoeff1, esRight2)
                                              + mul(esCoeff2, esRight1) > 0
                                  ==> )
                           \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow03 { \assumes ( mul(esLeft, esCoeff1) < esRight1 ==> )
                           \find ( mul(esLeft, esCoeff2) > esRight2 ==> )
                           \add (   (esCoeff1 > 0 & esCoeff2 > 0)
                                    ->
                                    (-1) * mul(esCoeff1, esRight2)
                                              + mul(esCoeff2, esRight1) > 0
                                  ==> )
                           \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};


  inEqSimp_exactShadow1 { \assumes ( esLeft <= esRight1 ==> )
                          \find ( mul(esLeft, esCoeff2) >= esRight2 ==> )
                          \add (   (esCoeff2 > 0)
                                   ->
                                   (-1) * esRight2 + mul(esCoeff2, esRight1) >= 0
                                 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow10 { \assumes ( esLeft < esRight1 ==> )
                          \find ( mul(esLeft, esCoeff2) >= esRight2 ==> )
                          \add (   (esCoeff2 > 0)
                                   ->
                                   (-1) * esRight2 + mul(esCoeff2, esRight1) > 0
                                 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow11 { \assumes ( esLeft <= esRight1 ==> )
                          \find ( mul(esLeft, esCoeff2) > esRight2 ==> )
                          \add (   (esCoeff2 > 0)
                                   ->
                                   (-1) * esRight2 + mul(esCoeff2, esRight1) > 0
                                 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow12 { \assumes ( esLeft < esRight1 ==> )
                          \find ( mul(esLeft, esCoeff2) > esRight2 ==> )
                          \add (   (esCoeff2 > 0)
                                   ->
                                   (-1) * esRight2 + mul(esCoeff2, esRight1) > 0
                                 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow2 { \assumes ( mul(esLeft, esCoeff1) <= esRight1 ==> )
                          \find ( esLeft >= esRight2 ==> )
                          \add (   (esCoeff1 > 0)
                                   ->
                                   (-1) * mul(esCoeff1, esRight2) + esRight1 >= 0
                                 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow20 { \assumes ( mul(esLeft, esCoeff1) < esRight1 ==> )
                          \find ( esLeft >= esRight2 ==> )
                          \add (   (esCoeff1 > 0)
                                   ->
                                   (-1) * mul(esCoeff1, esRight2) + esRight1 > 0
                                 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow21 { \assumes ( mul(esLeft, esCoeff1) <= esRight1 ==> )
                          \find ( esLeft > esRight2 ==> )
                          \add (   (esCoeff1 > 0)
                                   ->
                                   (-1) * mul(esCoeff1, esRight2) + esRight1 > 0
                                 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow22 { \assumes ( mul(esLeft, esCoeff1) < esRight1 ==> )
                          \find ( esLeft > esRight2 ==> )
                          \add (   (esCoeff1 > 0)
                                   ->
                                   (-1) * mul(esCoeff1, esRight2) + esRight1 > 0
                                 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow3 { \assumes ( esLeft <= esRight1 ==> )
                          \find ( esLeft >= esRight2 ==> )
                          \add ( (-1) * esRight2 + esRight1 >= 0 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow30 { \assumes ( esLeft < esRight1 ==> )
                          \find ( esLeft >= esRight2 ==> )
                          \add ( (-1) * esRight2 + esRight1 > 0 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow31 { \assumes ( esLeft <= esRight1 ==> )
                          \find ( esLeft > esRight2 ==> )
                          \add ( (-1) * esRight2 + esRight1 > 0 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

  inEqSimp_exactShadow32 { \assumes ( esLeft < esRight1 ==> )
                          \find ( esLeft > esRight2 ==> )
                          \add ( (-1) * esRight2 + esRight1 > 0 ==> )
                          \heuristics (inEqSimp_saturate, inEqSimp_exactShadow) \noninteractive};

// ---------------------------------------------------------
// ------------- Subsumption-checks           --------------
// ---------------------------------------------------------

  inEqSimp_subsumption0 { \assumes ( subsumLeft <= subsumRightSmaller ==> )
                          \find ( subsumLeft <= subsumRightBigger )
                          \sameUpdateLevel
                          \replacewith ( subsumRightSmaller <= subsumRightBigger |
                                         subsumLeft <= subsumRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption00 { \assumes ( subsumLeft < subsumRightSmaller ==> )
                           \find ( subsumLeft <= subsumRightBigger )
                           \sameUpdateLevel
                           \replacewith ( subsumRightSmaller <= subsumRightBigger |
                                          subsumLeft <= subsumRightBigger )
                           \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption01 { \assumes ( subsumLeft < subsumRightSmaller ==> )
                           \find ( subsumLeft < subsumRightBigger )
                           \sameUpdateLevel
                           \replacewith ( subsumRightSmaller <= subsumRightBigger |
                                          subsumLeft < subsumRightBigger )
                           \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption02 { \assumes ( subsumLeft <= subsumRightSmaller ==> )
                           \find ( subsumLeft < subsumRightBigger )
                           \sameUpdateLevel
                           \replacewith ( subsumRightSmaller < subsumRightBigger |
                                          subsumLeft < subsumRightBigger )
                           \heuristics (inEqSimp_propagation, inEqSimp_strictSubsumption) \noninteractive};

  inEqSimp_subsumption1 { \assumes ( subsumLeft >= subsumRightBigger ==> )
                          \find ( subsumLeft >= subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( subsumRightSmaller <= subsumRightBigger |
                                         subsumLeft >= subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption10 { \assumes ( subsumLeft > subsumRightBigger ==> )
                          \find ( subsumLeft >= subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( subsumRightSmaller <= subsumRightBigger |
                                         subsumLeft >= subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption11 { \assumes ( subsumLeft > subsumRightBigger ==> )
                          \find ( subsumLeft > subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( subsumRightSmaller <= subsumRightBigger |
                                         subsumLeft > subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption12 { \assumes ( subsumLeft >= subsumRightBigger ==> )
                          \find ( subsumLeft > subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( subsumRightSmaller < subsumRightBigger |
                                         subsumLeft > subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictSubsumption) \noninteractive};

  inEqSimp_subsumption2 { \assumes ( subsumLeft*subsumCoeffSmaller <= subsumRightSmaller ==> )
                          \find ( subsumLeft*subsumCoeffBigger <= subsumRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <=
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffBigger <= subsumRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption20 { \assumes ( subsumLeft*subsumCoeffSmaller < subsumRightSmaller ==> )
                          \find ( subsumLeft*subsumCoeffBigger <= subsumRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <=
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffBigger <= subsumRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption21 { \assumes ( subsumLeft*subsumCoeffSmaller < subsumRightSmaller ==> )
                          \find ( subsumLeft*subsumCoeffBigger < subsumRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <=
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffBigger < subsumRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption22 { \assumes ( subsumLeft*subsumCoeffSmaller <= subsumRightSmaller ==> )
                          \find ( subsumLeft*subsumCoeffBigger < subsumRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffBigger < subsumRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictSubsumption) \noninteractive};

  inEqSimp_subsumption4 { \assumes ( subsumLeft <= subsumRightSmaller ==> )
                          \find ( subsumLeft*subsumCoeffBigger <= subsumRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <=
                                             subsumRightBigger ) |
                                         subsumLeft*subsumCoeffBigger <= subsumRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption40 { \assumes ( subsumLeft < subsumRightSmaller ==> )
                          \find ( subsumLeft*subsumCoeffBigger <= subsumRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <=
                                             subsumRightBigger ) |
                                         subsumLeft*subsumCoeffBigger <= subsumRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption41 { \assumes ( subsumLeft < subsumRightSmaller ==> )
                          \find ( subsumLeft*subsumCoeffBigger < subsumRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <=
                                             subsumRightBigger ) |
                                         subsumLeft*subsumCoeffBigger < subsumRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption42 { \assumes ( subsumLeft <= subsumRightSmaller ==> )
                          \find ( subsumLeft*subsumCoeffBigger < subsumRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <
                                             subsumRightBigger ) |
                                         subsumLeft*subsumCoeffBigger < subsumRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictSubsumption) \noninteractive};

  inEqSimp_subsumption5 { \assumes ( subsumLeft*subsumCoeffBigger >= subsumRightBigger ==> )
                          \find ( subsumLeft*subsumCoeffSmaller >= subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <=
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffSmaller >= subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption50 { \assumes ( subsumLeft*subsumCoeffBigger > subsumRightBigger ==> )
                          \find ( subsumLeft*subsumCoeffSmaller >= subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <=
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffSmaller >= subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption51 { \assumes ( subsumLeft*subsumCoeffBigger > subsumRightBigger ==> )
                          \find ( subsumLeft*subsumCoeffSmaller > subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <=
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffSmaller > subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption52 { \assumes ( subsumLeft*subsumCoeffBigger >= subsumRightBigger ==> )
                          \find ( subsumLeft*subsumCoeffSmaller > subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumCoeffBigger > 0
                                           & subsumCoeffBigger * subsumRightSmaller <
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffSmaller > subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictSubsumption) \noninteractive};

  inEqSimp_subsumption6 { \assumes ( subsumLeft >= subsumRightBigger ==> )
                          \find ( subsumLeft*subsumCoeffSmaller >= subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumRightSmaller <=
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffSmaller >= subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption60 { \assumes ( subsumLeft > subsumRightBigger ==> )
                          \find ( subsumLeft*subsumCoeffSmaller >= subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumRightSmaller <=
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffSmaller >= subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption61 { \assumes ( subsumLeft > subsumRightBigger ==> )
                          \find ( subsumLeft*subsumCoeffSmaller > subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumRightSmaller <=
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffSmaller > subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_subsumption) \noninteractive};

  inEqSimp_subsumption62 { \assumes ( subsumLeft >= subsumRightBigger ==> )
                          \find ( subsumLeft*subsumCoeffSmaller > subsumRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( subsumCoeffSmaller > 0
                                           & subsumRightSmaller <
                                             subsumCoeffSmaller * subsumRightBigger ) |
                                         subsumLeft*subsumCoeffSmaller > subsumRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictSubsumption) \noninteractive};

// ------------------------------------------------------------------
// ------------- Checks for contradictory inequalities --------------
// ------------------------------------------------------------------

  inEqSimp_contradInEq0 { \assumes ( contradLeft <= contradRightSmaller ==> )
                          \find ( contradLeft >= contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( contradRightSmaller >= contradRightBigger &
                                         contradLeft >= contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_contradInEqs) \noninteractive};

  inEqSimp_contradInEq00 { \assumes ( contradLeft < contradRightSmaller ==> )
                          \find ( contradLeft >= contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( contradRightSmaller > contradRightBigger &
                                         contradLeft >= contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq01 { \assumes ( contradLeft <= contradRightSmaller ==> )
                          \find ( contradLeft > contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( contradRightSmaller > contradRightBigger &
                                         contradLeft > contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq02 { \assumes ( contradLeft < contradRightSmaller ==> )
                          \find ( contradLeft > contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( contradRightSmaller > contradRightBigger &
                                         contradLeft > contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq1 { \assumes ( contradLeft >= contradRightBigger ==> )
                          \find ( contradLeft <= contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( contradRightSmaller >= contradRightBigger &
                                         contradLeft <= contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_contradInEqs) \noninteractive};

  inEqSimp_contradInEq10 { \assumes ( contradLeft > contradRightBigger ==> )
                          \find ( contradLeft <= contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( contradRightSmaller > contradRightBigger &
                                         contradLeft <= contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq11 { \assumes ( contradLeft >= contradRightBigger ==> )
                          \find ( contradLeft < contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( contradRightSmaller > contradRightBigger &
                                         contradLeft < contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq12 { \assumes ( contradLeft > contradRightBigger ==> )
                          \find ( contradLeft < contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( contradRightSmaller > contradRightBigger &
                                         contradLeft < contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq2 { \assumes ( contradLeft*contradCoeffSmaller <= contradRightSmaller ==> )
                          \find ( contradLeft*contradCoeffBigger >= contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >=
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffBigger >= contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_contradInEqs) \noninteractive};

  inEqSimp_contradInEq20 { \assumes ( contradLeft*contradCoeffSmaller < contradRightSmaller ==> )
                          \find ( contradLeft*contradCoeffBigger >= contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffBigger >= contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq21 { \assumes ( contradLeft*contradCoeffSmaller <= contradRightSmaller ==> )
                          \find ( contradLeft*contradCoeffBigger > contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffBigger > contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq22 { \assumes ( contradLeft*contradCoeffSmaller < contradRightSmaller ==> )
                          \find ( contradLeft*contradCoeffBigger > contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffBigger > contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq3 { \assumes ( contradLeft <= contradRightSmaller ==> )
                          \find ( contradLeft*contradCoeffBigger >= contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >=
                                           contradRightBigger ) &
                                         contradLeft*contradCoeffBigger >= contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_contradInEqs) \noninteractive};

  inEqSimp_contradInEq30 { \assumes ( contradLeft < contradRightSmaller ==> )
                          \find ( contradLeft*contradCoeffBigger >= contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >
                                           contradRightBigger ) &
                                         contradLeft*contradCoeffBigger >= contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq31 { \assumes ( contradLeft <= contradRightSmaller ==> )
                          \find ( contradLeft*contradCoeffBigger > contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >
                                           contradRightBigger ) &
                                         contradLeft*contradCoeffBigger > contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq32 { \assumes ( contradLeft < contradRightSmaller ==> )
                          \find ( contradLeft*contradCoeffBigger > contradRightBigger )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >
                                           contradRightBigger ) &
                                         contradLeft*contradCoeffBigger > contradRightBigger )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq4 { \assumes ( contradLeft*contradCoeffBigger >= contradRightBigger ==> )
                          \find ( contradLeft*contradCoeffSmaller <= contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >=
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffSmaller <= contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_contradInEqs) \noninteractive};

  inEqSimp_contradInEq40 { \assumes ( contradLeft*contradCoeffBigger > contradRightBigger ==> )
                          \find ( contradLeft*contradCoeffSmaller <= contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffSmaller <= contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq41 { \assumes ( contradLeft*contradCoeffBigger >= contradRightBigger ==> )
                          \find ( contradLeft*contradCoeffSmaller < contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffSmaller < contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq42 { \assumes ( contradLeft*contradCoeffBigger > contradRightBigger ==> )
                          \find ( contradLeft*contradCoeffSmaller < contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradCoeffBigger > 0 ->
                                           contradCoeffBigger * contradRightSmaller >
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffSmaller < contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq5 { \assumes ( contradLeft >= contradRightBigger ==> )
                          \find ( contradLeft*contradCoeffSmaller <= contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradRightSmaller >=
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffSmaller <= contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_contradInEqs) \noninteractive};

  inEqSimp_contradInEq50 { \assumes ( contradLeft > contradRightBigger ==> )
                          \find ( contradLeft*contradCoeffSmaller <= contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradRightSmaller >
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffSmaller <= contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq51 { \assumes ( contradLeft >= contradRightBigger ==> )
                          \find ( contradLeft*contradCoeffSmaller < contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradRightSmaller >
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffSmaller < contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

  inEqSimp_contradInEq52 { \assumes ( contradLeft > contradRightBigger ==> )
                          \find ( contradLeft*contradCoeffSmaller < contradRightSmaller )
                          \sameUpdateLevel
                          \replacewith ( ( contradCoeffSmaller > 0 ->
                                           contradRightSmaller >
                                           contradCoeffSmaller * contradRightBigger ) &
                                         contradLeft*contradCoeffSmaller < contradRightSmaller )
                          \heuristics (inEqSimp_propagation, inEqSimp_strictContradInEqs) \noninteractive};

// ------------------------------------------------------------------
// ------------- Strengthening of inequalities         --------------
// ------------- propagation into equations            --------------
// ------------------------------------------------------------------

  inEqSimp_strengthen0 { \assumes ( ==> strengthenLeft = strengthenRight )
                         \find ( strengthenLeft <= strengthenRight ==> )
                         \replacewith ( strengthenLeft < strengthenRight ==> )
                         \heuristics (inEqSimp_propagation, inEqSimp_strengthen) \noninteractive};

  inEqSimp_strengthen1 { \assumes ( ==> strengthenLeft = strengthenRight )
                         \find ( strengthenLeft >= strengthenRight ==> )
                         \replacewith ( strengthenLeft > strengthenRight ==> )
                         \heuristics (inEqSimp_propagation, inEqSimp_strengthen) \noninteractive};

  inEqSimp_contradEq3 { \assumes ( contradLeft <= contradRightSmaller ==> )
                        \find ( contradLeft = contradRightBigger )
                        \sameUpdateLevel
                        \replacewith ( contradRightSmaller + (-1)*contradRightBigger >= 0 &
                                       contradLeft = contradRightBigger )
                        \heuristics (inEqSimp_propagation, inEqSimp_contradEqs) \noninteractive};

  inEqSimp_contradEq30 { \assumes ( contradLeft < contradRightSmaller ==> )
                        \find ( contradLeft = contradRightBigger )
                        \sameUpdateLevel
                        \replacewith ( contradRightSmaller + (-1)*contradRightBigger > 0 &
                                       contradLeft = contradRightBigger )
                        \heuristics (inEqSimp_propagation, inEqSimp_strictContradEqs) \noninteractive};

  inEqSimp_contradEq7 { \assumes ( contradLeft >= contradRightBigger ==> )
                        \find ( contradLeft = contradRightSmaller )
                        \sameUpdateLevel
                        \replacewith ( contradRightBigger + (-1)*contradRightSmaller <= 0 &
                                       contradLeft = contradRightSmaller )
                        \heuristics (inEqSimp_propagation, inEqSimp_contradEqs) \noninteractive};

  inEqSimp_contradEq70 { \assumes ( contradLeft > contradRightBigger ==> )
                        \find ( contradLeft = contradRightSmaller )
                        \sameUpdateLevel
                        \replacewith ( contradRightBigger + (-1)*contradRightSmaller < 0 &
                                       contradLeft = contradRightSmaller )
                        \heuristics (inEqSimp_propagation, inEqSimp_strictContradEqs) \noninteractive};

// ---------------------------------------------------------
// - multiply both sides of an (in)equation with some term -
// ---------------------------------------------------------

  elimGcdEq      { \find ( elimGcdLeft = elimGcdRight )
                   \replacewith ( \if (elimGcd = 0)
                                  \then (elimGcdLeft = elimGcdRight)
                                  \else (elimGcdLeft * (1 / elimGcd) =
                                         elimGcdRight * (1 / elimGcd)) )
                   \heuristics (polySimp_pullOutGcd) \noninteractive};
  
  elimGcdLeq      { \find ( elimGcdLeft <= elimGcdRight )
                    \replacewith ( \if (elimGcd > 0)
                                   \then (elimGcdLeft * (1 / elimGcd) <=
                                          elimGcdRight * (1 / elimGcd))
                                   \else (\if (elimGcd < 0)
                                          \then (elimGcdLeft * (1 / elimGcd) >=
                                                 elimGcdRight * (1 / elimGcd))
                                          \else (elimGcdLeft <= elimGcdRight)))
                    \heuristics (polySimp_pullOutGcd) \noninteractive};
  
  elimGcdGeq      { \find ( elimGcdLeft >= elimGcdRight )
                    \replacewith ( \if (elimGcd > 0)
                                   \then (elimGcdLeft * (1 / elimGcd) >=
                                          elimGcdRight * (1 / elimGcd))
                                   \else (\if (elimGcd < 0)
                                          \then (elimGcdLeft * (1 / elimGcd) <=
                                                 elimGcdRight * (1 / elimGcd))
                                          \else (elimGcdLeft >= elimGcdRight)))
                    \heuristics (polySimp_pullOutGcd) \noninteractive};
  
  elimGcdLess     { \find ( elimGcdLeft < elimGcdRight )
                    \replacewith ( \if (elimGcd > 0)
                                   \then (elimGcdLeft * (1 / elimGcd) <
                                          elimGcdRight * (1 / elimGcd))
                                   \else (\if (elimGcd < 0)
                                          \then (elimGcdLeft * (1 / elimGcd) >
                                                 elimGcdRight * (1 / elimGcd))
                                          \else (elimGcdLeft < elimGcdRight)))
                    \heuristics (polySimp_pullOutGcd) \noninteractive};
  
  elimGcdGreater  { \find ( elimGcdLeft > elimGcdRight )
                    \replacewith ( \if (elimGcd > 0)
                                   \then (elimGcdLeft * (1 / elimGcd) >
                                          elimGcdRight * (1 / elimGcd))
                                   \else (\if (elimGcd < 0)
                                          \then (elimGcdLeft * (1 / elimGcd) <
                                                 elimGcdRight * (1 / elimGcd))
                                          \else (elimGcdLeft > elimGcdRight)))
                    \heuristics (polySimp_pullOutGcd) \noninteractive};
  

  multiply_inEq0 { \find ( multLeft <= multRight ==> )
                   \add ( \if (multFac >= 0)
                          \then (multLeft * multFac <= multRight * multFac)
                          \else (multLeft * multFac >= multRight * multFac) ==> ) \noninteractive};

  multiply_inEq1 { \find ( multLeft >= multRight ==> )
                   \add ( \if (multFac >= 0)
                          \then (multLeft * multFac >= multRight * multFac)
                          \else (multLeft * multFac <= multRight * multFac) ==> ) \noninteractive};

  multiply_inEq2 { \find ( multLeft < multRight ==> )
                   \add ( \if (multFac > 0)
                          \then (multLeft * multFac < multRight * multFac)
                          \else (\if (multFac < 0)
                                 \then (multLeft * multFac > multRight * multFac)
                                 \else (multLeft < multRight)) ==> ) \noninteractive};

  multiply_inEq3 { \find ( multLeft > multRight ==> )
                   \add ( \if (multFac > 0)
                          \then (multLeft * multFac > multRight * multFac)
                          \else (\if (multFac < 0)
                                 \then (multLeft * multFac < multRight * multFac)
                                 \else (multLeft > multRight)) ==> ) \noninteractive};

// ---------------------------------------------------------
// - transform inequalities and inequations to equalities --
// ---------------------------------------------------------

  inequation2Equation {
    \find ( ==> i = i0 )
    \varcond(\notFreeIn(u, i), \notFreeIn(u, i0))
    \replacewith ( \exists u; (i - i0)*u = 1 ==> )
  };

  inequality2Equation1 {
    \find ( i >= i0 ==> )
    \varcond(\notFreeIn(u, i), \notFreeIn(u, i0))
    \replacewith ( \exists u; i = u*u + i0 ==> )
  };

  inequality2Equation2 {
    \find ( i <= i0 ==> )
    \varcond(\notFreeIn(u, i), \notFreeIn(u, i0))
    \replacewith ( \exists u; i = i0 - u*u ==> )
  };

  inequality2Equation3 {
    \find ( i > i0 ==> )
    \varcond(\notFreeIn(u, i), \notFreeIn(u, i0))
    \replacewith ( \exists u; (i - i0)*u*u = 1 ==> )
  };

  inequality2Equation4 {
    \find ( i < i0 ==> )
    \varcond(\notFreeIn(u, i), \notFreeIn(u, i0))
    \replacewith ( \exists u; (i0 - i)*u*u = 1 ==> )
  };

}
