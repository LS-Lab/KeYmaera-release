// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2003 Universitaet Karlsruhe, Germany
//                         and Chalmers University of Technology, Sweden          
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//

\include ruleSetsDeclarations; 

\schemaVariables {
  \term R trm, q, i, i0, j;
  \term R homoLeft, homoRight;
  \term R distSummand0, distSummand1, distCoeff;
  \term R commLeft, commRight;
  \term R addAssocMono, addAssocPoly0, addAssocPoly1;
  \term R mulAssocAtom, mulAssocMono0, mulAssocMono1;
  \term R expandExp;
  \term R calcRight0, calcRight1;
  \term R pullOutCommon, pullOutLeft, pullOutRight;
  \term R invertLeft, invertRight;
  \term R sepPosMono, sepNegMono, sepResidue;
  \skolemTerm R sk;
  \variables R u;

  \variables R n;
}

\rules {

////////////////////////////////////////
//
// Rules for handling inequations
// Transformations normalising inequalities to one of the forms
//   a>b ==> 
//   a>=b ==> 
//

  less_right { \find (==> lt(trm, q))
		\replacewith (geq(trm, q) ==>) // \heuristics (inequation_normalization)
  };

  less_equal_right { \find (==> leq(trm, q))
		 \replacewith (gt(trm, q) ==>) // \heuristics (inequation_normalization)
  };

  less_left { \find (lt(trm,q) ==>)
		 \replacewith (gt(q, trm) ==>) // \heuristics (inequation_normalization)
  };

  less_equal_left { \find (leq(trm,q) ==>)
		 \replacewith (geq(q, trm) ==>) // \heuristics (inequation_normalization)
  };

  greater_right { \find (==> gt(trm, q))
		\replacewith (geq(q,trm) ==>) // \heuristics (inequation_normalization)
  };

  greater_equal_right { \find (==> geq(trm, q))
		\replacewith (gt(q, trm) ==>) // \heuristics (inequation_normalization)
  };

  // further inequation normalization

  inequality_right { \find (==> neq(trm, q))
		\replacewith (trm=q ==>) // \heuristics (inequation_normalization)
  };

  simplify_greater_greater_equal_left { \assumes (gt(trm,q) ==> )
		\find (geq(trm,q) ==>)
		\replacewith (==>) // \heuristics (inequation_normalization)
  };

  simplify_greater_equal_greater_equal_left {
                \assumes (geq(trm,q)==>)  /* this part will be removed by simplify_equal_greater_equal */
		\find (geq(q,trm)==>)
		\replacewith (trm=q ==>) // \heuristics (inequation_normalization)
  };
  
  simplify_equal_greater_equal_left { \assumes (trm=q ==> )
		\find (geq(trm,q) ==>)
		\replacewith (==>) // \heuristics (inequation_normalization)
  };
  simplify_equal_greater_equal_left2 { \assumes (trm=q ==> )
		\find (geq(q,trm) ==>)
		\replacewith (==>) // \heuristics (inequation_normalization)
  };

  close_ineq { \assumes ( gt(trm, q) ==>)
  	\find( gt(q, trm) ==>)
	\closegoal
	// \heuristics(closure)
  };

  close_ineq_eq_1 { \assumes ( gt(trm, q) ==>)
  	\find( q= trm ==>)
	\closegoal
	// \heuristics(closure)
  };

  close_ineq_eq_2 { \assumes ( gt(trm, q) ==>)
  	\find( trm=q ==>)
	\closegoal
	// \heuristics(closure)
  };

  equal_reflexive { \find (trm=trm)
        \replacewith (true)
        // \heuristics(inequation_normalization)
  };

  inequality_irreflexive { \find (neq(trm,trm))
        \replacewith (false)
        // \heuristics(inequation_normalization)
  };


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Evaluation of constant expressions

  add_literals { \find(i+j) \replacewith(#evaluate(i+j))
                 \heuristics (eval_literals) };
  sub_literals { \find(i-j) \replacewith(#evaluate(i-j))
                 \heuristics (eval_literals) };
  neg_literal  { \find(-i) \replacewith(#evaluate(-i))
                 \heuristics (eval_literals) };
  mul_literals { \find(i*j) \replacewith(#evaluate(i*j))
                 \heuristics (eval_literals) };
  div_literals { \find(i/j) \replacewith(#evaluate(i/j))
                 \heuristics (eval_literals) };
  pow_literals { \find(i^j) \replacewith(#evaluate(i^j))
                 \heuristics (eval_literals) };
  eq_literals  { \find(i=j) \replacewith(#evaluate(i=j))
                 \heuristics (eval_literals) };
  lt_literals  { \find(i<j) \replacewith(#evaluate(i<j))
                 \heuristics (eval_literals) };
  gt_literals  { \find(i>j) \replacewith(#evaluate(i>j))
                 \heuristics (eval_literals) };
  le_literals  { \find(i<=j) \replacewith(#evaluate(i<=j))
                 \heuristics (eval_literals) };
  ge_literals  { \find(i>=j) \replacewith(#evaluate(i>=j))
                 \heuristics (eval_literals) };

  add_literals_right {\find (add(add(i, calcRight0), calcRight1))
                      \replacewith (add(i, #evaluate(calcRight0 + calcRight1)))
                      \heuristics (eval_literals_right)};

  mul_literals_right {\find (mul(mul(i, calcRight0), calcRight1))
                      \replacewith (mul(i, #evaluate(calcRight0 * calcRight1)))
                      \heuristics (eval_literals_right)};


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Integer rules adapted to the reals


  mul_zero_right {\find (mul(i,0)) \replacewith (0)
                  \heuristics (simplify_literals)};

  mul_zero_left  {\find (mul(0,i)) \replacewith (0)
                  \heuristics (simplify_literals)};

  add_zero_left  { \find (add(0, i)) \replacewith (i)
                   \heuristics (simplify_literals) };

  add_zero_right { \find (add(i, 0)) \replacewith (i)
                   \heuristics (simplify_literals) };

  pow_one { \find (exp(i, 1)) \replacewith(i)
            \heuristics(simplify_literals) };

// ---------------------------------------------------------
// ------------- normalisation of polynomials --------------
// ---------------------------------------------------------

  polySimp_expandPow { \find (exp(i, expandExp))
                       \replacewith(\if (expandExp >= 1)
                                    \then (i * exp(i, expandExp - 1))
                                    \else (exp(i, expandExp)))
                       \heuristics(polySimp_expand, polySimp_expandPow)
  };

  polySimp_elimSub { \find (sub(i, i0)) \replacewith (add(i, mul(i0, -1)))
                     \heuristics(polySimp_expand, polySimp_elimSubNeg)
  };

  polySimp_elimNeg { \find (neg(i)) \replacewith (mul(i, -1))
                     \heuristics(polySimp_expand, polySimp_elimSubNeg)
  };

  polySimp_elimOne {\find (mul(i,1)) \replacewith (i)
                    \heuristics (polySimp_expand, polySimp_elimOneRight)};

  polySimp_elimOneLeft0 {\find (mul(1,i)) \replacewith (i)
                         \heuristics (polySimp_expand, polySimp_elimOneLeft)};

  polySimp_elimOneLeft1 {\find (mul(mul(i0,1),i)) \replacewith (mul(i0,i))
                         \heuristics (polySimp_expand, polySimp_elimOneLeft)};

  polySimp_homoEq  { \find (homoLeft = homoRight)
                     \replacewith (add(homoRight, mul(homoLeft, -1)) = 0)
                     \heuristics(polySimp_expand, polySimp_homo)
  };

  polySimp_rightDist { \find ( mul(distCoeff, add(distSummand0, distSummand1)) )
                       \replacewith( add(mul(distCoeff, distSummand0),
                                         mul(distSummand1, distCoeff)))
                       \heuristics(polySimp_expand, polySimp_dist)
  };


  polySimp_addAssoc {
         \find (add(addAssocPoly0, add(addAssocPoly1, addAssocMono)))
         \replacewith(add(add(addAssocPoly0, addAssocPoly1), addAssocMono))
         \heuristics(polySimp_expand, polySimp_addAssoc)
  };

  polySimp_mulAssoc {
         \find (mul(mulAssocMono0, mul(mulAssocMono1, mulAssocAtom)))
         \replacewith(mul(mul(mulAssocMono0, mulAssocMono1), mulAssocAtom))
         \heuristics(polySimp_expand, polySimp_mulAssoc)
  };


  polySimp_addComm0  { \find (add(commLeft, commRight))
                       \replacewith(add(commRight, commLeft))
                       \heuristics(polySimp_expand, polySimp_addOrder)
  };

  polySimp_addComm1  { \find (add(add(i0, commLeft), commRight))
                       \replacewith(add(add(i0, commRight), commLeft))
                       \heuristics(polySimp_expand, polySimp_addOrder)
  };


  polySimp_mulComm0  { \find (mul(commLeft, commRight))
                       \replacewith(mul(commRight, commLeft))
                       \heuristics(polySimp_expand, polySimp_mulOrder)
  };

  polySimp_mulComm1  { \find (mul(mul(i0, commLeft), commRight))
                       \replacewith(mul(mul(i0, commRight), commLeft))
                       \heuristics(polySimp_expand, polySimp_mulOrder)
  };

  polySimp_pullOutFactor0 {\find (add(mul(pullOutCommon, pullOutLeft),
                                      mul(pullOutCommon, pullOutRight)))
                           \replacewith (mul(pullOutCommon,
                                             add(pullOutLeft, pullOutRight)))
                           \heuristics (polySimp_expand, polySimp_pullOutFactor)};

  polySimp_pullOutFactor1 {\find (add(pullOutCommon,
                                      mul(pullOutCommon, pullOutRight)))
                           \replacewith (mul(pullOutCommon,
                                             add(1, pullOutRight)))
                           \heuristics (polySimp_expand, polySimp_pullOutFactor)};

  polySimp_pullOutFactor2 {\find (add(mul(pullOutCommon, pullOutLeft),
                                      pullOutCommon))
                           \replacewith (mul(pullOutCommon,
                                             add(pullOutLeft, 1)))
                           \heuristics (polySimp_expand, polySimp_pullOutFactor)};

  polySimp_pullOutFactor3 {\find (add(pullOutCommon, pullOutCommon))
                           \replacewith (mul(pullOutCommon, 2))
                           \heuristics (polySimp_expand, polySimp_pullOutFactor)};

  polySimp_pullOutFactor0b {\find (add(add(i0, mul(pullOutCommon, pullOutLeft)),
                                       mul(pullOutCommon, pullOutRight)))
                            \replacewith (add(i0, mul(pullOutCommon,
                                                      add(pullOutLeft, pullOutRight))))
                            \heuristics (polySimp_expand, polySimp_pullOutFactor)};

  polySimp_pullOutFactor1b {\find (add(add(i0, pullOutCommon),
                                       mul(pullOutCommon, pullOutRight)))
                            \replacewith (add(i0, mul(pullOutCommon,
                                                      add(1, pullOutRight))))
                            \heuristics (polySimp_expand, polySimp_pullOutFactor)};

  polySimp_pullOutFactor2b {\find (add(add(i0, mul(pullOutCommon, pullOutLeft)),
                                       pullOutCommon))
                            \replacewith (add(i0, mul(pullOutCommon,
                                                      add(pullOutLeft, 1))))
                            \heuristics (polySimp_expand, polySimp_pullOutFactor)};

  polySimp_pullOutFactor3b {\find (add(add(i0, pullOutCommon), pullOutCommon))
                            \replacewith (add(i0, mul(pullOutCommon, 2)))
                            \heuristics (polySimp_expand, polySimp_pullOutFactor)};

  polySimp_invertEq  { \find ( invertLeft = invertRight )
                       \replacewith ( invertLeft * (-1) = invertRight * (-1) )
                       \heuristics (polySimp_directEquations, polySimp_normalise) };

  polySimp_sepPosMonomial {\find (add(sepResidue, sepPosMono) = 0)
                           \replacewith (sepPosMono = mul(sepResidue, -1))
                           \heuristics (polySimp_directEquations, polySimp_balance)};

  polySimp_sepNegMonomial {\find (add(sepResidue, sepNegMono) = 0)
                           \replacewith (mul(sepNegMono, -1) = sepResidue)
                           \heuristics (polySimp_directEquations, polySimp_balance)};

}