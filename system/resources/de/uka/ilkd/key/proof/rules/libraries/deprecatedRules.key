// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe Germany
//                         Universitaet Koblenz-Landau, Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
//


\optionsDecl{
  initialisation:{disableStaticInitialisation, enableStaticInitialisation};
  transactionsPolicy:{abortTransaction,noAbortTransaction};
}


\sorts{
}

\schemaVariables {
 \modalOperator { diamond, box, throughout,
                             diamond_trc, box_trc, throughout_trc,
                             diamond_tra, box_tra, throughout_tra } #allmodal;
 \formula post;
 \program SimpleExpression #se, #se0, #se1 ;
 \program LeftHandSide #lhs ;
 \program Statement #s0, #s1 ;
}

\functions{
}

\rules(programRules:Java) {

// These rules are marked as deprecated and will be removed soon.
// Their only prupose is to maintain loading of old proofs.



if_split_imp  { \find (\modality{#allmodal}{.. if(#se) #s0  ...}\endmodality(post))
       \replacewith ((#se=TRUE -> \modality{#allmodal}{.. #s0 ...}\endmodality(post))
                   & (#se=FALSE -> \modality{#allmodal}{.. ...}\endmodality(post))) };

if_else_split_imp  { \find (\modality{#allmodal}{.. if(#se) #s0 else #s1 ...}\endmodality(post))
       \replacewith ((#se=TRUE -> \modality{#allmodal}{.. #s0 ...}\endmodality(post))
                   & (#se=FALSE -> \modality{#allmodal}{.. #s1 ...}\endmodality(post))) };


//------------------------------------------------------------------------
// ------------ Rules for comparison operators
//------------------------------------------------------------------------

  equality_comparision { \find ( \modality{#allmodal}{.. #lhs = #se0 == #se1; ...}\endmodality(post))
    \replacewith ( (! #se0=#se1 ->  \modality{#allmodal}{.. #lhs = false; ...}\endmodality(post)) &
                  (#se0=#se1 ->  \modality{#allmodal}{.. #lhs = true; ...}\endmodality(post)))
  };

  inequality_comparision { \find ( \modality{#allmodal}{.. #lhs = #se0 != #se1; ...}\endmodality(post))
    \replacewith ( (! #se0=#se1 ->  \modality{#allmodal}{.. #lhs = true; ...}\endmodality(post)) &
                    (#se0=#se1 ->  \modality{#allmodal}{.. #lhs = false; ...}\endmodality(post)))
  };

  less_than_comparision { \find ( \modality{#allmodal}{.. #lhs = #se0 < #se1; ...}\endmodality(post))
    \replacewith ( (lt(#se0,#se1) ->  \modality{#allmodal}{.. #lhs = true; ...}\endmodality(post) )&
                  (! lt(#se0,#se1) ->  \modality{#allmodal}{.. #lhs = false; ...}\endmodality(post)))
  };

  less_equal_than_comparision { \find ( \modality{#allmodal}{.. #lhs = #se0 <= #se1; ...}\endmodality(post))
    \replacewith ( ((leq(#se0,#se1)) ->  \modality{#allmodal}{.. #lhs = true; ...}\endmodality(post)) &
                  (! (leq(#se0,#se1))  ->  \modality{#allmodal}{.. #lhs = false; ...}\endmodality(post)))
  };

  greater_than_comparision { \find ( \modality{#allmodal}{.. #lhs = #se0 > #se1; ...}\endmodality(post))
    \replacewith ( (gt(#se0,#se1) ->  \modality{#allmodal}{.. #lhs = true; ...}\endmodality(post)) &
                  (! gt(#se0,#se1) ->  \modality{#allmodal}{.. #lhs = false; ...}\endmodality(post)))
  };

  greater_equal_than_comparision { \find ( \modality{#allmodal}{.. #lhs = #se0 >= #se1; ...}\endmodality(post))
    \replacewith ( ((geq(#se0,#se1)) ->  \modality{#allmodal}{.. #lhs = true; ...}\endmodality(post)) &
                  (! (geq(#se0,#se1))  ->  \modality{#allmodal}{.. #lhs = false; ...}\endmodality(post)))
  };
}
