// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2003 Universitaet Karlsruhe Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules for handling java programs

\optionsDecl{
  nullPointerPolicy:{nullCheck, noNullCheck};
  programRules:{Java, ODL, dL};
  intRules:{arithmeticSemanticsIgnoringOF, arithmeticSemanticsCheckingOF, 
            javaSemantics};
  transactions:{transactionsOn,transactionsOff};
  transactionAbort:{abortOn,abortOff};
  throughout:{toutOn,toutOff};
}




\heuristicsDecl{
  modal_tautology;
  simplify_prog;
  split;
  
  // the rule set split if is currently also used to mark program rule applications which
  // would usually be considered to split, but don't because usage of
  // the "if-then-else" operator in logic or by encoding it as 
  //   (cond-> <a>phi) & (!cond -> <b>phi)  
  split_if;
  
  hiding;
  split_cond;
  simplify;
  simplify_prog_subset;
  simplify_object_creation;
  simplify_expression;
  simplify_autoname;
  method_expand;
  use_method_specs;
  simplify_updates;
  simplify_instanceof_static;
  evaluate_instanceof;
  instanceof_to_exists;
  simplify_sets;
  loop_expand;

  split_gen;
  // the rule set loop invariant is used only by those loop invariant rules
  // which either do not consider termination at all or with a given decreasing term
  // others need user interaction for closing and are thus not applied automatically by the 
  // strategies 
  loop_invariant;
  
  loop_variant;
  
  // this rule set marks that the loop invariant rule may be instantiated by looking at the annotations
  // after max side branch is merged on the main, we may implement matching svs for annotation thus
  // not needing to instantiate loop invariant rules this way
  loop_invariant_proposal;

  // supergroup for all rules for differential equations
  diff_rule;  
  // rules which involve solving of differential equations
  diff_solve;  
  // weaken or strengthening rules of invariants like diffweaken
  invariant_weaken;
  invariant_strengthen;
  invariant_diff;
  // normalization rules
  diff_normalize_dnf;
  diff_normalize_choice;
  diff_ineq_weaken;
  
  std_taclets;
  closure;
  replace_known;
  confluence_restricted;
  delta;
  beta;
  beta_lemma;
  gamma;
  gamma_destructive;
  test_gen;
  order_terms;
  apply_equations;
  apply_equations_sym;
  insert_eq_nonrigid;
  simplify_literals;
  simplify_int;
  eval_literals;
  queries;
  query_normalize;
  int_arithmetic;
  charLiteral_to_intLiteral;
  delta;
  pull_out_quantifier;
  simplify_boolean;
  boolean_cases;
  alpha;
  concrete;
  try_apply_subst;
  type_hierarchy_def;  

  //quantifier heuristics
  constant_refine;
  quantifier_switch;
  quantifier_cnf;
  quantifier_cnf_imp;
  quantifier_cnf_not;
  quantifier_cnf_assoc;
  var_free_first;
  push_down_quantifier_and;
  push_down_quantifier_or;
  pull_out_quantifier;
  cnf_order_left_assoc;
  cnf_order_right_assoc;
  cnf_order_rotate;

  cut;

  // primary categories for Buchberger
  polySimp_expand;
  polySimp_directEquations;
  polySimp_saturate;
  polySimp_pullOutGcd;

  // secondary categories for Buchberger
  polySimp_elimSubNeg;
  polySimp_dist;
  polySimp_addAssoc;
  polySimp_mulAssoc;
  polySimp_addOrder;
  polySimp_mulOrder;
  polySimp_mulOne;
  polySimp_balance;
  polySimp_elimOneLeft;
  polySimp_elimOneRight;
  polySimp_normalise;
  polySimp_applyEq;
  polySimp_applyEqRigid;
  polySimp_homo;
  polySimp_pullOutFactor;
  polySimp_critPair;
  polySimp_divDistr;

  // primary categories for Omega
  inEqSimp_expand;
  inEqSimp_directInEquations;
  inEqSimp_saturate;
  inEqSimp_propagation;
  inEqSimp_pullOutGcd;
  inEqSimp_nonLin;
  inEqSimp_special_nonLin;
  inEqSimp_forNormalisation;

  // secondary categories for Omega
  inEqSimp_moveLeft;
  inEqSimp_homo;
  inEqSimp_commute;
  inEqSimp_balance;
  inEqSimp_antiSymm;
  inEqSimp_exactShadow;
  inEqSimp_normalise;
  inEqSimp_subsumption;
  inEqSimp_contradInEqs;
  inEqSimp_contradEqs;
  inEqSimp_strengthen;
  inEqSimp_nonLin_multiply;
  inEqSimp_nonLin_divide;
  inEqSimp_nonLin_pos;
  inEqSimp_nonLin_neg;
  inEqSimp_nonNegSquares;
  inEqSimp_split_eq;
  inEqSimp_and_contradInEqs;
  inEqSimp_andOr_subsumption;
  inEqSimp_and_subsumptionEq;
  inEqSimp_or_tautInEqs;
  inEqSimp_or_weaken;
  inEqSimp_or_antiSymm;

  // used to solve several issues with system invariants
  system_invariant;

  // used to avoid infinite loops when removing casts
  cast_deletion;

  // rules for adding assertions x.length >= 0
  non_negative_array_length;
//  demo;

  mathematica_reduce;
  mathematica_simplify;

  inequation_normalization;

  // rules for adding assertions like x.length >= 0,
  // o.a.<created> = TRUE, etc. that can be derived
  // from inReachableState
  inReachableStateImplication;

  boxDiamondConv;

  // normalisation of formulas that cannot be analysed directly
  // (e.g., quantified formulas)

  // primary categories
  negationNormalForm;
  conjNormalForm;
  apply_equations_andOr;
  elimQuantifier;
  distrQuantifier;
  pullOutQuantifierAll;
  pullOutQuantifierEx;
  swapQuantifiers;

  // secondary categories
  cnf_andAssoc;
  cnf_orAssoc;
  cnf_andComm;
  cnf_orComm;
  cnf_dist;
  cnf_expandIfThenElse;
  elimQuantifierWithCast;
  pullOutQuantifierUnifying;
  auxilaries;
}
