// This file is part of KeYmaera
// Copyright (C) 2007 Andre Platzer
//
// The KeYmaera system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules for handling hybrid programs


\include ruleSetsDeclarations;

\schemaVariables {
  \formula post, inv, augment;

  \variables R ep;
  \program NormalizedOrdinaryDiffSystem #normalizedODE;
  \program OrdinaryDiffSystem #ordinarydiffsystem;
  \program OrdinaryAndNotNormalizedDiffSystem #ordinaryandnotnormalizeddiffsystem;
  //@TODO this should be QuantifiedSimpleOrdinaryDiffSystem and NormalizedOrdinaryDiffSystem
  \program QuantifiedSimpleOrdinaryDiffSystem #qsimpleode;
  \program DiffSystem #diffsystem,#newsys;
  \program DiffSystemWithIneq #diffsystemWithIneq;
}

\rules {
////////////////////////////////////////
//
// program rules
//
 
 normalize_ode_box_right { \find (==> \[#ordinaryandnotnormalizeddiffsystem\]post)
          \replacewith (==> #DiffNormalize(\[#ordinaryandnotnormalizeddiffsystem\]post) )
          \heuristics(diff_rule)
		  \onlyRigidFunctions
          \displayname "Normalize ODE"
 };

 normalize_ode_box_left { \find (\[#ordinaryandnotnormalizeddiffsystem\]post ==>)
          \replacewith (#DiffNormalize(\[#ordinaryandnotnormalizeddiffsystem\]post) ==> )
          \heuristics(diff_rule)
		  \onlyRigidFunctions
          \displayname "Normalize ODE"
 };

 normalize_ode_dia_right { \find (==> \<#ordinaryandnotnormalizeddiffsystem\>post)
          \replacewith (==> #DiffNormalize(\<#ordinaryandnotnormalizeddiffsystem\>post) )
          \heuristics(diff_rule)
		  \onlyRigidFunctions
          \displayname "Normalize ODE"
 };

 normalize_ode_dia_left { \find (\<#ordinaryandnotnormalizeddiffsystem\>post ==>)
          \replacewith (#DiffNormalize(\<#ordinaryandnotnormalizeddiffsystem\>post) ==> )
          \heuristics(diff_rule)
		  \onlyRigidFunctions
          \displayname "Normalize ODE"
 };
 
 diffind { \find (==> \[#normalizedODE\]post)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\]post) ==> post );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, #DiffInd(\[#normalizedODE\]post), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "DI differential invariant"
 }; 

  diffindmod { \find (==> \[#normalizedODE\]post)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\]post) ==> post );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, #DiffIndMod(\[#normalizedODE\]post), false))
          \heuristics(invariant_diff,diff_rule)
        \onlyRigidFunctions
          \displayname "Positively invariant set"
 }; 

 diffindmod_left { \find (\<#normalizedODE\>post ==>)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\]!post) ==> !post );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, #DiffIndMod(\[#normalizedODE\]!post), false))
          \heuristics(invariant_diff,diff_rule)
        \onlyRigidFunctions
          \displayname "DI differential invariant"
 }; 
 
 diffind_left { \find (\<#normalizedODE\>post ==>)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#normalizedODE\]!post) ==> !post );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, #DiffInd(\[#normalizedODE\]!post), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "DI differential invariant"
 }; 

 Qdiffind { \find (==> \[#qsimpleode\]post)
      //@TODO \varcond(\isFirstOrderFormula(post)) allowing quantifiers though
      //@TODO the #DiffInd operator does not accept quantified differential equations yet.
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#qsimpleode\]post) ==> post );
    "ODE Preserves Invariant":
          \addfreshgoal (==>  #DiffInd(\[#qsimpleode\]post))
          \displayname "QDI quantified differential invariant"
 }; 

 difffin { \find (==> \<#normalizedODE\>post)
      \varcond(\isFirstOrderFormula(post), \notFreeIn(ep, post))
    "Invariant Sustained":
          \replacewith (==>  #weaknegateinv(\<#normalizedODE\>post));
    "Variant Progress":
          \replacewith (==>  \exists ep; (ep>0 & #dlUniversalClosure(\[#normalizedODE\]true, !post -> #DiffFin(\<#normalizedODE\>post, ep), false)))
          ///\replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, !post -> #DiffFin(\<#normalizedODE\>post, 1), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "DV differential variant"
 }; 

 difffin_left { \find (\[#normalizedODE\]post ==>)
      \varcond(\isFirstOrderFormula(post), \notFreeIn(ep, post))
    "Invariant Sustained":
                    \replacewith (==>  #weaknegateinv(\<#normalizedODE\>!post));
    "Variant Progress":
          \replacewith (==>  \exists ep; (ep>0 & #dlUniversalClosure(\[#normalizedODE\]true, !post -> #DiffFin(\<#normalizedODE\>post, ep), false)))
          /// \replacewith (==>  #dlUniversalClosure(\[#normalizedODE\]true, post -> #DiffFin(\<#normalizedODE\>!post, 1), false))
          \heuristics(invariant_diff,diff_rule)
		  \onlyRigidFunctions
          \displayname "DV differential variant"
 }; 

 diffweaken { \find (==> \[#ordinarydiffsystem\]post)
          \replacewith (==>  #dlUniversalClosure(\[#ordinarydiffsystem\]true, #invariantPart(\[#ordinarydiffsystem\]post) -> post, false))
          \displayname "[DR'] differential weakening"
		  \onlyRigidFunctions
          \heuristics(invariant_weaken,diff_rule) 
 }; 

  //@todo should rename internally to diffcut with \oldname(diffstrenghten)
 diffstrengthen { \find (==> \[#ordinarydiffsystem\]post)
      \varcond(\isFirstOrderFormula(augment))
    "Invariant Valid":
          \replacewith (==> \[#ordinarydiffsystem\] augment );
    "Augmented Invariant":
          \replacewith (==>  #diffAdjoin(\[#ordinarydiffsystem\]post,augment))
          \heuristics(invariant_strengthen,diff_rule)
          \displayname "[DC] differential cut"
 }; 
 
 diffreplace_box_right { \find (==> \[#diffsystem\]post )
 	"System entailment":
 		\replacewith(==> #dlUniversalClosure(\[#diffsystem\]true, #dlimplies(\[#diffsystem\]true,\[#newsys\]true), false));
	"Generalisation":
		\replacewith(==> \[#newsys\] post)
		  \onlyRigidFunctions
		\displayname "[DR] differential refine"
};
 
 diffreplace_box_left { \find (\[#diffsystem\]post ==>)
 	"System entailment":
 		\replacewith(==> #dlUniversalClosure(\[#diffsystem\]true, #dlimplies(\[#newsys\]true,\[#diffsystem\]true), false));
	"Generalisation":
		\replacewith(\[#newsys\] post ==>)
		\heuristics(diff_ineq_weaken,diff_rule)
		  \onlyRigidFunctions
		\displayname "[DR] differential refine" 	
};

 diffreplace_dia_right { \find (==> \<#diffsystem\>post )
 	"System entailment":
 		\replacewith(==> #dlUniversalClosure(\[#diffsystem\]true, #dlimplies(\[#newsys\]true,\[#diffsystem\]true), false));
	"Generalisation":
		\replacewith(==>\<#newsys\> post)
		\heuristics(diff_ineq_weaken,diff_rule)
		  \onlyRigidFunctions
		\displayname "<DR> differential refine" 	
};
 
 diffreplace_dia_left { \find (\<#diffsystem\>post ==>)
 	"System entailment":
 		\replacewith(==> #dlUniversalClosure(\[#diffsystem\]true, #dlimplies(\[#diffsystem\]true,\[#newsys\]true), false));
	"Generalisation":
		\replacewith(\<#newsys\> post ==>)
		  \onlyRigidFunctions
		\displayname "<DR> differential refine" 	
};

}
