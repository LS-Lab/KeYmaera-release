// This file is part of KeYmaera
// Copyright (C) 2007 Andre Platzer
//
// The KeYmaera system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules for handling hybrid programs


\include ruleSetsDeclarations;

\schemaVariables {
  \formula post, inv, augment;

  \program DiffSystem #diffsystem;
  \variables R ep;
  \program OrdinaryDiffSystem #ordinarydiffsystem;
}

\rules {
////////////////////////////////////////
//
// program rules
//
 
 diffind { \find (==> \[#ordinarydiffsystem\]post)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#ordinarydiffsystem\]post) ==> post );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#ordinarydiffsystem\]true, #DiffInd(\[#ordinarydiffsystem\]post), false))
          \heuristics(invariant_diff,diff_rule)
          \displayname "diffind"
 }; 

 difffin { \find (==> \<#ordinarydiffsystem\>post)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Sustained":
          //@todo this is only an approximation
          \replacewith (==>  #dlUniversalClosure(\[#ordinarydiffsystem\]true, #invariantPart(\[#ordinarydiffsystem\]post), false));
    "Variant Progress":
          //////@todo \replacewith (==>  \exists ep; (ep>0 & #dlUniversalClosure(\[#diffsystem\]true, !post -> #DiffFin(\<#diffsystem\>post, ep), false)))
          \replacewith (==>  #dlUniversalClosure(\[#ordinarydiffsystem\]true, !post -> #DiffFin(\<#ordinarydiffsystem\>post, 1), false))
          \heuristics(invariant_diff,diff_rule)
          \displayname "difffin"
 }; 

 diffweaken { \find (==> \[#diffsystem\]post)
          \replacewith (==>  #dlUniversalClosure(\[#diffsystem\]true, #invariantPart(\[#diffsystem\]post) -> post, false))
          \displayname "diffweaken"
          \heuristics(invariant_weaken,diff_rule)
 }; 

 diffstrengthen { \find (==> \[#diffsystem\]post)
      \varcond(\isFirstOrderFormula(augment))
    "Invariant Valid":
          \replacewith (==> \[#diffsystem\] augment );
    "Augmented Invariant":
          \replacewith (==>  #diffAdjoin(\[#diffsystem\]post,augment))
          \heuristics(invariant_strengthen,diff_rule)
 }; 

}
