// This file is part of KeYmaera
// Copyright (C) 2007 Andre Platzer
//
// The KeYmaera system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules for handling hybrid programs


\include ruleSetsDeclarations;
//\include dlPropRule;

\optionsDecl{
}

\schemaVariables {
  // non-trace modalities
  \modalOperator { diamond, box } #allmodal;
  \modalOperator { diamond } #dia;
  \modalOperator { box } #box;

  // mixed trace/non-trace modalities
  // all modalities including traces
  \modalOperator { diamond, box, throughout /*, finally*/} #allmodaltr;
  \modalOperator { diamond /*, finally*/} #diatr;
  \modalOperator { box, throughout } #boxtr;

  // only trace modalities
  // all trace modalities
  \modalOperator { throughout /*, finally*/ } #trace;
  \modalOperator { throughout } #boxtbox;

  \formula phi, psi, post, inv, target;
  \term R trm;  
  \skolemTerm R sk ;
  \variables R u;

  \term R q;
  \skolemTerm R queryValue ;

  \program Literal #lit ;
  \program Statement #alpha;
  \program[list] Statement #gamma;

  \program Expression #e;
  \program SimpleExpression #se, #se0, #se1 ;
  \program NonSimpleExpression #nse, #nse0, #nse1, #nse2, #nv ;
  \program[list] Statement #s, #s0, #s1 ;  

  \program Type #t;
  \program Variable #v, #v0, #v1, #v2, #boolv, #a, #a0, #a1 ;

   \program Variable #loc ;
   \variables R iv, iv2, iv3, t,n ;
   \term R idx;
   \term R #sval, #byte1, #byte2; 
   
   \program DLProgram #dl, #dl2;
	\program DLFormula #dlform;
	\program DLExpression #dle;
	\program DLVariable #dlvar;
	\program RandomAssign #rdm;
	\program DiffSystem #diffsystem;
	\program DLVariableDeclaration #decl;

  \formula b,c,d;
  \formula[rigid] br, cr;

 \location[list] #modifies;
 \formula anon1, anon2, anon3;

}

\rules {
////////////////////////////////////////
//
// program rules
//
 
 diffind { \find (==> \[#diffsystem\]post)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Initially Valid":
          \replacewith (#invariantPart(\[#diffsystem\]post) ==> post );
    "ODE Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\[#diffsystem\]true, #DiffInd(\[#diffsystem\]post)))
////\heuristics(simplify)
          \displayname "diffind"
 }; 

 difffin { \find (==> \<#diffsystem\>post)
      \varcond(\isFirstOrderFormula(post))
    "Invariant Sustained":
          //@todo this is only an approximation
          \replacewith (==>  #dlUniversalClosure(\[#diffsystem\]true, #invariantPart(\[#diffsystem\]post)));
    "Variant Progress":
          \replacewith (==>  #dlUniversalClosure(\[#diffsystem\]true, !post -> #DiffFin(\<#diffsystem\>post)))
          \displayname "difffin"
 }; 

 diff_weaken_approx { \find (==> \[#diffsystem\]post)
          \replacewith (#invariantPart(\[#diffsystem\]post)==> post )
          \displayname "diff_weaken approximation"
 }; 

 diff_strengthen { \find (==> \[#diffsystem\]post)
      \varcond(\isFirstOrderFormula(psi))
    "Invariant Valid":
          \replacewith (==> \[#diffsystem\] psi );
    "Augmented Invariant":
          \replacewith (==>  #diffAdjoin(\[#diffsystem\]post,psi))
 }; 

}
