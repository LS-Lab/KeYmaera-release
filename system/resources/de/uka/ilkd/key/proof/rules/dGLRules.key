// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2005 Universitaet Karlsruhe Germany
//                           Universitaet Koblenz-Landau, Germany
//                         and Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
//
// This file contains rules for handling hybrid programs


\include ruleSetsDeclarations;

\optionsDecl{
}

\schemaVariables {
  // non-trace modalities
  \modalOperator { diamond, box } #allmodal;
  \modalOperator { diamond } #dia;
  \modalOperator { box } #box;

  // mixed trace/non-trace modalities
  // all modalities including traces
  \modalOperator { diamond, box, throughout /*, finally*/} #allmodaltr;
  \modalOperator { diamond /*, finally*/} #diatr;
  \modalOperator { box, throughout } #boxtr;

  // only trace modalities
  // all trace modalities
  \modalOperator { throughout /*, finally*/ } #trace;
  \modalOperator { throughout } #boxtbox;

  \formula phi, psi, post, inv, target, gen;
  \term R trm;  
  \skolemTerm R sk;
  \variables R u;

  \term R q;
  \term R s, t1;
  \term[rigid] R sr, tr1;
  \variables R n;

  \formula b, c, d;
  \formula[rigid] br, cr;

  \program DLProgram #dl, #dl2;
  \program DLFormula #dlform;
  \program DiffSystemWithTopLevelOr #diffsystemWithOr;
  \program DLExpression #dle;
  \program DLVariable #dlvar;
  \program RandomAssign #rdm;
  \program DiffSystem #diffsystem;
  \program SimpleOrdinaryDiffSystem #simpleode;
  \program OrdinaryDiffSystem #ordinarydiffsystem;
  \program NotDNFDiffSystem #notDNFODE;
  \program DiffSystemWithDifferentialInequality #ineqDiffSystem;
  \program DLVariableDeclaration #decl;
  \formula G1, G2;

}

\rules {
 game_to_box {
 	\find (\(\[#dl\]\) post)
 	\replacewith (\[#dl\]post)
	\displayname "game-to-box"
	\heuristics(simplify_prog)
 };

 game_to_dia {
 	\find (\(\<#dl\>\) post)
 	\replacewith (\<#dl\>post)
	\displayname "game-to-dia"
	\heuristics(simplify_prog)
 };

 game_split_left { 
 	\find (\( G1 G2 \) post ==>) 
 	\replacewith( \( G1 \) \( G2 \) post ==>) 
 	\heuristics(simplify_prog)
	\displayname ";-compose"
};

 game_split_right { 
 	\find (==> \( G1 G2 \) post) 
 	\replacewith( ==> \( G1 \) \( G2 \) post) 
 	\heuristics(simplify_prog)
	\displayname ";-compose"
};

 cup_left { 
 	\find (\( G1 ++ G2 \) post ==> ) 
 	\replacewith( \( G1 \) post | \( G2 \) post ==>) 
 	\heuristics(simplify_prog)
	\displayname "dia-choice"
};

 cup_right { 
 	\find (==> \( G1 ++ G2 \) post ) 
 	\replacewith(==> \( G1 \) post | \( G2 \) post) 
 	\heuristics(simplify_prog)
	\displayname "dia-choice"
};

 cap_left { 
 	\find (\( G1 +-+ G2 \) post ==> ) 
 	\replacewith( \( G1 \) post & \( G2 \) post ==>) 
 	\heuristics(simplify_prog)
	\displayname "box-choice"
};

 cap_right { 
 	\find (==> \( G1 +-+ G2 \) post ) 
 	\replacewith(==> \( G1 \) post & \( G2 \) post) 
 	\heuristics(simplify_prog)
	\displayname "box-choice"
};

 aloop_inv { \find (==> \( [ G1 ]* \) post) 
    "Invariant Initially Valid":
          \replacewith (==> inv );
    "Use Case":
          \replacewith (==> #dlUniversalClosure(\( G1 \) true, inv -> post, false));
    "Body Preserves Invariant":
          \replacewith (==>  #dlUniversalClosure(\( G1 \) true, (inv -> \( G1 \) inv), true))
          //\heuristics (loop_invariant, loop_invariant_proposal)
          \displayname "induction_loop"}; 

   eloop_var { \find (==> \( < G1 >* \) post)
    /* TODO this should be \varcond(\notFreeIn(n, \<#dl*\>post)) for soundness */
    \varcond(\notFreeIn(n, post))
    "Variant Satisfiable":
          \replacewith (==> \exists n; inv );
    "Use Case":
          \replacewith (==> #dlUniversalClosure(\( G1 \) true, (\exists n; (inv & n <= 0)) -> post, false));
    "Variant Decreases":
          \replacewith (==>  #dlUniversalClosure(\(G1 \) true, \forall n; (n>0 & inv -> \( G1 \) {\subst n; n-1}inv), true))
          //\heuristics (loop_variant)
          \displayname "convergence_loop"}; 
}
