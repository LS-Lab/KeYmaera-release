<?xml version="1.0" encoding="ISO-8859-1"?>
<description>
	<welcometext>
		Welcome to the KeYmaera tutorial overview...

		<![CDATA[
		<h2>Overview</h2>

		<h3>Hybrid Programs</h3>
<table class="syntax">
  
<tr>
<td colspan="3" id="HP"><b>Hybrid programs</b>, with typical names <kbd>&alpha;</kbd> and <kbd>&beta;</kbd>, are defined by the following syntax:</td>
</tr>
	
<tr>
	<td></td><td><kbd>&alpha;; &beta;</kbd></td><td><em>Sequential composition</em> that runs <kbd>&alpha;</kbd> first and then <kbd>&beta;</kbd> after <kbd>&alpha;</kbd> stops (<kbd>&beta;</kbd> never starts if <kbd>&alpha;</kbd> never stops)</td>
</tr> 
<!--	<tr><td/><td><kbd>&#945;@invariant(&#966;)*</kbd> </td><td>Non-deterministic repetition with attached invariant constraint <kbd>&#966;</kbd></td></tr>  -->
	
<tr>
<td></td><td><kbd>x:=t</kbd> </td><td><em>Discrete assignment/jump</em> assigning the value of term <kbd>t</kbd> to <kbd>x</kbd></td>
</tr>
	
<tr>
<td></td><td><kbd>x:=*</kbd> </td><td><em>Random assignment</em> assigns any real value to <kbd>x</kbd>, non-deterministically</td>
</tr>
	
<tr>
<td></td><td><kbd><span class="keyword">if</span>(H)&nbsp;<span class="keyword">then</span>&nbsp;&alpha;&nbsp;<span class="keyword">fi</span></kbd> </td><td><em>If-then</em> statement, performs <kbd>&alpha;</kbd> if formula/condition <kbd>H</kbd> holds at current state and does nothing otherwise</td>
</tr>
	
<tr>
<td></td><td><kbd><span class="keyword">if</span>(H)&nbsp;<span class="keyword">then</span>&nbsp;&alpha;&nbsp;<span class="keyword">else</span>&nbsp;&beta;&nbsp;<span class="keyword">fi</span></kbd></td><td><em>If-then-else</em> statement, performs <kbd>&alpha;</kbd> if <kbd>H</kbd> holds at current state and performs <kbd>&beta;</kbd> otherwise</td>
</tr>
	
<tr>
<td></td><td><kbd>?H</kbd> </td><td><em>State assertion</em> testing whether formula <kbd>H</kbd> is true in current state (otherwise abort)</td>
</tr>
	
<tr>
<td></td><td><kbd>&alpha; ++ &beta;</kbd></td><td><em>Non-deterministic choice</em> following either alternative   <kbd>&alpha;</kbd> or <kbd>&beta;</kbd></td>
</tr>
	
<tr>
<td></td><td><kbd><span class="keyword">while</span>(H)&nbsp;&alpha;&nbsp;<span class="keyword">end</span></kbd></td><td><em>While loop</em>, repeats <kbd>&alpha;</kbd> as long as <kbd>H</kbd> holds, stops before doing <kbd>&alpha;</kbd> only if <kbd>H</kbd> is false
	 (<kbd>&alpha;</kbd> will not be stopped in the middle just because <kbd>H</kbd> becomes false at some intermediate state during <kbd>&alpha;</kbd>).</td>
</tr>
	
<tr>
<td></td><td><kbd>&alpha;<sup>*</sup></kbd> </td><td><em>Non-deterministic repetition</em>, repeating <kbd>&alpha;</kbd> arbitrarily often including 0 times</td>
</tr>
	
<tr>
<td></td><td><kbd>{x'=t,y'=s,&nbsp;H}</kbd> </td><td><em>Continuous evolution</em> along <em>differential equation system</em> with terms <kbd>t,s</kbd>, optionally with <em>evolution domain constraint</em> <kbd>H</kbd>.
	This domain constraint <kbd>H</kbd> needs to be true <em>at every time</em> during the evolution, otherwise the system needs to stop following this continuous mode and move on.
	You can use systems of differential equations, differential-algebraic equations, differential inequalities, and differential equations with disturbances.</td>
</tr>
	
<tr>
<td></td><td><kbd>{x'=t,y'&lt;=s,y'&gt;=r,&nbsp;H}</kbd> </td><td><em>Continuous evolution</em> along <em>system of differential equations and differential inequalities</em> with terms <kbd>t,s,r</kbd>, optionally with evolution domain <kbd>H</kbd>. The time-derivative of <kbd>y</kbd> needs to stay within <kbd>r</kbd> and <kbd>s</kbd> all the time.</td>
</tr>
	
<tr>
<td></td><td><kbd>{<span class="keyword">\exists</span>&nbsp;R&nbsp;u;&nbsp;(x'=t &amp; y'=s&nbsp;&amp;&nbsp;H)}</kbd> </td><td><em>Continuous evolution</em> along <em>system of differential-algebraic equations</em> with disturbance <kbd>u</kbd> (which may occur in the terms <kbd>t,s</kbd> and formula <kbd>H</kbd>), optionally with evolution domain <kbd>H</kbd>.</td>
</tr>
	
<tr>
<td></td><td id="vardecl"><kbd><span class="X:primitiveType">R</span> x</kbd> </td><td><em>Variable declaration</em>, declaring <kbd>x</kbd> as a real variable (either a state variable or auxiliary variable).
	<!-- We recommend that variable names start with lowercase letters. --></td>
</tr>
	
<tr>
<td></td><td><kbd><span class="X:primitiveType">R</span> x, y, z</kbd> </td><td><em>Variable declaration</em>, declaring <kbd>x</kbd>, <kbd>y</kbd>, and <kbd>z</kbd> as real variables</td>
</tr>
	
<tr>
<td colspan="3">where <kbd>H</kbd> is a formula of (possibly non-linear) real arithmetic (possibly including quantifiers, but no modalities).</td>
</tr>

</table>

<h3>Formulas</h3>
<table class="syntax">
  
<tr>
<td colspan="3" id="syntax"><b>Formulas of <a href="../logic/dL.html" title="Differential Dynamic Logic for Hybrid Systems">dL</a></b>, with typical names <kbd>&phi;</kbd> and <kbd>&psi;</kbd>, are defined by the following syntax</td>
</tr>
  
<tr>
<td>&phi;&nbsp;::=</td> 
	<td>
	<kbd><span class="keyword">\forall</span>&nbsp;R&nbsp;x;&nbsp;&phi;</kbd>
	</td>
	<td><em>Universal quantifier</em>: for all real values for variable <kbd>x</kbd>, formula <kbd>&phi;</kbd> holds</td>
	
</tr>
	
<tr>
	
<td></td>
	<td><kbd><span class="keyword">\exists</span>&nbsp;R&nbsp;x;&nbsp;&phi;</kbd></td>
	<td><em>Existential quantifier</em>: for some real value for variable <kbd>x</kbd>, formula <kbd>&phi;</kbd> holds</td>
	
</tr>
	
<tr>
<td></td><td><kbd>!&phi;</kbd></td><td><em>Negation</em> (not)</td>
</tr> 
	
<tr>
<td></td><td><kbd>&phi; &amp; &psi;</kbd></td><td><em>Conjunction</em> (and)</td>
</tr> 
	
<tr>
<td></td><td><kbd>&phi; | &psi;</kbd></td><td><em>Disjunction</em> (or)</td>
</tr>
	
<tr>
<td></td><td><kbd>&phi;&nbsp;-&gt;&nbsp;&psi;</kbd></td><td><em>Implication</em> (implication)</td>
</tr>
	
<tr>
<td></td><td><kbd>&phi;&nbsp;&lt;-&gt;&nbsp;&psi;</kbd></td><td><em>Biimplication</em> (equivalence)</td>
</tr>
	
<tr>
<td></td><td><kbd>\[<a href="#HP">&alpha;</a>\] &phi;</kbd></td><td><em>Box-modality</em>: After all runs of <a href="#HP">hybrid program</a> <kbd>&alpha;</kbd>, formula <kbd>&phi;</kbd> holds (safety)</td>
</tr>
	
<tr>
<td></td><td><kbd>\&lt;<a href="#HP">&alpha;</a>\&gt; &phi;</kbd></td><td><em>Diamond-modality</em>: There is at least one run of <a href="#HP">hybrid program</a> <kbd>&alpha;</kbd>, after which formula <kbd>&phi;</kbd> holds (liveness)</td>
</tr>
	
<tr>
<td></td><td><kbd>\[[<a href="#HP">&alpha;</a>\]] &phi;</kbd></td><td><em>Temporal-box-modality</em>: During all runs of <a href="#HP">hybrid program</a> <kbd>&alpha;</kbd>, formula <kbd>&phi;</kbd> holds (safety throughout)</td>
</tr>
	
<tr>
<td></td><td><a href="#predicate">pred</a></td> <td><a href="#predicate">Real arithmetic predicate expression</a></td>
</tr>
<tr>
<td id="term" colspan="3"><b>Real arithmetic terms</b>, with typical names <kbd>s</kbd> and <kbd>t</kbd>, are defined by the following syntax</td>
</tr>
	
<tr>
<td>t&nbsp;::= </td><td><kbd>t + s</kbd></td><td>Addition</td>
</tr>
	
<tr>
<td></td><td><kbd>t - s</kbd></td><td>Subtraction</td>
</tr> 
	
<tr>
<td></td><td><kbd>t * s</kbd></td><td>Multiplication</td>
</tr> 
	
<tr>
<td></td><td><kbd>t / s</kbd></td><td>Division</td>
</tr> 
	
<tr>
<td></td><td><kbd>t^n</kbd></td><td>Power with integer <kbd>n</kbd></td>
</tr> 
	
<tr>
<td></td><td><kbd>- s</kbd></td><td>Minus</td>
</tr> 
	
<tr>
<td></td><td><kbd>f(t1,...,tn)</kbd></td><td>Function application</td>
</tr> 
	
<tr>
<td></td><td>VARIABLE</td><td>An arbitrary variable identifier (that <a href="#vardecl">has been declared</a>)</td>
</tr> 
	
<tr>
<td></td><td>NUMBER</td><td>An arbitrary decimal number</td>
</tr>

</table>
</table>

		]]>
	</welcometext>
	<tutorials>
		<tutorial name="Verified Software Summer School 2012">
			<description>
				This tutorial contains the exercises used at the Verified Software Summer School 2012.
			</description>
			<exercise>
				<title>Ex. 1 Pen&amp;Paper Modelling</title>
				<description>Use Pen&amp;Paper to model a car.</description>
			</exercise>
			<exercise>
				<title>Ex. 2 Dynamics</title>
				<description>Given the following system of...</description>
				<path>/examples/hybrid/tutorial/lics1-continuous-forward.key</path>
			</exercise>
			<exercise>
				<title>Ex. 3 Water Tank</title>
				<description>
				<![CDATA[
					<p>
					The given input file models a water tank. The water level (named y) is supposed to be between 1 and 12. Another variable x is used as clock to model delays while switching modes.
					</p>

					<p>
					The system has two main modes:
					<ul>
					<li> st = 0: is the mode where water is flowing into the tank with a constant rate of 1.</li>
					<li> st = 2: is the mode where water is draining from the tank with a constant rate of -2.</li>
					</ul>
					</p>
					<p>
					The modes st = 1 and st = 3 model the delays while switching between modes 0 and 2.
					</p>
					<p>
					<b>Exercise:</b> Load the example and press play. The automatic strategy is able to proof this example using the annotated loop invariant in the input file. 
					</p>
				
				]]>
					
				</description>
			    <img href="http://symbolaris.com/info/fig-water-tank.png"/>
			    <path>/examples/hybrid/publish/water_tank.key</path>
			</exercise>
			<exercise>
				<title>Ex. 4 Parametric Water Tank</title>
				<description>
					<![CDATA[
					<p>
					The given input file again models a water tank. Now, the water level (named y) is supposed to be between min_fill and max_fill. Another variable x is used as clock to model delays while switching modes. The delay is bounded by a constant max_com.
					</p>

					<p>
						The system has two main modes (for f > 0 & d > 0):
					<ul>
						<li> st = 0: is the mode where water is flowing into the tank with a constant rate of <b>f</b>.</li>
						<li> st = 2: is the mode where water is draining from the tank with a constant rate of <b>-d</b>.</li>
					</ul>
					</p>
					<p>
					The modes st = 1 and st = 3 model the delays while switching between modes 0 and 2.
					</p>
					<p>
					<b>Exercise:</b> Load the example. And proof that the input is a tautology. Note that in contrast to the previous exercise the loop invariant is not given.
					</p>
				]]>
				</description>
			    <img href="http://symbolaris.com/info/fig-water-tank.png"/>
				 <path>/examples/hybrid/verifiedsoft/general_water_tank.key</path>
			</exercise>
		</tutorial>
	</tutorials>
</description>
