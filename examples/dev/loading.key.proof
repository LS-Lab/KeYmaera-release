\settings {
"#Proof-Settings-Config-File
#Thu Aug 01 09:42:34 EDT 2013
[DLOptions]counterExampleGenerator=Mathematica
[DecisionProcedure]Exec=
[DLOptions]termFactoryClass=de.uka.ilkd.key.dl.model.impl.TermFactoryImpl
[Z3Options]z3ElimExPrefix=true
[ReduceOptions]qepcadFallback=false
[MathematicaOptions]eliminateFractions=false
[TacletTranslation]filename=
[Libraries]Default=/Users/smitsch/.keymaera/libraries/acc.key-false, /Users/smitsch/.keymaera/libraries/stringRules.key-false, /Users/smitsch/.keymaera/libraries/deprecatedRules.key-false
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[DLOptions]BuiltInArithmeticIneqs=OFF
[ReduceOptions]rlcadpbfvs=DEFAULT
[ReduceOptions]rlcadaproj=DEFAULT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[General]ProofAssistant=false
[ReduceOptions]rlcadprojonly=DEFAULT
[DLOptions]reduceOnFreshBranch=false
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[ReduceOptions]rlqeqsc=DEFAULT
[ReduceOptions]rlcadbaseonly=DEFAULT
[DLOptions]simplifyAfterReduce=false
[DLOptions]readdQuantifiers=true
[DecisionProcedure]ActiveRule=_noname_
[ReduceOptions]rlcadrawformula=DEFAULT
[DLOptions]applyLocalSimplify=false
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[ReduceOptions]quantifierEliminationMethod=RLQE
[DLOptions]DiffSat=AUTO
[DLOptions]simplifier=Mathematica
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[DLOptions]simplifyAfterODESolve=false
[ReduceOptions]rlall=true
[MetiTarskiOptions]metitBacktracking=true
[DLOptions]diffSatTimeout=4000
[DLOptions]linearTimeoutIncreaseFactor=2
[ReduceOptions]groebnerBasis=false
[DecisionProcedure]Timeout=600
[ReduceOptions]rlqesqsc=DEFAULT
[General]SoundNotification=false
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[Choice]DefaultChoices=throughout-throughout\\:toutOn , transactions-transactions\\:transactionsOn , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOn , nullPointerPolicy-nullPointerPolicy\\:nullCheck , javacard-javacard\\:jcOff
[ReduceOptions]rlsimpl=ON
[ReduceOptions]rlcadextonly=DEFAULT
[Strategy]MaximumNumberOfAutomaticApplications=2000
[ReduceOptions]rlanuexsgnopt=DEFAULT
[ReduceOptions]rlcadpartial=DEFAULT
[General]UseJML=true
[DLOptions]useSOS=false
[MathematicaOptions]useEliminateList=true
[DecisionProcedure]savefile=false
[DLOptions]applyGammaRules=ONLY_TO_MODALITIES
[DecisionProcedure]showSMTResDialog=false
[TacletTranslation]assignment=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
[General]StupidMode=true
[DLOptions]constantTimeoutIncreaseFactor=0
[DLOptions]solveODE=true
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[DLOptions]loopSatTimeout=2000000
[DLOptions]odeSolver=Mathematica
[OrbitalOptions]precision=34
[HOLLightOptions]qeMethod=ProofProducing
[ReduceOptions]rlqedfs=DEFAULT
[HOLLightOptions]useSnapshots=false
[QepcadOptions]qepcadMemoryLimit=2000000
[ReduceOptions]rlqeheu=DEFAULT
[ReduceOptions]rlanuexpsremseq=DEFAULT
[DecisionProcedure]multprovers=Z3\\=true\\:Yices\\=true\\:Simplify\\=true\\:CVC3\\=true
[ReduceOptions]rlcadfulldimonly=DEFAULT
[DLOptions]csdpForceInternal=false
[DLOptions]invariantRule=QUANTIFIERS
[General]DnDDirectionSensitive=true
[DLOptions]simplifyBeforeReduce=false
[Z3Options]z3Prenex=true
[DLOptions]applyToModality=false
[DLOptions]initialTimeout=2000
[ReduceOptions]rlcadaprojalways=DEFAULT
[DLOptions]CexFinder=ITER_DEEP
[DLOptions]useIterativeReduceRule=false
[Choice]Choices=throughout-throughout\\:toutOn-throughout\\:toutOff , transactions-transactions\\:transactionsOn-transactions\\:transactionsOff , intRules-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF-intRules\\:arithmeticSemanticsCheckingOF , programRules-programRules\\:Java-programRules\\:ODL-programRules\\:dL , initialisation-initialisation\\:enableStaticInitialisation-initialisation\\:disableStaticInitialisation , transactionAbort-transactionAbort\\:abortOn-transactionAbort\\:abortOff , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck , javacard-javacard\\:jcOff-javacard\\:jcOn
[CohenhormanderOptions]eliminatorMode=DNF
[DLOptions]percentOfPowersetForIterativeReduce=70
[hints]used=,Challenge.1,Challenge.2,8.1,8.2,8.3,8.4
[ReduceOptions]rlcadhongproj=DEFAULT
[ReduceOptions]rlanuexgcdnormalize=DEFAULT
[MathematicaOptions]memoryConstraint=-1
[ReduceOptions]rlcadtrimtree=DEFAULT
[DLOptions]groebnerBasisCalculator=Mathematica
[ReduceOptions]rlcadfac=DEFAULT
[Strategy]Timeout=-1
[DLOptions]applyGlobalReduce=true
[OrbitalOptions]representation=big
[SimultaneousUpdateSimplifier]EagerSimplification=true
[TacletTranslation]maxGeneric=2
[DLOptions]ibcOnlyToFO=true
[DLOptions]TracerStat=OFF
[TacletTranslation]saveToFile=false
[DLOptions]BuiltInArithmetic=OFF
[DLOptions]counterexampleTest=ON
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[DecisionProcedure]WaitForAllProvers=false
[DLOptions]useODEIndFinMethods=false
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[ReduceOptions]rlcadisoallroots=DEFAULT
[ReduceOptions]rlnzden=ON
[MathematicaOptions]quantifierEliminationMethod=REDUCE
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[ReduceOptions]eliminateFractions=false
[DecisionProcedure]WeakenSMTTranslation=false
[ReduceOptions]rlcadte=DEFAULT
[DLOptions]ignoreAnnotations=false
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[DLOptions]sosChecker=Built-in SOS
[General]UseOCL=false
[OrbitalOptions]sparsePolynomials=true
[ReduceOptions]rlposden=DEFAULT
[DLOptions]simplifyTimeout=0
[Strategy]ActiveStrategy=DLStrategy
[DLOptions]usePowersetIterativeReduce=true
[DLOptions]quadricTimeoutIncreaseFactor=0
[DLOptions]FOStrategy=LAZY
[ReduceOptions]rlqepnf=DEFAULT
[DLOptions]applyLocalReduce=OFF
[DLOptions]quantifierEliminator=Mathematica
"
}

/*
 *	Robot must safely follow the dynamic window navigation approach.
 *  Model for passive safety and circular trajectory.
 *  Considers robot shape (approximation as circle)
 *  Includes sensor and actuator uncertainty
 *  Theorem 1, proof see Theorem1_Circle.key.proof
 * 
 *  Invariant (psi_ps):
 *  - Robot drives forward
 *  - Direction vector of robot is a unit vector
 *  - Radius of circular trajectory is strictly positive
 *  - Robot is stopped or robot can still stop before collision with obstacle occurs
 * 
 *  Safety property:
 *  - Robot is stopped or robot can still stop before collision with obstacle occurs  
 */

\functions{
	R ep;			 		/* time limit for control decisions */
 	R b;					/* minimum braking capability of the robot */
	R A;					/* maximum acceleration -b <= a <= A */
	R V;					/* maximum velocity of obstacles */
	R Om;					/* max. rotational velocity for dynamic window */
	R s;					/* Robot size (radius) */
	R U_s;					/* bound on sensor (location) uncertainty */
	R U_a;					/* upper bound on the uncertainty about actual braking/acceleration */
}
\programVariables{
	R x;		/* robot position: x */
	R y;		/* robot position: y */
	R xm;		/* robot measured position: x */
	R ym;		/* robot measured position: y */
	R v;		/* robot translational velocity */
	R a;		/* robot translational acceleration */
	R ua;		/* acceleration uncertainty */
	R w;		/* robot rotational velocity */
	R dx; 		/* robot orientation: x */
	R dy; 		/* robot orientation: y */
	R cx;		/* rotation center: x */
	R cy;		/* rotation center: y */
	R r;		/* radius of curve */
	R ox;		/* position summary of obstacles */
	R oy;
	R odx;		/* direction and linear velocity of obstacles */
	R ody;
	R t;		/* time */
}

\problem {
   (  (  (  (  (  (  (  (  (  (  (  (  ((v) >= (0))
                                     & (  (   (Abs(  (x)
                                                   - (ox)))
                                           >  (  (  (  (  (v)
                                                        ^ (2))
                                                     / (  (  (2)
                                                           * (b))
                                                        * (U_a)))
                                                  + (  (  (V)
                                                        * (v))
                                                     / (  (b)
                                                        * (U_a))))
                                               + (s)))
                                        | (   (Abs(  (y)
                                                   - (oy)))
                                           >  (  (  (  (  (v)
                                                        ^ (2))
                                                     / (  (  (2)
                                                           * (b))
                                                        * (U_a)))
                                                  + (  (  (V)
                                                        * (v))
                                                     / (  (b)
                                                        * (U_a))))
                                               + (s)))))
                                  & ((r) >  (0)))
                               & (  (  ((dx) ^ (2))
                                     + ((dy) ^ (2)))
                                  = (1)))
                            & ((A) >= (0)))
                         & ((b) >  (0)))
                      & ((V) >= (0)))
                   & ((Om) >= (0)))
                & ((s) >= (0)))
             & ((ep) >  (0)))
          & ((U_s) >= (0)))
       & ((0) <  (U_a)))
    & ((U_a) <= (1)))
-> (\[
      (odx := * ;
        (ody := * ;
          (?(odx ^ 2 + ody ^ 2 <= V ^ 2) ;
            (xm := * ;
              (?(x - U_s <= xm & xm <= x + U_s) ;
                (ym := * ;
                  (?(y - U_s <= ym & ym <= y + U_s) ;
                    (a := -(b)
                      ++ ((?(v = 0) ;
                          (a := 0 ;
                            w := 0))
                        ++ (a := * ;
                          (?(-(b) <= a & a <= A) ;
                            (r := * ;
                              (?(r > 0) ;
                                (w := * ;
                                  (?(w * r = v & (-(Om) <= w & w <= Om)) ;
                                    (ox := * ;
                                      (oy := * ;
                                        ?(Abs(xm - ox) > (((v ^ 2 / ((2 * b) * U_a) + (V * v) / (b * U_a)) + (A / (b * U_a) + 1) * (A / 2 * ep ^ 2 + ep * (v + V))) + s) + U_s | Abs(ym - oy) > (((v ^ 2 / ((2 * b) * U_a) + (V * v) / (b * U_a)) + (A / (b * U_a) + 1) * (A / 2 * ep ^ 2 + ep * (v + V))) + s) + U_s)))))))))) ;
                      (t := 0 ;
                        (ua := * ;
                          (?(U_a <= ua & ua <= 1) ;
                            {
                            x' = v * dx, 
                            y' = v * dy, 
                            dx' = -(w) * dy, 
                            dy' = w * dx, 
                            v' = ua * a, 
                            w' = ((ua * a) * 1) / r, 
                            ox' = odx, 
                            oy' = ody, 
                            t' = 1, 
                            t <= ep, 
                            v >= 0})))))))))))*
      \] (  ((v) = (0))
          | (   (  (((x) - (ox)) ^ (2))
                 + (((y) - (oy)) ^ (2)))
             >  (  (  (  (((v) ^ (2)) / ((2) * (b)))
                       + (((V) * (v)) / (b)))
                    + (s))
                 ^ (2)))))

}

\proof {
(keyLog "0" (keyUser "smitsch" ) (keyVersion "ae2adf3d0133caa4f610431299d0a3eb5e488e55"))

(autoModeTime "1053")

(nodes "19")

(branches "3")

(interactiveSteps "1")

(branch "dummy ID"
(rule "imp_right" (formula "1") (nodenum "1049"))
(rule "and_left" (formula "1") (nodenum "1079"))
(rule "and_left" (formula "1") (nodenum "1114"))
(rule "and_left" (formula "1") (nodenum "1148"))
(rule "and_left" (formula "1") (nodenum "1188"))
(rule "and_left" (formula "1") (nodenum "1227"))
(rule "and_left" (formula "1") (nodenum "1267"))
(rule "and_left" (formula "1") (nodenum "1307"))
(rule "and_left" (formula "1") (nodenum "1347"))
(rule "and_left" (formula "1") (nodenum "1386"))
(rule "and_left" (formula "1") (nodenum "1426"))
(rule "and_left" (formula "1") (nodenum "1461"))
(rule "and_left" (formula "1") (nodenum "1500"))
(rule "loop_inv_box_quan" (formula "14") (inst "inv=  (  (  ((v) >= (0))
      & ((((dx) ^ (2)) + ((dy) ^ (2))) = (1)))
   & ((r) >  (0)))
& (  (  ((v) = (0))
      | (   (Abs((x) - (ox)))
         >  (  (  (((v) ^ (2)) / (((2) * (b)) * (U_a)))
                + (((V) * (v)) / ((b) * (U_a))))
             + (s))))
   | (   (Abs((y) - (oy)))
      >  (  (  (((v) ^ (2)) / (((2) * (b)) * (U_a)))
             + (((V) * (v)) / ((b) * (U_a))))
          + (s))))") (userinteraction) (nodenum "3765"))
(branch " Invariant Initially Valid"
   (opengoal " (v) >= (0),    (   (Abs((x) - (ox)))     >  (  (  (((v) ^ (2)) / (((2) * (b)) * (U_a)))            + (((V) * (v)) / ((b) * (U_a))))         + (s)))  | (   (Abs((y) - (oy)))     >  (  (  (((v) ^ (2)) / (((2) * (b)) * (U_a)))            + (((V) * (v)) / ((b) * (U_a))))         + (s))),  (r) >  (0),  (((dx) ^ (2)) + ((dy) ^ (2))) = (1),  (A) >= (0),  (b) >  (0),  (V) >= (0),  (Om) >= (0),  (s) >= (0),  (ep) >  (0),  (U_s) >= (0),  (0) <  (U_a),  (U_a) <= (1) ==>    (  (  ((v) >= (0))        & ((((dx) ^ (2)) + ((dy) ^ (2))) = (1)))     & ((r) >  (0)))  & (  (  ((v) = (0))        | (   (Abs((x) - (ox)))           >  (  (  (((v) ^ (2)) / (((2) * (b)) * (U_a)))                  + (((V) * (v)) / ((b) * (U_a))))               + (s))))     | (   (Abs((y) - (oy)))        >  (  (  (((v) ^ (2)) / (((2) * (b)) * (U_a)))               + (((V) * (v)) / ((b) * (U_a))))            + (s))))   ")
)
(branch " Use Case"
   (builtin "Update Simplification" (formula "14") (nodenum "5105"))
   (opengoal " (v) >= (0),    (   (Abs((x) - (ox)))     >  (  (  (((v) ^ (2)) / (((2) * (b)) * (U_a)))            + (((V) * (v)) / ((b) * (U_a))))         + (s)))  | (   (Abs((y) - (oy)))     >  (  (  (((v) ^ (2)) / (((2) * (b)) * (U_a)))            + (((V) * (v)) / ((b) * (U_a))))         + (s))),  (r) >  (0),  (((dx) ^ (2)) + ((dy) ^ (2))) = (1),  (A) >= (0),  (b) >  (0),  (V) >= (0),  (Om) >= (0),  (s) >= (0),  (ep) >  (0),  (U_s) >= (0),  (0) <  (U_a),  (U_a) <= (1) ==>  \\forall R a_1.     (\\forall R ua_1.        (\\forall R v_3.           (\\forall R r_3.              (\\forall R w_1.                 (\\forall R dy_3.                    (\\forall R dx_3.                       (\\forall R x_3.                          (\\forall R y_3.                             (\\forall R odx_1.                                (\\forall R ox_3.                                   (\\forall R ody_1.                                      (\\forall R oy_3.                                         (\\forall R t_1.                                            (\\forall R xm_1.                                               (\\forall R ym_1.                                                  (   (  (  (  (   (v_3)                                                               >= (0))                                                            & (  (  (  (dx_3)                                                                     ^ (2))                                                                  + (  (dy_3)                                                                     ^ (2)))                                                               = (1)))                                                         & (   (r_3)                                                            >  (0)))                                                      & (  (  (  (v_3)                                                               = (0))                                                            | (   (Abs(  (x_3)                                                                       - (ox_3)))                                                               >  (  (  (  (  (v_3)                                                                            ^ (2))                                                                         / (  (  (2)                                                                               * (b))                                                                            * (U_a)))                                                                      + (  (  (V)                                                                            * (v_3))                                                                         / (  (b)                                                                            * (U_a))))                                                                   + (s))))                                                         | (   (Abs(  (y_3)                                                                    - (oy_3)))                                                            >  (  (  (  (  (v_3)                                                                         ^ (2))                                                                      / (  (  (2)                                                                            * (b))                                                                         * (U_a)))                                                                   + (  (  (V)                                                                         * (v_3))                                                                      / (  (b)                                                                         * (U_a))))                                                                + (s)))))                                                  -> (  (  (v_3)                                                         = (0))                                                      | (   (  (  (  (x_3)                                                                   - (ox_3))                                                                ^ (2))                                                             + (  (  (y_3)                                                                   - (oy_3))                                                                ^ (2)))                                                         >  (  (  (  (  (  (v_3)                                                                         ^ (2))                                                                      / (  (2)                                                                         * (b)))                                                                   + (  (  (V)                                                                         * (v_3))                                                                      / (b)))                                                                + (s))                                                             ^ (2))))))))))))))))))))   ")
)
(branch " Body Preserves Invariant"
   (builtin "Update Simplification" (formula "14") (nodenum "4842"))
   (opengoal " (v) >= (0),    (   (Abs((x) - (ox)))     >  (  (  (((v) ^ (2)) / (((2) * (b)) * (U_a)))            + (((V) * (v)) / ((b) * (U_a))))         + (s)))  | (   (Abs((y) - (oy)))     >  (  (  (((v) ^ (2)) / (((2) * (b)) * (U_a)))            + (((V) * (v)) / ((b) * (U_a))))         + (s))),  (r) >  (0),  (((dx) ^ (2)) + ((dy) ^ (2))) = (1),  (A) >= (0),  (b) >  (0),  (V) >= (0),  (Om) >= (0),  (s) >= (0),  (ep) >  (0),  (U_s) >= (0),  (0) <  (U_a),  (U_a) <= (1) ==>  \\forall R v_2.     (\\forall R r_2.        (\\forall R dy_2.           (\\forall R dx_2.              (\\forall R x_2.                 (\\forall R y_2.                    (\\forall R ox_2.                       (\\forall R oy_2.                          (   (  (  (  ((v_2) >= (0))                                    & (  (  (  (dx_2)                                             ^ (2))                                          + (  (dy_2)                                             ^ (2)))                                       = (1)))                                 & ((r_2) >  (0)))                              & (  (  ((v_2) = (0))                                    | (   (Abs(  (x_2)                                               - (ox_2)))                                       >  (  (  (  (  (v_2)                                                    ^ (2))                                                 / (  (  (2)                                                       * (b))                                                    * (U_a)))                                              + (  (  (V)                                                    * (v_2))                                                 / (  (b)                                                    * (U_a))))                                           + (s))))                                 | (   (Abs(  (y_2)                                            - (oy_2)))                                    >  (  (  (  (  (v_2)                                                 ^ (2))                                              / (  (  (2)                                                    * (b))                                                 * (U_a)))                                           + (  (  (V)                                                 * (v_2))                                              / (  (b)                                                 * (U_a))))                                        + (s)))))                          -> ({dx:=(dx_2) ||                                dy:=(dy_2) ||                                ox:=(ox_2) ||                                oy:=(oy_2) ||                                r:=(r_2) ||                                v:=(v_2) ||                                x:=(x_2) ||                                y:=(y_2)}                                (\\[                                   odx := * ;                                     (ody := * ;                                       (?(odx ^ 2 + ody ^ 2 <= V ^ 2) ;                                         (xm := * ;                                           (?(x - U_s <= xm & xm <= x + U_s) ;                                             (ym := * ;                                               (?(y - U_s <= ym & ym <= y + U_s) ;                                                 (a := -(b)                                                   ++ ((?(v = 0) ;                                                       (a := 0 ;                                                         w := 0))                                                     ++ (a := * ;                                                       (?(-(b) <= a & a <= A) ;                                                         (r := * ;                                                           (?(r > 0) ;                                                             (w := * ;                                                               (?(w * r = v & (-(Om) <= w & w <= Om)) ;                                                                 (ox := * ;                                                                   (oy := * ;                                                                     ?(Abs(xm - ox) > (((v ^ 2 / ((2 * b) * U_a) + (V * v) / (b * U_a)) + (A / (b * U_a) + 1) * (A / 2 * ep ^ 2 + ep * (v + V))) + s) + U_s | Abs(ym - oy) > (((v ^ 2 / ((2 * b) * U_a) + (V * v) / (b * U_a)) + (A / (b * U_a) + 1) * (A / 2 * ep ^ 2 + ep * (v + V))) + s) + U_s)))))))))) ;                                                   (t := 0 ;                                                     (ua := * ;                                                       (?(U_a <= ua & ua <= 1) ;                                                         {                                                         x' = v * dx,                                                          y' = v * dy,                                                          dx' = -(w) * dy,                                                          dy' = w * dx,                                                          v' = ua * a,                                                          w' = ((ua * a) * 1) / r,                                                          ox' = odx,                                                          oy' = ody,                                                          t' = 1,                                                          t <= ep,                                                          v >= 0}))))))))))                                   \\] (  (  (  (   (v)                                                >= (0))                                             & (  (  (  (dx)                                                      ^ (2))                                                   + (  (dy)                                                      ^ (2)))                                                = (1)))                                          & ((r) >  (0)))                                       & (  (  (  (v)                                                = (0))                                             | (   (Abs(  (x)                                                        - (ox)))                                                >  (  (  (  (  (v)                                                             ^ (2))                                                          / (  (  (2)                                                                * (b))                                                             * (U_a)))                                                       + (  (  (V)                                                             * (v))                                                          / (  (b)                                                             * (U_a))))                                                    + (s))))                                          | (   (Abs(  (y)                                                     - (oy)))                                             >  (  (  (  (  (v)                                                          ^ (2))                                                       / (  (  (2)                                                             * (b))                                                          * (U_a)))                                                    + (  (  (V)                                                          * (v))                                                       / (  (b)                                                          * (U_a))))                                                 + (s)))))))))))))))   ")
)
)

}
