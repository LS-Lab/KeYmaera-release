\settings {
"#Proof-Settings-Config-File
#Tue Apr 19 00:22:14 MEST 2005
[General]SoundNotification=true
[View]FontIndex=3
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=false
[General]SuggestiveVarNames=false
[General]ProofAssistant=false
[View]ShowWholeTaclet=false
[View]MaxTooltipLines=40
[General]StupidMode=true
[Strategy]MaximumNumberOfAutomaticApplications=20000
[Choice]DefaultChoices=transactionsPolicy-transactionsPolicy\\:abortTransaction , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\\:nullCheck
[OCLRef]Null=true
[OCLRef]ExcThrown=true
[Model]Source=1
[Choice]Choices=transactionsPolicy-transactionsPolicy\\:abortTransaction-transactionsPolicy\\:noAbortTransaction , programRules-programRules\\:ODL-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation-initialisation\\:enableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF-intRules\\:javaSemantics-intRules\\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\\:noNullCheck-nullPointerPolicy\\:nullCheck
[OCLRef]Array=true
[DecisionProcedure]=SIMPLIFY
[General]OuterRenaming=true
[Strategy]ActiveStrategy=Simple FOL
"
}

\programVariables { int i_6 ;
}


\problem {
!(  (  !(lt(i_6, 0) & sub(mul(jdiv(i_6, 2), 2), 1) = i_6)
     & !(gt(i_6, 0) & add(mul(jdiv(i_6, 2), 2), 1) = i_6))
  & !mul(jdiv(i_6, 2), 2) = i_6)

}

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "0.1545"))
(keyLog "1" (keyUser "pschmitt" ) (keyVersion "0.1545"))
(keyLog "2" (keyUser "pschmitt" ) (keyVersion "0.1545"))

(branch "dummy ID"
(rule "not_right" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "not_left" (formula "1"))
(rule "not_left" (formula "2"))
(rule "not_left" (formula "1"))
(rule "cut" (inst "b=geq(i_6, 0)"))
(branch "Case 1"
   (rule "hide_right" (formula "4"))
   (rule "and_right" (formula "2"))
   (branch "null"
      (rule "cut" (inst "b=i_6 = 0"))
      (branch "Case 1"
         (rule "apply_eq" (formula "2") (term "0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "apply_eq" (formula "2") (term "0") (ifseqformula "1"))
         (rule "greater_literals" (formula "2"))
         (rule "false_right" (formula "2"))
         (rule "apply_eq" (formula "2") (term "0,0,0") (ifseqformula "1"))
         (rule "apply_eq" (formula "2") (term "1") (ifseqformula "1"))
         (rule "jdiv_literals" (formula "2") (term "0,0"))
         (rule "mul_literals" (formula "2") (term "0"))
         (rule "close_eq" (formula "2"))
         (rule "close_by_true" (formula "2"))
      )
      (branch "null"
         (builtin "Decision Procedure Simplify")
      )
   )
   (branch "null"
      (rule "int_induction" (inst "b=add(mul(jdiv(x, 2), 2), 1) = x | mul(jdiv(x, 2), 2) = x") (inst "nv=x"))
      (branch "Base Case"
         (rule "jdiv_literals" (formula "2") (term "0,0,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "equal_literals" (formula "2") (term "1"))
         (rule "concrete_or_3" (formula "2"))
         (rule "close_by_true" (formula "2"))
      )
      (branch "Step Case"
         (rule "hide_right" (formula "3"))
         (rule "hide_right" (formula "3"))
         (rule "all_right" (formula "2") (inst "sk=x"))
         (rule "imp_right" (formula "2"))
         (rule "or_right" (formula "3"))
         (rule "and_left" (formula "1"))
         (rule "or_left" (formula "2"))
         (branch "null"
            (rule "hide_right" (formula "4"))
            (rule "jdiv_axiom" (formula "2") (term "0,0,0"))
            (branch "null"
               (rule "less_literals" (formula "2") (term "1,1,0"))
               (rule "concrete_and_4" (formula "2") (term "1,0"))
               (rule "concrete_or_4" (formula "2") (term "0"))
               (rule "greater_literals" (formula "2") (term "1,0"))
               (rule "concrete_and_3" (formula "2") (term "0"))
               (rule "and_left" (formula "2"))
               (rule "ex_left" (formula "2") (inst "sk=k0"))
               (rule "and_left" (formula "2"))
               (rule "and_left" (formula "2"))
               (rule "and_left" (formula "2"))
               (rule "commute_eq" (formula "2"))
               (rule "apply_eq_rigid" (formula "6") (term "0,0,0") (ifseqformula "2"))
               (rule "hide_left" (formula "2"))
               (rule "jdiv_axiom" (formula "7") (term "0,0"))
               (branch "null"
                  (rule "less_literals" (formula "1") (term "1,1,0"))
                  (rule "concrete_and_4" (formula "1") (term "1,0"))
                  (rule "concrete_or_4" (formula "1") (term "0"))
                  (rule "greater_literals" (formula "1") (term "1,0"))
                  (rule "concrete_and_3" (formula "1") (term "0"))
                  (rule "and_left" (formula "1"))
                  (rule "ex_left" (formula "2") (inst "sk=k1"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "commute_eq" (formula "2"))
                  (rule "apply_eq_rigid" (formula "12") (term "0,0") (ifseqformula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "commute_eq" (formula "9"))
                  (rule "apply_eq_rigid" (formula "3") (term "0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "4") (term "0,0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "7") (term "0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "8") (term "0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "5") (term "0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "1") (term "0,0") (ifseqformula "9"))
                  (rule "hide_left" (formula "1"))
                  (rule "apply_eq_rigid" (formula "10") (term "0,1") (ifseqformula "8"))
                  (builtin "Decision Procedure Simplify")
               )
               (branch "null"
                  (rule "less_literals" (formula "1") (term "1,0"))
                  (rule "concrete_and_4" (formula "1") (term "0"))
                  (rule "and_left" (formula "1"))
                  (rule "close_by_false" (formula "1"))
               )
               (branch "null"
                  (rule "greater_literals" (formula "1") (term "1,0"))
                  (rule "concrete_and_3" (formula "1") (term "0"))
                  (rule "and_left" (formula "1"))
                  (rule "ex_left" (formula "2") (inst "sk=k2"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "commute_eq" (formula "2"))
                  (rule "apply_eq_rigid" (formula "12") (term "0,0") (ifseqformula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "commute_eq" (formula "9"))
                  (rule "apply_eq_rigid" (formula "1") (term "0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "5") (term "0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "3") (term "0,1") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "4") (term "0,0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "7") (term "0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "8") (term "0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "11") (term "0,1") (ifseqformula "9"))
                  (rule "hide_left" (formula "9"))
                  (rule "switch_brackets" (formula "10") (term "1"))
                  (rule "add_literals" (formula "10") (term "1,1"))
                  (rule "switch_params" (formula "3") (term "0,1"))
                  (rule "switch_params" (formula "3") (term "0,1"))
                  (rule "switch_brackets" (formula "3") (term "1"))
                  (rule "add_literals" (formula "3") (term "1,1"))
                  (rule "switch_brackets" (formula "4") (term "0,0"))
                  (rule "add_literals" (formula "4") (term "1,0,0"))
                  (rule "switch_brackets" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "hide_left" (formula "7"))
                  (rule "mul_comm" (formula "7") (term "1,0"))
                  (rule "sub" (formula "7") (term "0"))
                  (rule "switch_brackets" (formula "7") (term "0"))
                  (rule "rotate_params" (formula "7") (term "0"))
                  (rule "add_sub_elim_right" (formula "7") (term "1,0"))
                  (rule "add_zero_right" (formula "7") (term "0"))
                  (rule "less_literals" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "geq_add_one" (formula "5"))
                  (rule "add_zero_left" (formula "5") (term "1"))
                  (rule "switch_brackets" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "1,0"))
                  (rule "hide_left" (formula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "hide_left" (formula "3"))
                  (rule "hide_left" (formula "3"))
                  (rule "hide_right" (formula "3"))
                  (builtin "Decision Procedure Simplify")
               )
            )
            (branch "null"
               (rule "less_literals" (formula "2") (term "1,0"))
               (rule "concrete_and_4" (formula "2") (term "0"))
               (rule "concrete_and_2" (formula "2"))
               (rule "close_by_false" (formula "2"))
            )
            (branch "null"
               (rule "greater_literals" (formula "2") (term "1,0"))
               (rule "concrete_and_3" (formula "2") (term "0"))
               (rule "and_left" (formula "2"))
               (rule "cut" (inst "b=x = 0"))
               (branch "null"
                  (rule "apply_eq_rigid" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "apply_eq_rigid" (formula "3") (term "0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "2"))
                  (rule "leq_literals" (formula "3"))
                  (rule "true_left" (formula "2"))
                  (rule "apply_eq_rigid" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "apply_eq_rigid" (formula "5") (term "0,1") (ifseqformula "1"))
                  (rule "add_zero_left" (formula "5") (term "0,0,0"))
                  (rule "jdiv_literals" (formula "5") (term "0,0"))
                  (rule "mul_literals" (formula "5") (term "0"))
                  (rule "add_zero_left" (formula "5") (term "1"))
                  (rule "apply_eq_rigid" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "apply_eq_rigid" (formula "3") (term "1") (ifseqformula "1"))
                  (rule "jdiv_literals" (formula "3") (term "0,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0"))
                  (rule "add_zero_left" (formula "3") (term "0"))
                  (rule "equal_literals" (formula "3"))
                  (rule "close_by_false" (formula "3"))
               )
               (branch "null"
                  (rule "hide_left" (formula "3"))
                  (rule "hide_left" (formula "3"))
                  (rule "hide_left" (formula "3"))
                  (rule "hide_right" (formula "4"))
                  (builtin "Decision Procedure Simplify")
               )
            )
         )
         (branch "null"
            (rule "hide_right" (formula "5"))
            (rule "jdiv_axiom" (formula "2") (term "0,0"))
            (branch "null"
               (rule "less_literals" (formula "2") (term "1,1,0"))
               (rule "concrete_and_4" (formula "2") (term "1,0"))
               (rule "concrete_or_4" (formula "2") (term "0"))
               (rule "greater_literals" (formula "2") (term "1,0"))
               (rule "concrete_and_3" (formula "2") (term "0"))
               (rule "and_left" (formula "2"))
               (rule "ex_left" (formula "2") (inst "sk=k3"))
               (rule "and_left" (formula "2"))
               (rule "and_left" (formula "2"))
               (rule "and_left" (formula "2"))
               (rule "commute_eq" (formula "2"))
               (rule "apply_eq_rigid" (formula "6") (term "0,0") (ifseqformula "2"))
               (rule "hide_left" (formula "2"))
               (rule "jdiv_axiom" (formula "7") (term "0,0,0"))
               (branch "null"
                  (rule "less_literals" (formula "1") (term "1,1,0"))
                  (rule "concrete_and_4" (formula "1") (term "1,0"))
                  (rule "concrete_or_4" (formula "1") (term "0"))
                  (rule "greater_literals" (formula "1") (term "1,0"))
                  (rule "concrete_and_3" (formula "1") (term "0"))
                  (rule "and_left" (formula "1"))
                  (rule "ex_left" (formula "2") (inst "sk=k4"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "commute_eq" (formula "2"))
                  (rule "apply_eq_rigid" (formula "12") (term "0,0,0") (ifseqformula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "commute_eq" (formula "9"))
                  (rule "apply_eq_rigid" (formula "11") (term "0,1") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "8") (term "0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "7") (term "0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "5") (term "0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "4") (term "0,0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "3") (term "0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "1") (term "0,0") (ifseqformula "9"))
                  (rule "hide_left" (formula "9"))
                  (rule "hide_left" (formula "9"))
                  (rule "add_eq" (formula "9") (inst "i=-1"))
                  (rule "rotate_params" (formula "9") (term "0"))
                  (rule "add_literals" (formula "9") (term "1,0"))
                  (rule "add_zero_right" (formula "9") (term "0"))
                  (rule "rotate_params" (formula "9") (term "1"))
                  (rule "add_literals" (formula "9") (term "1,1"))
                  (rule "add_zero_right" (formula "9") (term "1"))
                  (builtin "Decision Procedure Simplify")
               )
               (branch "null"
                  (rule "less_literals" (formula "1") (term "1,0"))
                  (rule "concrete_and_4" (formula "1") (term "0"))
                  (rule "concrete_and_2" (formula "1"))
                  (rule "close_by_false" (formula "1"))
               )
               (branch "null"
                  (rule "greater_literals" (formula "1") (term "1,0"))
                  (rule "concrete_and_3" (formula "1") (term "0"))
                  (rule "and_left" (formula "1"))
                  (rule "ex_left" (formula "2") (inst "sk=k5"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "commute_eq" (formula "2"))
                  (rule "apply_eq_rigid" (formula "12") (term "0,0,0") (ifseqformula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "commute_eq" (formula "9"))
                  (rule "apply_eq_rigid" (formula "11") (term "0,1") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "8") (term "0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "7") (term "0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "5") (term "0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "4") (term "0,0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "1") (term "0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "3") (term "0,1") (ifseqformula "9"))
                  (rule "hide_left" (formula "10"))
                  (rule "hide_left" (formula "9"))
                  (rule "add_eq" (formula "9") (inst "i=-1"))
                  (rule "rotate_params" (formula "9") (term "0"))
                  (rule "add_literals" (formula "9") (term "1,0"))
                  (rule "add_zero_right" (formula "9") (term "0"))
                  (rule "rotate_params" (formula "9") (term "1"))
                  (rule "add_literals" (formula "9") (term "1,1"))
                  (rule "add_zero_right" (formula "9") (term "1"))
                  (rule "mul_comm" (formula "7") (term "1"))
                  (rule "hide_left" (formula "7"))
                  (rule "mul_comm" (formula "7") (term "1,0"))
                  (rule "sub" (formula "7") (term "0"))
                  (rule "add_sub_elim_right" (formula "7") (term "0"))
                  (rule "less_literals" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "hide_left" (formula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "hide_left" (formula "3"))
                  (rule "hide_right" (formula "3"))
                  (builtin "Decision Procedure Simplify")
               )
            )
            (branch "null"
               (rule "less_literals" (formula "2") (term "1,0"))
               (rule "concrete_and_4" (formula "2") (term "0"))
               (rule "concrete_and_2" (formula "2"))
               (rule "close_by_false" (formula "2"))
            )
            (branch "null"
               (rule "greater_literals" (formula "2") (term "1,0"))
               (rule "concrete_and_3" (formula "2") (term "0"))
               (rule "and_left" (formula "2"))
               (rule "cut" (inst "b=x = 0"))
               (branch "null"
                  (rule "apply_eq_rigid" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "apply_eq_rigid" (formula "3") (term "0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "2"))
                  (rule "leq_literals" (formula "3"))
                  (rule "true_left" (formula "2"))
                  (rule "apply_eq_rigid" (formula "5") (term "0,0,0,0,0") (ifseqformula "1"))
                  (rule "apply_eq_rigid" (formula "5") (term "0,1") (ifseqformula "1"))
                  (rule "apply_eq_rigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                  (rule "apply_eq_rigid" (formula "3") (term "1") (ifseqformula "1"))
                  (rule "jdiv_literals" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "0"))
                  (rule "equal_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "add_zero_left" (formula "4") (term "0,0,0,0"))
                  (rule "jdiv_literals" (formula "4") (term "0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0"))
                  (rule "add_zero_left" (formula "4") (term "0"))
                  (rule "add_zero_left" (formula "4") (term "1"))
                  (rule "equal_literals" (formula "4"))
                  (rule "close_by_true" (formula "4"))
               )
               (branch "null"
                  (rule "hide_left" (formula "5"))
                  (rule "hide_left" (formula "3"))
                  (rule "hide_left" (formula "3"))
                  (rule "hide_right" (formula "4"))
                  (builtin "Decision Procedure Simplify")
               )
            )
         )
      )
      (branch "Use Case"
         (rule "inst_all" (formula "3") (term "1") (ifseqformula "1"))
         (rule "hide_left" (formula "2"))
         (rule "imp_left" (formula "1"))
         (branch "null"
            (rule "close_goal" (formula "2") (ifseqformula "1"))
         )
         (branch "null"
            (rule "or_left" (formula "1"))
            (branch "null"
               (rule "close_goal" (formula "3") (ifseqformula "1"))
            )
            (branch "null"
               (rule "close_goal" (formula "4") (ifseqformula "1"))
            )
         )
      )
   )
)
(branch "null"
   (rule "hide_right" (formula "2"))
   (rule "int_induction" (inst "b=  mul(jdiv(neg(u), 2), 2) = neg(u)
| lt(neg(u), 0) & sub(mul(jdiv(neg(u), 2), 2), 1) = neg(u)") (inst "nv=u"))
   (branch "Base Case"
      (rule "neg_literal" (formula "1") (term "0,0,0,0"))
      (rule "sub_zero_1" (formula "1") (term "0,0,0,0"))
      (rule "jdiv_literals" (formula "1") (term "0,0,0"))
      (rule "neg_literal" (formula "1") (term "1,0"))
      (rule "sub_zero_1" (formula "1") (term "1,0"))
      (rule "mul_literals" (formula "1") (term "0,0"))
      (rule "equal_literals" (formula "1") (term "0"))
      (rule "concrete_or_1" (formula "1"))
      (rule "close_by_true" (formula "1"))
   )
   (branch "Step Case"
      (rule "hide_right" (formula "3"))
      (rule "hide_right" (formula "3"))
      (rule "hide_right" (formula "2"))
      (rule "all_right" (formula "1") (inst "sk=u"))
      (rule "imp_right" (formula "1"))
      (rule "and_left" (formula "1"))
      (rule "or_right" (formula "3"))
      (rule "or_left" (formula "2"))
      (branch "null"
         (rule "hide_right" (formula "3"))
         (rule "and_right" (formula "3"))
         (branch "null"
            (builtin "Decision Procedure Simplify")
         )
         (branch "null"
            (rule "jdiv_axiom" (formula "2") (term "0,0"))
            (branch "null"
               (rule "less_literals" (formula "2") (term "1,1,0"))
               (rule "concrete_and_4" (formula "2") (term "1,0"))
               (rule "concrete_or_4" (formula "2") (term "0"))
               (rule "greater_literals" (formula "2") (term "1,0"))
               (rule "concrete_and_3" (formula "2") (term "0"))
               (rule "and_left" (formula "2"))
               (rule "ex_left" (formula "3") (inst "sk=k6"))
               (rule "and_left" (formula "3"))
               (rule "and_left" (formula "3"))
               (rule "and_left" (formula "3"))
               (rule "commute_eq" (formula "3"))
               (rule "apply_eq_rigid" (formula "7") (term "0,0") (ifseqformula "3"))
               (rule "hide_left" (formula "3"))
               (rule "cut" (inst "b=u = 0"))
               (branch "null"
                  (rule "apply_eq_rigid" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "apply_eq_rigid" (formula "3") (term "0,0") (ifseqformula "1"))
                  (rule "neg_literal" (formula "3") (term "0"))
                  (rule "sub_zero_1" (formula "3") (term "0"))
                  (rule "qeq_literals" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "apply_eq_rigid" (formula "3") (term "0,0") (ifseqformula "1"))
                  (rule "apply_eq_rigid" (formula "6") (term "0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "apply_eq_rigid" (formula "6") (term "0,0,1") (ifseqformula "1"))
                  (rule "add_zero_left" (formula "6") (term "0,1"))
                  (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
                  (rule "neg_literal" (formula "6") (term "0,0,0,0"))
                  (rule "jdiv_literals" (formula "6") (term "0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,0"))
                  (rule "sub_literals" (formula "6") (term "0"))
                  (rule "neg_literal" (formula "6") (term "1"))
                  (rule "equal_literals" (formula "6"))
                  (rule "close_by_true" (formula "6"))
               )
               (branch "null"
                  (rule "hide_left" (formula "3"))
                  (rule "hide_left" (formula "3"))
                  (rule "hide_left" (formula "3"))
                  (rule "hide_left" (formula "3"))
                  (rule "hide_right" (formula "4"))
                  (builtin "Decision Procedure Simplify")
               )
            )
            (branch "null"
               (rule "less_literals" (formula "2") (term "1,0"))
               (rule "concrete_and_4" (formula "2") (term "0"))
               (rule "concrete_and_2" (formula "2"))
               (rule "close_by_false" (formula "2"))
            )
            (branch "null"
               (rule "greater_literals" (formula "2") (term "1,0"))
               (rule "concrete_and_3" (formula "2") (term "0"))
               (rule "and_left" (formula "2"))
               (rule "ex_left" (formula "3") (inst "sk=k7"))
               (rule "and_left" (formula "3"))
               (rule "and_left" (formula "3"))
               (rule "and_left" (formula "3"))
               (rule "commute_eq" (formula "3"))
               (rule "apply_eq_rigid" (formula "7") (term "0,0") (ifseqformula "3"))
               (rule "hide_left" (formula "3"))
               (rule "jdiv_axiom" (formula "7") (term "0,0,0"))
               (branch "null"
                  (rule "less_literals" (formula "1") (term "1,1,0"))
                  (rule "concrete_and_4" (formula "1") (term "1,0"))
                  (rule "concrete_or_4" (formula "1") (term "0"))
                  (rule "greater_literals" (formula "1") (term "1,0"))
                  (rule "concrete_and_3" (formula "1") (term "0"))
                  (rule "and_left" (formula "1"))
                  (rule "ex_left" (formula "2") (inst "sk=k8"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "commute_eq" (formula "2"))
                  (rule "apply_eq_rigid" (formula "12") (term "0,0,0") (ifseqformula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "minus_distribute_1" (formula "11") (term "1"))
                  (rule "minus_distribute_1" (formula "1") (term "0"))
                  (rule "geq_add_one" (formula "1"))
                  (rule "add_zero_left" (formula "1") (term "1"))
                  (rule "switch_brackets" (formula "1") (term "0"))
                  (rule "add_sub_elim_left" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "hide_left" (formula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "hide_left" (formula "4"))
                  (rule "hide_left" (formula "4"))
                  (rule "hide_left" (formula "4"))
                  (rule "hide_left" (formula "4"))
                  (rule "hide_right" (formula "4"))
                  (builtin "Decision Procedure Simplify")
               )
               (branch "null"
                  (rule "less_literals" (formula "1") (term "1,0"))
                  (rule "concrete_and_4" (formula "1") (term "0"))
                  (rule "concrete_and_2" (formula "1"))
                  (rule "close_by_false" (formula "1"))
               )
               (branch "null"
                  (rule "greater_literals" (formula "1") (term "1,0"))
                  (rule "concrete_and_3" (formula "1") (term "0"))
                  (rule "and_left" (formula "1"))
                  (rule "ex_left" (formula "2") (inst "sk=k9"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "and_left" (formula "2"))
                  (rule "commute_eq" (formula "2"))
                  (rule "apply_eq_rigid" (formula "12") (term "0,0,0") (ifseqformula "2"))
                  (rule "hide_left" (formula "2"))
                  (rule "minus_distribute_1" (formula "11") (term "1"))
                  (rule "minus_distribute_1" (formula "1") (term "0"))
                  (rule "leq_add_one" (formula "1"))
                  (rule "add_zero_left" (formula "1") (term "1"))
                  (rule "switch_brackets" (formula "1") (term "0"))
                  (rule "add_sub_elim_left" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "hide_left" (formula "6"))
                  (rule "commute_eq" (formula "9"))
                  (rule "apply_eq_rigid" (formula "10") (term "0,1") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "8") (term "0,0") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "7") (term "1") (ifseqformula "9"))
                  (rule "apply_eq_rigid" (formula "1") (term "0") (ifseqformula "9"))
                  (rule "minus_distribute_1" (formula "3") (term "1"))
                  (rule "apply_eq_rigid" (formula "3") (term "0,1") (ifseqformula "9"))
                  (rule "minus_distribute_1" (formula "4") (term "0,0"))
                  (rule "apply_eq_rigid" (formula "4") (term "0,0,0") (ifseqformula "9"))
                  (rule "mul_comm" (formula "8") (term "1,0"))
                  (rule "sub" (formula "8") (term "0"))
                  (rule "add_sub_elim_right" (formula "8") (term "0"))
                  (rule "greater" (formula "8"))
                  (rule "neg_literal" (formula "8") (term "0"))
                  (rule "less_literals" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "mul_comm" (formula "7") (term "0"))
                  (rule "hide_left" (formula "7"))
                  (rule "greater_add_one" (formula "4"))
                  (rule "switch_params" (formula "4") (term "0"))
                  (rule "switch_params" (formula "4") (term "0"))
                  (rule "neg_literal" (formula "4") (term "0,1"))
                  (rule "add_literals" (formula "4") (term "1"))
                  (rule "neg_literal" (formula "4") (term "1,0,0,0"))
                  (rule "sub" (formula "4") (term "0,0"))
                  (rule "switch_params" (formula "4") (term "0,0"))
                  (rule "switch_brackets" (formula "4") (term "0"))
                  (rule "switch_brackets" (formula "4") (term "1,0"))
                  (rule "add_literals" (formula "4") (term "1,1,0"))
                  (rule "add_zero_right" (formula "4") (term "1,0"))
                  (rule "add_eq" (formula "8") (inst "i=1"))
                  (rule "sub" (formula "8") (term "1,0"))
                  (rule "rotate_params" (formula "8") (term "0"))
                  (rule "add_sub_elim_right" (formula "8") (term "1,0"))
                  (rule "add_zero_right" (formula "8") (term "0"))
                  (rule "rotate_params" (formula "8") (term "1"))
                  (rule "add_sub_elim_right" (formula "8") (term "1,1"))
                  (rule "add_zero_right" (formula "8") (term "1"))
                  (rule "switch_params" (formula "4") (term "0"))
                  (rule "geq_add_one" (formula "3"))
                  (rule "switch_brackets" (formula "3") (term "1"))
                  (rule "add_sub_elim_left" (formula "3") (term "1,1"))
                  (rule "add_zero_right" (formula "3") (term "1"))
                  (builtin "Decision Procedure Simplify")
               )
            )
         )
      )
      (branch "null"
         (rule "hide_right" (formula "4"))
         (rule "and_left" (formula "2"))
         (rule "jdiv_axiom" (formula "3") (term "0,0,0"))
         (branch "null"
            (rule "less_literals" (formula "3") (term "1,1,0"))
            (rule "concrete_and_4" (formula "3") (term "1,0"))
            (rule "concrete_or_4" (formula "3") (term "0"))
            (rule "greater_literals" (formula "3") (term "1,0"))
            (rule "concrete_and_3" (formula "3") (term "0"))
            (rule "and_left" (formula "3"))
            (builtin "Decision Procedure Simplify")
         )
         (branch "null"
            (rule "less_literals" (formula "3") (term "1,0"))
            (rule "concrete_and_4" (formula "3") (term "0"))
            (rule "and_left" (formula "3"))
            (rule "close_by_false" (formula "3"))
         )
         (branch "null"
            (rule "greater_literals" (formula "3") (term "1,0"))
            (rule "concrete_and_3" (formula "3") (term "0"))
            (rule "and_left" (formula "3"))
            (rule "hide_left" (formula "3"))
            (rule "ex_left" (formula "3") (inst "sk=k10"))
            (rule "and_left" (formula "3"))
            (rule "and_left" (formula "3"))
            (rule "and_left" (formula "3"))
            (rule "commute_eq" (formula "3"))
            (rule "apply_eq_rigid" (formula "7") (term "0,0,0") (ifseqformula "3"))
            (rule "hide_left" (formula "3"))
            (rule "sub" (formula "5") (term "0"))
            (rule "commute_eq" (formula "6"))
            (rule "apply_eq_rigid" (formula "5") (term "0,0") (ifseqformula "6"))
            (rule "apply_eq_rigid" (formula "2") (term "0") (ifseqformula "6"))
            (rule "apply_eq_rigid" (formula "4") (term "1") (ifseqformula "6"))
            (rule "minus_distribute_1" (formula "7") (term "0,0,0"))
            (rule "minus_distribute_1" (formula "7") (term "1"))
            (rule "apply_eq_rigid" (formula "7") (term "0,0,0,0") (ifseqformula "6"))
            (rule "apply_eq_rigid" (formula "7") (term "0,1") (ifseqformula "6"))
            (rule "hide_left" (formula "6"))
            (rule "hide_left" (formula "1"))
            (rule "switch_params" (formula "5") (term "0,0,0"))
            (rule "switch_params" (formula "5") (term "0,0,0"))
            (rule "sub" (formula "5") (term "0,0,0,0"))
            (rule "switch_brackets" (formula "5") (term "0,0,0"))
            (rule "add_sub_step" (formula "5") (term "1,0,0,0"))
            (rule "minus_distribute_1" (formula "5") (term "1,0,0,0"))
            (rule "add_sub_step" (formula "5") (term "1,0,0,0"))
            (rule "minus_distribute_1" (formula "5") (term "1,0,0,0"))
            (rule "neg_literal" (formula "5") (term "1,1,0,0,0"))
            (rule "neg_literal" (formula "5") (term "0,1,0,0,0"))
            (rule "add_literals" (formula "5") (term "1,0,0,0"))
            (rule "switch_params" (formula "5") (term "1"))
            (rule "neg_literal" (formula "5") (term "0,1"))
            (rule "sub" (formula "5") (term "1,1"))
            (rule "rotate_params" (formula "5") (term "1"))
            (rule "neg_literal" (formula "5") (term "1,1,1"))
            (rule "add_literals" (formula "5") (term "1,1"))
            (rule "jdiv_axiom" (formula "5") (term "0,0"))
            (branch "null"
               (rule "less_literals" (formula "1") (term "1,1,0"))
               (rule "concrete_and_4" (formula "1") (term "1,0"))
               (rule "concrete_or_4" (formula "1") (term "0"))
               (rule "greater_literals" (formula "1") (term "1,0"))
               (rule "concrete_and_3" (formula "1") (term "0"))
               (rule "and_left" (formula "1"))
               (rule "ex_left" (formula "2") (inst "sk=k11"))
               (rule "and_left" (formula "2"))
               (rule "and_left" (formula "2"))
               (rule "and_left" (formula "2"))
               (rule "commute_eq" (formula "2"))
               (rule "apply_eq_rigid" (formula "10") (term "0,0") (ifseqformula "2"))
               (rule "hide_left" (formula "2"))
               (rule "switch_params" (formula "8") (term "0"))
               (rule "switch_params" (formula "8") (term "0"))
               (rule "sub" (formula "8") (term "0,0"))
               (rule "switch_params" (formula "8") (term "0,0"))
               (rule "switch_brackets" (formula "8") (term "0"))
               (rule "mul_comm" (formula "8") (term "0,1,0"))
               (rule "add_sub_elim_right" (formula "8") (term "1,0"))
               (rule "add_zero_right" (formula "8") (term "0"))
               (rule "greater" (formula "8"))
               (rule "neg_literal" (formula "8") (term "0"))
               (rule "neg_literal" (formula "8") (term "1"))
               (rule "less_literals" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "mul_comm" (formula "7") (term "0,1"))
               (rule "hide_left" (formula "7"))
               (builtin "Decision Procedure Simplify")
            )
            (branch "null"
               (rule "less_literals" (formula "1") (term "1,0"))
               (rule "concrete_and_4" (formula "1") (term "0"))
               (rule "and_left" (formula "1"))
               (rule "close_by_false" (formula "1"))
            )
            (branch "null"
               (rule "greater_literals" (formula "1") (term "1,0"))
               (rule "concrete_and_3" (formula "1") (term "0"))
               (rule "and_left" (formula "1"))
               (rule "ex_left" (formula "2") (inst "sk=k12"))
               (rule "and_left" (formula "2"))
               (rule "and_left" (formula "2"))
               (rule "and_left" (formula "2"))
               (rule "commute_eq" (formula "2"))
               (rule "apply_eq_rigid" (formula "10") (term "0,0") (ifseqformula "2"))
               (rule "hide_left" (formula "2"))
               (rule "sub" (formula "8") (term "0,0"))
               (rule "mul_comm" (formula "8") (term "0,0,0"))
               (rule "switch_brackets" (formula "8") (term "0"))
               (rule "rotate_params" (formula "8") (term "0"))
               (rule "add_sub_elim_right" (formula "8") (term "1,0"))
               (rule "add_zero_right" (formula "8") (term "0"))
               (rule "greater" (formula "8"))
               (rule "neg_literal" (formula "8") (term "1"))
               (rule "neg_literal" (formula "8") (term "0"))
               (rule "less_literals" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "hide_left" (formula "7"))
               (rule "sub" (formula "4") (term "0"))
               (rule "mul_comm" (formula "4") (term "0,0,0"))
               (rule "switch_brackets" (formula "4") (term "0"))
               (rule "rotate_params" (formula "4") (term "0"))
               (rule "greater_add_one" (formula "4"))
               (rule "neg_literal" (formula "4") (term "0,1"))
               (rule "add_literals" (formula "4") (term "1"))
               (rule "rotate_params" (formula "4") (term "0,0"))
               (rule "switch_params" (formula "4") (term "1,0,0"))
               (rule "switch_brackets" (formula "4") (term "0"))
               (rule "switch_brackets" (formula "4") (term "1,0"))
               (rule "add_literals" (formula "4") (term "1,1,0"))
               (rule "greater_add_one" (formula "4"))
               (rule "add_literals" (formula "4") (term "1"))
               (rule "switch_brackets" (formula "4") (term "0"))
               (rule "switch_brackets" (formula "4") (term "1,0"))
               (rule "add_literals" (formula "4") (term "1,1,0"))
               (rule "add_zero_right" (formula "4") (term "1,0"))
               (rule "less_add_one" (formula "5"))
               (rule "add_zero_left" (formula "5") (term "1"))
               (rule "sub" (formula "5") (term "0,0"))
               (rule "switch_brackets" (formula "5") (term "0"))
               (rule "add_sub_elim_left" (formula "5") (term "1,0"))
               (rule "add_zero_right" (formula "5") (term "0"))
               (rule "mul_comm" (formula "3") (term "0"))
               (rule "mul_comm" (formula "4") (term "0,1,0"))
               (rule "hide_left" (formula "1"))
               (rule "mul_comm" (formula "3") (term "0,0"))
               (rule "geq_add_one" (formula "2"))
               (rule "switch_brackets" (formula "2") (term "1"))
               (rule "add_literals" (formula "2") (term "1,1"))
               (rule "geq_add_one" (formula "2"))
               (rule "switch_brackets" (formula "2") (term "1"))
               (rule "add_literals" (formula "2") (term "1,1"))
               (rule "add_zero_right" (formula "2") (term "1"))
               (rule "switch_brackets" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,0"))
               (builtin "Decision Procedure Simplify")
            )
         )
      )
   )
   (branch "Use Case"
      (rule "all_left" (formula "1") (inst "t=neg(i_6)"))
      (rule "hide_left" (formula "2"))
      (rule "sub_sub_elim" (formula "1") (term "0,0,0,0,1"))
      (rule "sub_sub_elim" (formula "1") (term "1,0,1"))
      (rule "sub_sub_elim" (formula "1") (term "0,0,1,1"))
      (rule "sub_sub_elim" (formula "1") (term "0,0,0,0,1,1,1"))
      (rule "sub_sub_elim" (formula "1") (term "1,1,1,1"))
      (rule "imp_left" (formula "1"))
      (branch "null"
         (rule "hide_right" (formula "3"))
         (rule "hide_right" (formula "3"))
         (builtin "Decision Procedure Simplify")
      )
      (branch "null"
         (rule "or_left" (formula "1"))
         (branch "null"
            (rule "close_goal" (formula "3") (ifseqformula "1"))
         )
         (branch "null"
            (rule "close_goal" (formula "4") (ifseqformula "1"))
         )
      )
   )
)
)

}
