\settings {
"#Proof-Settings-Config-File
#Tue Mar 17 09:45:31 EDT 2009
# @provable on hag with @annotations and 1 interaction for diffind in 66026.7s 3324.6Mb, 435 steps, 22 branches, 32 variables
[DLOptions]counterExampleGenerator=Mathematica
[View]FontIndex=2
[DLOptions]termFactoryClass=de.uka.ilkd.key.dl.model.impl.TermFactoryImpl
[Libraries]Default=acc.key-false, stringRules.key-false, deprecatedRules.key-false
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[DLOptions]BuiltInArithmeticIneqs=OFF
[ReduceOptions]rlcadpbfvs=DEFAULT
[ReduceOptions]rlcadaproj=DEFAULT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[DecisionProcedure]SmtBenchmarkArchiving=false
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[General]ProofAssistant=false
[ReduceOptions]rlcadprojonly=DEFAULT
[DecisionProcedureForTest]=Cogent
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[ReduceOptions]rlqeqsc=DEFAULT
[ReduceOptions]ReduceSwitch\ rlanuexgcdnormalize=DEFAULT
[ReduceOptions]rlcadbaseonly=DEFAULT
[DLOptions]simplifyAfterReduce=false
[View]HideIntermediateProofsteps=false
[DLOptions]readdQuantifiers=true
[ReduceOptions]rlcadrawformula=DEFAULT
[DLOptions]applyLocalSimplify=false
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[ReduceOptions]quantifierEliminationMethod=RLQE
[DLOptions]DiffSat=AUTO
[DLOptions]simplifier=Mathematica
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[DLOptions]simplifyAfterODESolve=false
[ReduceOptions]rlall=false
[DLOptions]diffSatTimeout=4000
[DLOptions]linearTimeoutIncreaseFactor=2
[ReduceOptions]rlqesqsc=DEFAULT
[General]SoundNotification=false
[Choice]DefaultChoices=transactions-transactions\:transactionsOn , javacard-javacard\:jcOff , programRules-programRules\:Java , throughout-throughout\:toutOn , transactionAbort-transactionAbort\:abortOn , intRules-intRules\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\:nullCheck
[ReduceOptions]rlcadextonly=DEFAULT
[Strategy]MaximumNumberOfAutomaticApplications=1000
[ReduceOptions]rlanuexsgnopt=DEFAULT
[ReduceOptions]rlcadpartial=DEFAULT
[General]UseJML=true
[DLOptions]useSOS=false
[MathematicaOptions]useEliminateList=true
[DLOptions]applyGammaRules=ONLY_TO_MODALITIES
[View]MaxTooltipLines=40
[General]StupidMode=true
[DLOptions]constantTimeoutIncreaseFactor=0
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[DLOptions]loopSatTimeout=2000000
[DLOptions]odeSolver=Mathematica
[OrbitalOptions]precision=34
[ReduceOptions]rlqedfs=DEFAULT
[QepcadOptions]qepcadMemoryLimit=2000000
[ReduceOptions]rlqeheu=DEFAULT
[ReduceOptions]rlanuexpsremseq=DEFAULT
[ReduceOptions]rlcadfulldimonly=DEFAULT
[DecisionProcedure]SmtZipProblemDir=false
[DLOptions]invariantRule=QUANTIFIERS
[General]DnDDirectionSensitive=true
[DecisionProcedure]SmtUseQuantifiers=true
[DLOptions]simplifyBeforeReduce=false
[DLOptions]applyToModality=false
[ReduceOptions]rlcadaprojalways=DEFAULT
[DLOptions]initialTimeout=2000
[DLOptions]useIterativeReduceRule=false
[Choice]Choices=transactions-transactions\:transactionsOn-transactions\:transactionsOff , javacard-javacard\:jcOn-javacard\:jcOff , programRules-programRules\:ODL-programRules\:Java-programRules\:dL , throughout-throughout\:toutOff-throughout\:toutOn , transactionAbort-transactionAbort\:abortOff-transactionAbort\:abortOn , intRules-intRules\:arithmeticSemanticsCheckingOF-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck
[DecisionProcedure]=SIMPLIFY
[DLOptions]percentOfPowersetForIterativeReduce=70
[ReduceOptions]rlcadhongproj=DEFAULT
[MathematicaOptions]memoryConstraint=-1
[ReduceOptions]rlcadtrimtree=DEFAULT
[DLOptions]groebnerBasisCalculator=Mathematica
[ReduceOptions]rlcadfac=DEFAULT
[Strategy]Timeout=-1
[DLOptions]applyGlobalReduce=true
[OrbitalOptions]representation=big
[SimultaneousUpdateSimplifier]EagerSimplification=true
[Model]Source=1
[DLOptions]BuiltInArithmetic=OFF
[View]ShowWholeTaclet=false
[DLOptions]counterexampleTest=ON
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[ReduceOptions]rlcadisoallroots=DEFAULT
[MathematicaOptions]quantifierEliminationMethod=REDUCE
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[ReduceOptions]rlcadte=DEFAULT
[DLOptions]ignoreAnnotations=false
[General]UseOCL=false
[OrbitalOptions]sparsePolynomials=false
[DLOptions]simplifyTimeout=0
[Strategy]ActiveStrategy=DLStrategy
[DLOptions]usePowersetIterativeReduce=true
[DLOptions]quadricTimeoutIncreaseFactor=0
[DLOptions]FOStrategy=IBC
[ReduceOptions]rlqepnf=DEFAULT
[DLOptions]applyLocalReduce=OFF
[DLOptions]quantifierEliminator=Mathematica
"
}

\programVariables {
  R x1,x2, d1,d2;
  R y1,y2, e1,e2;
  R z1,z2, f1,f2;
  R u1,u2, g1,g2;
  R v1,v2, h1,h2;
  R w1,w2, i1,i2;
  R om, omy, omz, omu, omv, omw, c1,c2;
}
/**
 * Essentials of Tangential Roundabout Maneuver (TRM) in Air Traffic Control (ATC)
 * 6 aircraft
 * @author Andre Platzer
 */
\functions{
  R protectedzone;
}

/**
 * Provable using
 *  diff_weaken for free flight goal
 *  diff_strengthen for TRM goal with
 *    either (d2-e1=-om*(x2-y2)&d2-e2=om*(x1-y1)
 *           &e2-f1=-om*(y2-z2)&e2-f2=om*(y1-z1)
 *           &d2-f1=-om*(x2-z2)&d2-f2=om*(x1-z1)
 *           &...)
 *    or     (d1=-om*(x2-c2)&d2=om*(x1-c1)
 *           &e1=-om*(y2-c2)&e2=om*(y1-c1)
 *           &f1=-om*(z2-c2)&f2=om*(z1-c1)
 *           &g1=-om*(u2-c2)&g2=om*(u1-c1)
 *           &h1=-om*(v2-c2)&h2=om*(v1-c1))
 *           &i1=-om*(w2-c2)&i2=om*(w1-c1))
 */
\problem {
   (        (x1 - y1) ^ 2
            + (x2 - y2) ^ 2
           >= (protectedzone) ^ 2
         &    (y1 - z1) ^ 2
            + (y2 - z2) ^ 2
           >= (protectedzone) ^ 2
         &    (x1 - z1) ^ 2
            + (x2 - z2) ^ 2
           >= (protectedzone) ^ 2
         &    (x1 - u1) ^ 2
            + (x2 - u2) ^ 2
           >= (protectedzone) ^ 2
         &    (y1 - u1) ^ 2
            + (y2 - u2) ^ 2
           >= (protectedzone) ^ 2
         &    (z1 - u1) ^ 2
            + (z2 - u2) ^ 2
           >= (protectedzone) ^ 2
         &    (x1 - v1) ^ 2
            + (x2 - v2) ^ 2
           >= (protectedzone) ^ 2
         &    (y1 - v1) ^ 2
            + (y2 - v2) ^ 2
           >= (protectedzone) ^ 2
         &    (z1 - v1) ^ 2
            + (z2 - v2) ^ 2
           >= (protectedzone) ^ 2
         &    (u1 - v1) ^ 2
            + (u2 - v2) ^ 2
           >= (protectedzone) ^ 2
         &    (x1 - w1) ^ 2
            + (x2 - w2) ^ 2
           >= (protectedzone) ^ 2
         &    (y1 - w1) ^ 2
            + (y2 - w2) ^ 2
           >= (protectedzone) ^ 2
         &    (z1 - w1) ^ 2
            + (z2 - w2) ^ 2
           >= (protectedzone) ^ 2
         &    (u1 - w1) ^ 2
            + (u2 - w2) ^ 2
           >= (protectedzone) ^ 2
         &    (v1 - w1) ^ 2
            + (v2 - w2) ^ 2
           >= (protectedzone) ^ 2
      -> \[
           ((om := * ;
             omy := * ;
             omz := * ;
             omu := * ;
             omv := * ;
             omw := * ;
             {x1` = d1, x2` = d2, d1` = -om * d2, d2` = om * d1, y1` = e1, y2` = e2, e1` = -omy * e2, e2` = omy * e1, z1` = f1, z2` = f2, f1` = -omz * f2, f2` = omz * f1, u1` = g1, u2` = g2, g1` = -omu * g2, g2` = omu * g1, v1` = h1, v2` = h2, h1` = -omv * h2, h2` = omv * h1, w1` = i1, w2` = i2, i1` = -omw * i2, i2` = omw * i1, (x1 - y1) ^ 2 + (x2 - y2) ^ 2 >= protectedzone ^ 2, (y1 - z1) ^ 2 + (y2 - z2) ^ 2 >= protectedzone ^ 2, (x1 - z1) ^ 2 + (x2 - z2) ^ 2 >= protectedzone ^ 2, (x1 - u1) ^ 2 + (x2 - u2) ^ 2 >= protectedzone ^ 2, (y1 - u1) ^ 2 + (y2 - u2) ^ 2 >= protectedzone ^ 2, (z1 - u1) ^ 2 + (z2 - u2) ^ 2 >= protectedzone ^ 2, (x1 - v1) ^ 2 + (x2 - v2) ^ 2 >= protectedzone ^ 2, (y1 - v1) ^ 2 + (y2 - v2) ^ 2 >= protectedzone ^ 2, (z1 - v1) ^ 2 + (z2 - v2) ^ 2 >= protectedzone ^ 2, (u1 - v1) ^ 2 + (u2 - v2) ^ 2 >= protectedzone ^ 2, (x1 - w1) ^ 2 + (x2 - w2) ^ 2 >= protectedzone ^ 2, (y1 - w1) ^ 2 + (y2 - w2) ^ 2 >= protectedzone ^ 2, (z1 - w1) ^ 2 + (z2 - w2) ^ 2 >= protectedzone ^ 2, (u1 - w1) ^ 2 + (u2 - w2) ^ 2 >= protectedzone ^ 2, (v1 - w1) ^ 2 + (v2 - w2) ^ 2 >= protectedzone ^ 2})* ;
             c1 := * ;
             c2 := * ;
             om := * ;
             d1 := (-om * (x2 - c2)) ;
             d2 := (om * (x1 - c1)) ;
             e1 := (-om * (y2 - c2)) ;
             e2 := (om * (y1 - c1)) ;
             f1 := (-om * (z2 - c2)) ;
             f2 := (om * (z1 - c1)) ;
             g1 := (-om * (u2 - c2)) ;
             g2 := (om * (u1 - c1)) ;
             h1 := (-om * (v2 - c2)) ;
             h2 := (om * (v1 - c1)) ;
             i1 := (-om * (w2 - c2)) ;
             i2 := (om * (w1 - c1)) ;
             {x1` = d1, x2` = d2, d1` = -om * d2, d2` = om * d1, y1` = e1, y2` = e2, e1` = -om * e2, e2` = om * e1, z1` = f1, z2` = f2, f1` = -om * f2, f2` = om * f1, u1` = g1, u2` = g2, g1` = -om * g2, g2` = om * g1, v1` = h1, v2` = h2, h1` = -om * h2, h2` = om * h1, w1` = i1, w2` = i2, i1` = -om * i2, i2` = om * i1})*
           \] (     (x1 - y1) ^ 2
                  + (x2 - y2) ^ 2
                 >= (protectedzone) ^ 2
               &    (y1 - z1) ^ 2
                  + (y2 - z2) ^ 2
                 >= (protectedzone) ^ 2
               &    (x1 - z1) ^ 2
                  + (x2 - z2) ^ 2
                 >= (protectedzone) ^ 2
               &    (x1 - u1) ^ 2
                  + (x2 - u2) ^ 2
                 >= (protectedzone) ^ 2
               &    (y1 - u1) ^ 2
                  + (y2 - u2) ^ 2
                 >= (protectedzone) ^ 2
               &    (z1 - u1) ^ 2
                  + (z2 - u2) ^ 2
                 >= (protectedzone) ^ 2
               &    (x1 - v1) ^ 2
                  + (x2 - v2) ^ 2
                 >= (protectedzone) ^ 2
               &    (y1 - v1) ^ 2
                  + (y2 - v2) ^ 2
                 >= (protectedzone) ^ 2
               &    (z1 - v1) ^ 2
                  + (z2 - v2) ^ 2
                 >= (protectedzone) ^ 2
               &    (u1 - v1) ^ 2
                  + (u2 - v2) ^ 2
                 >= (protectedzone) ^ 2
               &    (x1 - w1) ^ 2
                  + (x2 - w2) ^ 2
                 >= (protectedzone) ^ 2
               &    (y1 - w1) ^ 2
                  + (y2 - w2) ^ 2
                 >= (protectedzone) ^ 2
               &    (z1 - w1) ^ 2
                  + (z2 - w2) ^ 2
                 >= (protectedzone) ^ 2
               &    (u1 - w1) ^ 2
                  + (u2 - w2) ^ 2
                 >= (protectedzone) ^ 2
               &    (v1 - w1) ^ 2
                  + (v2 - w2) ^ 2
                 >= (protectedzone) ^ 2))

}

\proof {
(keyLog "0" (keyUser "aplatzer" ) (keyVersion "c6d71c50856e1d166cbe81832e10567786eb17a3"))

(branch "dummy ID"
(rule "imp_right" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "loop_inv_box_quan" (formula "16") (inst "inv=  (x1 - y1) ^ 2 + (x2 - y2) ^ 2 >= (protectedzone) ^ 2
& (     (y1 - z1) ^ 2
      + (y2 - z2) ^ 2
     >= (protectedzone) ^ 2
   & (     (x1 - z1) ^ 2
         + (x2 - z2) ^ 2
        >= (protectedzone) ^ 2
      & (     (x1 - u1) ^ 2
            + (x2 - u2) ^ 2
           >= (protectedzone) ^ 2
         & (     (y1 - u1) ^ 2
               + (y2 - u2) ^ 2
              >= (protectedzone) ^ 2
            & (     (z1 - u1) ^ 2
                  + (z2 - u2) ^ 2
                 >= (protectedzone) ^ 2
               & (     (x1 - v1) ^ 2
                     + (x2 - v2) ^ 2
                    >= (protectedzone) ^ 2
                  & (     (y1 - v1) ^ 2
                        + (y2 - v2) ^ 2
                       >= (protectedzone) ^ 2
                     & (     (z1 - v1) ^ 2
                           + (z2 - v2) ^ 2
                          >= (protectedzone) ^ 2
                        & (     (u1 - v1) ^ 2
                              + (u2 - v2) ^ 2
                             >= (protectedzone) ^ 2
                           & (     (x1 - w1) ^ 2
                                 + (x2 - w2) ^ 2
                                >= (protectedzone) ^ 2
                              & (     (y1 - w1) ^ 2
                                    + (y2 - w2) ^ 2
                                   >=   (protectedzone)
                                      ^ 2
                                 & (     (z1 - w1) ^ 2
                                       + (z2 - w2) ^ 2
                                      >=   (protectedzone)
                                         ^ 2
                                    & (       (u1 - w1)
                                            ^ 2
                                          +   (u2 - w2)
                                            ^ 2
                                         >=   (protectedzone)
                                            ^ 2
                                       &      (v1 - w1)
                                            ^ 2
                                          +   (v2 - w2)
                                            ^ 2
                                         >=   (protectedzone)
                                            ^ 2)))))))))))))"))
(branch " Invariant Initially Valid"
   (builtin "Eliminate Universal Quantifiers" (formula "1"))
)
(branch " Use Case"
   (builtin "Update Simplification" (formula "16"))
   (builtin "Eliminate Universal Quantifiers" (formula "1"))
)
(branch " Body Preserves Invariant"
   (builtin "Update Simplification" (formula "16"))
   (rule "all_right" (formula "16") (inst "skC=x2_1"))
   (rule "all_right" (formula "16") (inst "skC=x1_1"))
   (rule "all_right" (formula "16") (inst "skC=d2_1"))
   (rule "all_right" (formula "16") (inst "skC=d1_1"))
   (rule "all_right" (formula "16") (inst "skC=y1_1"))
   (rule "all_right" (formula "16") (inst "skC=y2_1"))
   (rule "all_right" (formula "16") (inst "skC=e1_1"))
   (rule "all_right" (formula "16") (inst "skC=e2_1"))
   (rule "all_right" (formula "16") (inst "skC=z1_1"))
   (rule "all_right" (formula "16") (inst "skC=z2_1"))
   (rule "all_right" (formula "16") (inst "skC=f1_1"))
   (rule "all_right" (formula "16") (inst "skC=f2_1"))
   (rule "all_right" (formula "16") (inst "skC=g2_1"))
   (rule "all_right" (formula "16") (inst "skC=u2_1"))
   (rule "all_right" (formula "16") (inst "skC=g1_1"))
   (rule "all_right" (formula "16") (inst "skC=u1_1"))
   (rule "all_right" (formula "16") (inst "skC=v2_1"))
   (rule "all_right" (formula "16") (inst "skC=v1_1"))
   (rule "all_right" (formula "16") (inst "skC=h1_1"))
   (rule "all_right" (formula "16") (inst "skC=h2_1"))
   (rule "all_right" (formula "16") (inst "skC=w2_1"))
   (rule "all_right" (formula "16") (inst "skC=w1_1"))
   (rule "all_right" (formula "16") (inst "skC=i1_1"))
   (rule "all_right" (formula "16") (inst "skC=i2_1"))
   (rule "imp_right" (formula "16"))
   (rule "and_left" (formula "1"))
   (rule "and_left" (formula "2"))
   (rule "and_left" (formula "3"))
   (rule "and_left" (formula "4"))
   (rule "and_left" (formula "5"))
   (rule "and_left" (formula "6"))
   (rule "and_left" (formula "7"))
   (rule "and_left" (formula "8"))
   (rule "and_left" (formula "9"))
   (rule "and_left" (formula "10"))
   (rule "and_left" (formula "11"))
   (rule "and_left" (formula "12"))
   (rule "and_left" (formula "13"))
   (rule "and_left" (formula "14"))
   (rule "modality_split_right" (formula "31"))
   (rule "loop_inv_box_quan" (formula "31") (inst "inv=  (x1 - y1) ^ 2 + (x2 - y2) ^ 2 >= (protectedzone) ^ 2
& (     (y1 - z1) ^ 2
      + (y2 - z2) ^ 2
     >= (protectedzone) ^ 2
   & (     (x1 - z1) ^ 2
         + (x2 - z2) ^ 2
        >= (protectedzone) ^ 2
      & (     (x1 - u1) ^ 2
            + (x2 - u2) ^ 2
           >= (protectedzone) ^ 2
         & (     (y1 - u1) ^ 2
               + (y2 - u2) ^ 2
              >= (protectedzone) ^ 2
            & (     (z1 - u1) ^ 2
                  + (z2 - u2) ^ 2
                 >= (protectedzone) ^ 2
               & (     (x1 - v1) ^ 2
                     + (x2 - v2) ^ 2
                    >= (protectedzone) ^ 2
                  & (     (y1 - v1) ^ 2
                        + (y2 - v2) ^ 2
                       >= (protectedzone) ^ 2
                     & (     (z1 - v1) ^ 2
                           + (z2 - v2) ^ 2
                          >= (protectedzone) ^ 2
                        & (     (u1 - v1) ^ 2
                              + (u2 - v2) ^ 2
                             >= (protectedzone) ^ 2
                           & (     (x1 - w1) ^ 2
                                 + (x2 - w2) ^ 2
                                >= (protectedzone) ^ 2
                              & (     (y1 - w1) ^ 2
                                    + (y2 - w2) ^ 2
                                   >=   (protectedzone)
                                      ^ 2
                                 & (     (z1 - w1) ^ 2
                                       + (z2 - w2) ^ 2
                                      >=   (protectedzone)
                                         ^ 2
                                    & (       (u1 - w1)
                                            ^ 2
                                          +   (u2 - w2)
                                            ^ 2
                                         >=   (protectedzone)
                                            ^ 2
                                       &      (v1 - w1)
                                            ^ 2
                                          +   (v2 - w2)
                                            ^ 2
                                         >=   (protectedzone)
                                            ^ 2)))))))))))))"))
   (branch " Invariant Initially Valid"
      (builtin "Update Simplification" (formula "31"))
      (builtin "Eliminate Universal Quantifiers" (formula "1"))
   )
   (branch " Use Case"
      (builtin "Update Simplification" (formula "31"))
      (rule "all_right" (formula "31") (inst "skC=om_1"))
      (rule "all_right" (formula "31") (inst "skC=d2_2"))
      (rule "all_right" (formula "31") (inst "skC=d1_2"))
      (rule "all_right" (formula "31") (inst "skC=x1_2"))
      (rule "all_right" (formula "31") (inst "skC=x2_2"))
      (rule "all_right" (formula "31") (inst "skC=omy_1"))
      (rule "all_right" (formula "31") (inst "skC=e2_2"))
      (rule "all_right" (formula "31") (inst "skC=e1_2"))
      (rule "all_right" (formula "31") (inst "skC=y1_2"))
      (rule "all_right" (formula "31") (inst "skC=y2_2"))
      (rule "all_right" (formula "31") (inst "skC=omz_1"))
      (rule "all_right" (formula "31") (inst "skC=f2_2"))
      (rule "all_right" (formula "31") (inst "skC=f1_2"))
      (rule "all_right" (formula "31") (inst "skC=z1_2"))
      (rule "all_right" (formula "31") (inst "skC=z2_2"))
      (rule "all_right" (formula "31") (inst "skC=omu_1"))
      (rule "all_right" (formula "31") (inst "skC=g2_2"))
      (rule "all_right" (formula "31") (inst "skC=g1_2"))
      (rule "all_right" (formula "31") (inst "skC=u1_2"))
      (rule "all_right" (formula "31") (inst "skC=u2_2"))
      (rule "all_right" (formula "31") (inst "skC=omv_1"))
      (rule "all_right" (formula "31") (inst "skC=h2_2"))
      (rule "all_right" (formula "31") (inst "skC=h1_3"))
      (rule "all_right" (formula "31") (inst "skC=v1_3"))
      (rule "all_right" (formula "31") (inst "skC=v2_3"))
      (rule "all_right" (formula "31") (inst "skC=omw_2"))
      (rule "all_right" (formula "31") (inst "skC=i2_3"))
      (rule "all_right" (formula "31") (inst "skC=i1_3"))
      (rule "all_right" (formula "31") (inst "skC=w1_3"))
      (rule "all_right" (formula "31") (inst "skC=w2_3"))
      (rule "imp_right" (formula "31"))
      (rule "and_left" (formula "1"))
      (rule "and_left" (formula "2"))
      (rule "and_left" (formula "3"))
      (rule "and_left" (formula "4"))
      (rule "and_left" (formula "5"))
      (rule "and_left" (formula "6"))
      (rule "and_left" (formula "7"))
      (rule "and_left" (formula "8"))
      (rule "and_left" (formula "9"))
      (rule "and_left" (formula "10"))
      (rule "and_left" (formula "11"))
      (rule "and_left" (formula "12"))
      (rule "and_left" (formula "13"))
      (rule "and_left" (formula "14"))
      (rule "shift_paren_and" (formula "46") (term "0,30"))
      (rule "modality_split_right" (formula "46"))
      (rule "shift_paren_and" (formula "46") (term "1,0,0,30"))
      (rule "shift_paren_and" (formula "46") (term "1,0,0,30"))
      (rule "random_ass_box_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "all_right" (formula "46") (inst "skC=c1_1"))
      (rule "modality_split_right" (formula "46"))
      (rule "shift_paren_and" (formula "46") (term "1,0,0,31"))
      (rule "shift_paren_and" (formula "46") (term "1,1,1,0,0,31"))
      (rule "random_ass_box_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "all_right" (formula "46") (inst "skC=c2_1"))
      (rule "modality_split_right" (formula "46"))
      (rule "shift_paren_and" (formula "46") (term "1,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "1,1,1,0,0,32"))
      (rule "random_ass_box_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "all_right" (formula "46") (inst "skC=om_4"))
      (rule "modality_split_right" (formula "46"))
      (rule "shift_paren_and" (formula "46") (term "1,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "1,1,1,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,1,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "1,1,0,0,32"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "modality_split_right" (formula "46"))
      (rule "shift_paren_and" (formula "46") (term "1,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,1,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,1,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "1,0,0,32"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "modality_split_right" (formula "46"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,0,1,0,0,32"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "modality_split_right" (formula "46"))
      (rule "shift_paren_and" (formula "46") (term "0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,0,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,0,0,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,0,0,0,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,0,0,0,0,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0,0,32"))
      (rule "shift_paren_and" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,32"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "modality_split_right" (formula "46"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "modality_split_right" (formula "46"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "modality_split_right" (formula "46"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "modality_split_right" (formula "46"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "modality_split_right" (formula "46"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "modality_split_right" (formula "46"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "modality_split_right" (formula "46"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "modality_split_right" (formula "46"))
      (rule "assignment_to_update_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "diffstrengthen" (formula "46") (inst "augment=  d1 = -om * (x2 - c2)
& (  d2 = om * (x1 - c1)
   & (  e1 = -om * (y2 - c2)
      & (  e2 = om * (y1 - c1)
         & (  f1 = -om * (z2 - c2)
            & (  f2 = om * (z1 - c1)
               & (  g1 = -om * (u2 - c2)
                  & (  g2 = om * (u1 - c1)
                     & (  h1 = -om * (v2 - c2)
                        & (  h2 = om * (v1 - c1)
                           & (  i1 = -om * (w2 - c2)
                              & i2 = om * (w1 - c1)))))))))))"))
      (branch " Invariant Valid"
         (rule "diffind" (formula "46"))
         (branch " Invariant Initially Valid"
            (builtin "Update Simplification" (formula "1"))
            (builtin "Update Simplification" (formula "47"))
            (builtin "Eliminate Universal Quantifiers" (formula "1"))
         )
         (branch " ODE Preserves Invariant"
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Update Simplification" (formula "46"))
            (builtin "Eliminate Universal Quantifiers" (formula "1"))
         )
      )
      (branch " Augmented Invariant"
         (rule "diffind" (formula "46") (userinteraction))
         (branch " Invariant Initially Valid"
            (builtin "Update Simplification" (formula "1"))
            (builtin "Update Simplification" (formula "47"))
            (builtin "Eliminate Universal Quantifiers" (formula "47"))
         )
         (branch " ODE Preserves Invariant"
            (builtin "Update Simplification" (formula "46"))
            (rule "eval_literals" (formula "46") (term "0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eval_literals" (formula "46") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "all_right" (formula "46") (inst "skC=g2_4"))
            (rule "all_right" (formula "46") (inst "skC=g1_4"))
            (rule "all_right" (formula "46") (inst "skC=u1_4"))
            (rule "all_right" (formula "46") (inst "skC=u2_4"))
            (rule "all_right" (formula "46") (inst "skC=h1_4"))
            (rule "all_right" (formula "46") (inst "skC=h2_4"))
            (rule "all_right" (formula "46") (inst "skC=v1_4"))
            (rule "all_right" (formula "46") (inst "skC=v2_4"))
            (rule "all_right" (formula "46") (inst "skC=i1_4"))
            (rule "all_right" (formula "46") (inst "skC=i2_4"))
            (rule "all_right" (formula "46") (inst "skC=w1_4"))
            (rule "all_right" (formula "46") (inst "skC=w2_4"))
            (rule "all_right" (formula "46") (inst "skC=d2_4"))
            (rule "all_right" (formula "46") (inst "skC=d1_4"))
            (rule "all_right" (formula "46") (inst "skC=x1_4"))
            (rule "all_right" (formula "46") (inst "skC=x2_4"))
            (rule "all_right" (formula "46") (inst "skC=e1_4"))
            (rule "all_right" (formula "46") (inst "skC=e2_4"))
            (rule "all_right" (formula "46") (inst "skC=y1_4"))
            (rule "all_right" (formula "46") (inst "skC=y2_4"))
            (rule "all_right" (formula "46") (inst "skC=f1_4"))
            (rule "all_right" (formula "46") (inst "skC=f2_4"))
            (rule "all_right" (formula "46") (inst "skC=z1_4"))
            (rule "all_right" (formula "46") (inst "skC=z2_4"))
            (rule "imp_right" (formula "46"))
            (rule "and_left" (formula "1"))
            (rule "and_left" (formula "1"))
            (rule "and_left" (formula "1"))
            (rule "and_left" (formula "1"))
            (rule "and_left" (formula "1"))
            (rule "and_left" (formula "1"))
            (rule "and_left" (formula "1"))
            (rule "and_left" (formula "1"))
            (rule "and_left" (formula "1"))
            (rule "and_left" (formula "1"))
            (rule "and_left" (formula "1"))
            (rule "and_right" (formula "58"))
            (branch " Case 1"
               (rule "and_right" (formula "58"))
               (branch " Case 1"
                  (rule "and_right" (formula "58"))
                  (branch " Case 1"
                     (rule "and_right" (formula "58"))
                     (branch " Case 1"
                        (rule "and_right" (formula "58"))
                        (branch " Case 1"
                           (rule "and_right" (formula "58"))
                           (branch " Case 1"
                              (rule "and_right" (formula "58"))
                              (branch " Case 1"
                                 (rule "and_right" (formula "58"))
                                 (branch " Case 1"
                                    (rule "and_right" (formula "58"))
                                    (branch " Case 1"
                                       (rule "and_right" (formula "58"))
                                       (branch " Case 1"
                                          (rule "and_right" (formula "58"))
                                          (branch " Case 1"
                                             (rule "and_right" (formula "58"))
                                             (branch " Case 1"
                                                (rule "and_right" (formula "58"))
                                                (branch " Case 1"
                                                   (rule "and_right" (formula "58"))
                                                   (branch " Case 1"
                                                      (builtin "Eliminate Universal Quantifiers" (formula "1"))
                                                   )
                                                   (branch " Case 2"
                                                      (builtin "Eliminate Universal Quantifiers" (formula "1"))
                                                   )
                                                )
                                                (branch " Case 2"
                                                   (builtin "Eliminate Universal Quantifiers" (formula "1"))
                                                )
                                             )
                                             (branch " Case 2"
                                                (builtin "Eliminate Universal Quantifiers" (formula "1"))
                                             )
                                          )
                                          (branch " Case 2"
                                             (builtin "Eliminate Universal Quantifiers" (formula "1"))
                                          )
                                       )
                                       (branch " Case 2"
                                          (builtin "Eliminate Universal Quantifiers" (formula "1"))
                                       )
                                    )
                                    (branch " Case 2"
                                       (builtin "Eliminate Universal Quantifiers" (formula "1"))
                                    )
                                 )
                                 (branch " Case 2"
                                    (builtin "Eliminate Universal Quantifiers" (formula "1"))
                                 )
                              )
                              (branch " Case 2"
                                 (builtin "Eliminate Universal Quantifiers" (formula "1"))
                              )
                           )
                           (branch " Case 2"
                              (builtin "Eliminate Universal Quantifiers" (formula "1"))
                           )
                        )
                        (branch " Case 2"
                           (builtin "Eliminate Universal Quantifiers" (formula "1"))
                        )
                     )
                     (branch " Case 2"
                        (builtin "Eliminate Universal Quantifiers" (formula "1"))
                     )
                  )
                  (branch " Case 2"
                     (builtin "Eliminate Universal Quantifiers" (formula "1"))
                  )
               )
               (branch " Case 2"
                  (builtin "Eliminate Universal Quantifiers" (formula "1"))
               )
            )
            (branch " Case 2"
               (builtin "Eliminate Universal Quantifiers" (formula "1"))
            )
         )
      )
   )
   (branch " Body Preserves Invariant"
      (builtin "Update Simplification" (formula "31"))
      (rule "all_right" (formula "31") (inst "skC=d2_3"))
      (rule "all_right" (formula "31") (inst "skC=d1_3"))
      (rule "all_right" (formula "31") (inst "skC=x1_3"))
      (rule "all_right" (formula "31") (inst "skC=x2_3"))
      (rule "all_right" (formula "31") (inst "skC=e2_3"))
      (rule "all_right" (formula "31") (inst "skC=e1_3"))
      (rule "all_right" (formula "31") (inst "skC=y1_3"))
      (rule "all_right" (formula "31") (inst "skC=y2_3"))
      (rule "all_right" (formula "31") (inst "skC=f2_3"))
      (rule "all_right" (formula "31") (inst "skC=f1_3"))
      (rule "all_right" (formula "31") (inst "skC=z1_3"))
      (rule "all_right" (formula "31") (inst "skC=z2_3"))
      (rule "all_right" (formula "31") (inst "skC=g2_3"))
      (rule "all_right" (formula "31") (inst "skC=g1_3"))
      (rule "all_right" (formula "31") (inst "skC=u1_3"))
      (rule "all_right" (formula "31") (inst "skC=u2_3"))
      (rule "all_right" (formula "31") (inst "skC=h2_3"))
      (rule "all_right" (formula "31") (inst "skC=h1_2"))
      (rule "all_right" (formula "31") (inst "skC=v1_2"))
      (rule "all_right" (formula "31") (inst "skC=v2_2"))
      (rule "all_right" (formula "31") (inst "skC=i2_2"))
      (rule "all_right" (formula "31") (inst "skC=i1_2"))
      (rule "all_right" (formula "31") (inst "skC=w1_2"))
      (rule "all_right" (formula "31") (inst "skC=w2_2"))
      (rule "imp_right" (formula "31"))
      (rule "and_left" (formula "1"))
      (rule "and_left" (formula "2"))
      (rule "and_left" (formula "3"))
      (rule "and_left" (formula "4"))
      (rule "and_left" (formula "5"))
      (rule "and_left" (formula "6"))
      (rule "and_left" (formula "7"))
      (rule "and_left" (formula "8"))
      (rule "and_left" (formula "9"))
      (rule "and_left" (formula "10"))
      (rule "and_left" (formula "11"))
      (rule "and_left" (formula "12"))
      (rule "and_left" (formula "13"))
      (rule "and_left" (formula "14"))
      (rule "shift_paren_and" (formula "46") (term "0,24"))
      (rule "modality_split_right" (formula "46"))
      (rule "shift_paren_and" (formula "46") (term "1,0,0,24"))
      (rule "shift_paren_and" (formula "46") (term "1,1,1,0,0,24"))
      (rule "random_ass_box_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "all_right" (formula "46") (inst "skC=om_2"))
      (rule "modality_split_right" (formula "46"))
      (rule "shift_paren_and" (formula "46") (term "1,0,0,25"))
      (rule "shift_paren_and" (formula "46") (term "1,1,1,0,0,25"))
      (rule "random_ass_box_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "all_right" (formula "46") (inst "skC=omy_2"))
      (rule "modality_split_right" (formula "46"))
      (rule "shift_paren_and" (formula "46") (term "1,0,0,26"))
      (rule "shift_paren_and" (formula "46") (term "1,1,1,0,0,26"))
      (rule "shift_paren_and" (formula "46") (term "0,1,0,0,26"))
      (rule "shift_paren_and" (formula "46") (term "1,1,1,1,1,0,0,26"))
      (rule "random_ass_box_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "all_right" (formula "46") (inst "skC=omz_2"))
      (rule "modality_split_right" (formula "46"))
      (rule "random_ass_box_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "all_right" (formula "46") (inst "skC=omu_2"))
      (rule "modality_split_right" (formula "46"))
      (rule "random_ass_box_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "all_right" (formula "46") (inst "skC=omv_2"))
      (rule "modality_split_right" (formula "46"))
      (rule "random_ass_box_right" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (rule "all_right" (formula "46") (inst "skC=omw_1"))
      (rule "diffweaken" (formula "46"))
      (builtin "Update Simplification" (formula "46"))
      (builtin "Eliminate Universal Quantifiers" (formula "1"))
   )
)
)

}
