/**
 * Fault Detection Logic in an Aircraft Elevator Control:
 *========================================================
 *
 * (Based on Matlab Model sf_aircraft)
 *
 * - two elevators at rear of airplane
 * - two hydraulic actuators per elevator
 * - outer hydraulic actuators are controled by dedicated 
 *   hydraulic circuit (one per elevator)
 * - inner hydraulic sensors are controlled by shared hydraulic circuit
 * - two flight control units (PFCU)
 * - two control modules per actuator
 * - three sensors per actuator measure actuator position
 */

/**
 * Macros
 *========*/

/**
 * program step
 *--------------
 *  P:    program ID (A, B, ...)
 *  N:    N^th Step (1, ..., n)
 *  H:    hybrid program for step N
 *  time: constraint over the bound variable dt determining when P continues 
 *        (e.g., dt = 5 or \exists W. -1 < W & W < 1 & dt = 5 + W for execution time jitter)
 */
#include "parallel.h"
#include "bool.h"

#define abs(term) \
  \exists R abs_val. (term < 0 -> abs_val = -term) & (term >= 0 -> abs_val = term) & abs_val

#define max(a, b) \
  if (a > b) a else b endif

#define min(a, b) \
  if (a > b) b else a endif

/**
 * controller functions 
 */
#define none(Sensor) \
  count_##Sensor := count_##Sensor + 1;            \
  if (count_##Sensor > 3)                          \
    count_##Sensor := 3;                           \
    valid_signal_##Sensor := 0;                    \
    failure_##Sensor := 1                          \
  else                                             \
    valid_signal_##Sensor := sensor_##Sensor_prev; \
    failure_##Sensor := 0                          \
  endif


/**
 * Properties:
 * - exactly one component controls the elevators
 *
 */

/**
 * Questions / Remarks:
 * - is there a way to gradually update non rigit functions over sorts? [used explicit sensor symbols instead]
 *   (a[0] := x; t++; a[1] := x; t++; ... a[n] := x; t++;)
 *
 * - cannot separate sensor physics from program
 *     preparing the sensor values ahead (i.e., adding noise) prevents us from advancing time correctly in the controller
 *
 *
 */

\programVariables {

  parallel;

  /**
   * Parallel controller threads
   */
  par_thread(PFCU1);
  par_thread(PFCU2);

  /**
   * Airplane Model
   */

  /* Position of elevators (HÃ¶henruder) */
  R elevator_position_L;
  R elevator_position_R;

  /* Position of actuator */
  R elevator_actuator_LO;
  R elevator_actuator_LI;
  R elevator_actuator_RO;
  R elevator_actuator_RI;

  /* Sensors */
  R sensor_LO1; /* = elevator_actuator_LO + N[+- 0.1] U * */
  R sensor_LO2; 
  R sensor_LO3; 
  R sensor_RO1; 
  R sensor_RO2; 
  R sensor_RO3; 


  /**
   * Program
   */
  
  /* read sensor values */
  R sensor_LO1_val; R sensor_LO2_val; R sensor_LO3_val; 
  R sensor_RO1_val; R sensor_RO2_val; R sensor_RO3_val; 
  
  R sensor_LI1_val; R sensor_LI2_val; R sensor_LI3_val; 
  R sensor_RI1_val; R sensor_RI2_val; R sensor_RI3_val; 

  /* previous sensor value */
  R sensor_LO_prev; R sensor_RO_prev; 
  R sensor_LI_prev; R sensor_RI_prev;

  /* sensor combination variables */
  R valid_signal_LO; R count_LO; R failure_LO;
  R valid_signal_RO; R count_RO; R failure_RO;

  R valid_sensors_PFCU1;
  R diff_PFCU1;
  R mean_PFCU1;
  R middle_PFCU1;

}




\problem{
  (
   /* Failure Configuration (later Probabilities)
    *---------------------------------------------*/
   LO1_fail = false & LO2_fail = false & LO3_fail = false &
   LI1_fail = false & LI2_fail = false & LI3_fail = false &
   RO1_fail = false & RO2_fail = false & RO3_fail = false &
   RI1_fail = false & RI2_fail = false & RI3_fail = false &
   
   /* Constants 
    *-----------*/
   SensorNoiseRange     = 0.1 & /* noise between -0.1, 0.1 */ 
   SensorRangeThreshold = 10 &  /* valid sensor values are between -10 and 10 */ 

   SensorDiffMax        = 3 &   /* XXX */
  
   /* Execution Times 
    *-----------------*/
   StartJitter      =  10 & /* Sampling time is 0.01 seconds => time value 1 = 1 microsecond = 0.0000001 */
   ReadSensorTime   = 100 &
   ReadSensorJitter =  10 &

   
   /* Initialization
    *----------------*/
   par_init(PFCU1, 1, 0 <= par_dt & par_dt <= StartJitter) & /* start controller at time 1 with jitter +-1*/
   par_init(PFCU2, 1, 0 <= par_dt & par_dt <= StartJitter) &
   
   sensor_LO_prev = sensor_LO1_val & sensor_RO_prev = sensor_RO1_val & 
   sensor_LI_prev = sensor_LI1_val & sensor_RI_prev = sensor_RI1_val & 

  )
    ->
  (
   while(par_active(PFCU1) | par_active(PFCU2))

     /**
      * Controller 
      *============
      */

     /* PFCU1
      *-------
      * controls left and right outer actuaros and hydraulic system 1 and 3
      */

     /* read outer sensors
      *~~~~~~~~~~~~~~~~~~~~~~*/
     par_seq(PFCU1, 1, ReadSensorTime - ReadSensorJitter <= par_dt & par_dt <= ReadSensorTime + ReadSensorJitter, 
             /* outer left 1 */
             (\exists R sensor_noise . 
              (sensor_LO1_val := sensor_LO1 + sensor_noise;
               ?(!LO1_fail & -SensorNoiseRange <= sensor_noise & sensor_noise < SensorNoiseRange) ++
               sensor_LO1_val := *; ?LO1_fail))) ++

     par_seq(PFCU1, 2, ReadSensorTime - ReadSensorJitter <= par_dt & par_dt <= ReadSensorTime + ReadSensorJitter, 
             /* outer left 2 */
             (\exists R sensor_noise . 
              (sensor_LO2_val := sensor_LO2 + sensor_noise;
               ?(!LO2_fail & -SensorNoiseRange <= sensor_noise & sensor_noise < SensorNoiseRange) ++
               sensor_LO2_val := *; ?LO2_fail))) ++

     par_seq(PFCU1, 3, ReadSensorTime - ReadSensorJitter <= par_dt & par_dt <= ReadSensorTime + ReadSensorJitter,
             /* outer left 3 */
             (\exists R sensor_noise . 
              (sensor_LO3_val := sensor_LO3 + sensor_noise;
               ?(!LO3_fail & -SensorNoiseRange <= sensor_noise & sensor_noise < SensorNoiseRange) ++
               sensor_LO3_val := *; ?LO3_fail))) ++

     par_seq(PFCU1, 4, ReadSensorTime - ReadSensorJitter <= par_dt & par_dt <= ReadSensorTime + ReadSensorJitter,
             /* outer right 1 */
             (\exists R sensor_noise . 
              (sensor_RO1_val := sensor_RO1 + sensor_noise;
               ?(!RO1_fail & -SensorNoiseRange <= sensor_noise & sensor_noise < SensorNoiseRange) ++
               sensor_RO1_val := *; ?RO1_fail))) ++

     par_seq(PFCU1, 5, ReadSensorTime - ReadSensorJitter <= par_dt & par_dt <= ReadSensorTime + ReadSensorJitter,
             /* outer right 1 */
             (\exists R sensor_noise . 
              (sensor_RO2_val := sensor_RO2 + sensor_noise;
               ?(!RO2_fail & -SensorNoiseRange <= sensor_noise & sensor_noise < SensorNoiseRange) ++
               sensor_RO2_val := *; ?RO2_fail))) ++

     par_seq(PFCU1, 6, ReadSensorTime - ReadSensorJitter <= par_dt & par_dt <= ReadSensorTime + ReadSensorJitter,
             /* outer left 3 */
             (\exists R sensor_noise . 
              (sensor_RO3_val := sensor_RO3 + sensor_noise;
               ?(!RO3_fail & -SensorNoiseRange <= sensor_noise & sensor_noise < SensorNoiseRange) ++
               sensor_RO3_val := *; ?RO3_fail))) ++

     /* make control decision
      *~~~~~~~~~~~~~~~~~~~~~~~*/
     par_seq(PFCU1, 7, ReadSensorTime - ReadSensorJitter <= par_dt & par_dt <= ReadSensorTime + ReadSensorJitter,

             /* PFCU1 left outer sensors 
              * check range and rate
              *~~~~~~~~~~~~~~~~~~~~~~*/
             set_bool(sensor_valid_LO1, /*=*/ -SensorRangeThreshold < sensor_LO1_val & 
                      sensor_LO1_val < SensorRangeThreshold & abs(sensor_LO1_val - sensor_LO_prev) < SensorMaxPitchRate);

             set_bool(sensor_valid_LO2, /*=*/ -SensorRangeThreshold < sensor_LO2_val & 
                      sensor_LO2_val < SensorRangeThreshold & abs(sensor_LO2_val - sensor_LO_prev) < SensorMaxPitchRate);

             set_bool(sensor_valid_LO3, /*=*/ -SensorRangeThreshold < sensor_LO3_val & 
                      sensor_LO3_val < SensorRangeThreshold & abs(sensor_LO3_val - sensor_LO_prev) < SensorMaxPitchRate);

             valid_sensors_PFCU1 := sensor_valid_LO1 + sensor_valid_LO2 + sensor_valid_LO3;

             /* switch n */
             if (valid_sensors_PFCU1 = 0) 
               none(LO) /* !!! we ignore logging */
             endif;

             if (valid_sensors_PFCU1 = 1)
               if (bool(sensor_valid_LO1)) valid_signal_LO := sensor_LO1_val endif; /* signals[select[1]]*/
               if (bool(sensor_valid_LO2)) valid_signal_LO := sensor_LO2_val endif;
               if (bool(sensor_valid_LO3)) valid_signal_LO := sensor_LO3_val endif;
               sensor_LO_prev := valid_signal_LO;
               failure_LO := 0;
               count_LO= := 0            
             endif;

             if (valid_sensors_PFCU1 = 2)
               if (!bool(sensor_valid_LO1)) /* signals[select[1]] .. signals[select[2]] */
                 diff_PFCU1 := abs(sensor_LO2_val - sensor_LO3_val); 
                 mean_PFCU1 := (sensor_LO2_val + sensor_LO3_val)/2 endif
               if (!bool(sensor_valid_LO2)) 
                 diff_PFCU1 := abs(sensor_LO1_val - sensor_LO3_val); 
                 mean_PFCU1 := (sensor_LO1_val + sensor_LO3_val)/2 endif
               if (!bool(sensor_valid_LO3)) 
                 diff_PFCU1 := abs(sensor_LO1_val - sensor_LO2_val); 
                 mean_PFCU1 := (sensor_LO1_val + sensor_LO2_val)/2 endif

               if (diff > SensorDiffMax)
                 none(LO)
               else 
                 valid_signal_LO := mean_PFCU1;
                 signal_LO_prev := valid_signal_LO;
                 failure_LO := 0;
                 count_LO := 0
               endif;
             endif;

             if (valid_sensors_PFCU1 = 3) 
               /* !!! ignoring state bad !!! */
               middle_PFCU1 := sensor_LO1_val + sensor_LO2_val + sensor_LO3_val - 
                               max(max(sensor_LO1_val, sensor_LO2_val), sensor_LO3_val) - 
                               min(min(sensor_LO1_val, sensor_LO2_val), sensor_LO3_val);
               valid_signal_LO := middle_PFCU1;
               signal_LO_prev  := valid_signal_LO;
               failure_LO := 0;
               count_LO := 0  
             endif;

             /* PFCU1 right outer sensors 
              * check range and rate
              *~~~~~~~~~~~~~~~~~~~~~~*/
             set_bool(sensor_valid_RO1, /*=*/ -SensorRangeThreshold < sensor_RO1_val & 
                      sensor_RO1_val < SensorRangeThreshold & abs(sensor_RO1_val - sensor_RO_prev) < SensorMaxPitchRate);

             set_bool(sensor_valid_RO2, /*=*/ -SensorRangeThreshold < sensor_RO2_val & 
                      sensor_RO2_val < SensorRangeThreshold & abs(sensor_RO2_val - sensor_RO_prev) < SensorMaxPitchRate);

             set_bool(sensor_valid_RO3, /*=*/ -SensorRangeThreshold < sensor_RO3_val & 
                      sensor_RO3_val < SensorRangeThreshold & abs(sensor_RO3_val - sensor_RO_prev) < SensorMaxPitchRate);

             valid_sensors_PFCU1 := sensor_valid_RO1 + sensor_valid_RO2 + sensor_valid_RO3;

             /* switch n */
             if (valid_sensors_PFCU1 = 0) 
               none(RO) /* !!! we ignore logging */
             endif;

             if (valid_sensors_PFCU1 = 1)
               if (bool(sensor_valid_RO1)) valid_signal_RO := sensor_RO1_val endif; /* signals[select[1]]*/
               if (bool(sensor_valid_RO2)) valid_signal_RO := sensor_RO2_val endif;
               if (bool(sensor_valid_RO3)) valid_signal_RO := sensor_RO3_val endif;
               sensor_RO_prev := valid_signal_RO;
               failure_RO := 0;
               count_RO= := 0            
             endif;

             if (valid_sensors_PFCU1 = 2)
               if (!bool(sensor_valid_RO1)) /* signals[select[1]] .. signals[select[2]] */
                 diff_PFCU1 := abs(sensor_RO2_val - sensor_RO3_val); 
                 mean_PFCU1 := (sensor_RO2_val + sensor_RO3_val)/2 endif
               if (!bool(sensor_valid_RO2)) 
                 diff_PFCU1 := abs(sensor_RO1_val - sensor_RO3_val); 
                 mean_PFCU1 := (sensor_RO1_val + sensor_RO3_val)/2 endif
               if (!bool(sensor_valid_RO3)) 
                 diff_PFCU1 := abs(sensor_RO1_val - sensor_RO2_val); 
                 mean_PFCU1 := (sensor_RO1_val + sensor_RO2_val)/2 endif

               if (diff > SensorDiffMax)
                 none(RO)
               else 
                 valid_signal_RO := mean_PFCU1;
                 signal_RO_prev := valid_signal_RO;
                 failure_RO := 0;
                 count_RO := 0
               endif;
             endif;

             if (valid_sensors_PFCU1 = 3) 
               /* !!! ignoring state bad !!! */
               middle_PFCU1 := sensor_RO1_val + sensor_RO2_val + sensor_RO3_val - 
                               max(max(sensor_RO1_val, sensor_RO2_val), sensor_RO3_val) - 
                               min(min(sensor_RO1_val, sensor_RO2_val), sensor_RO3_val);
               valid_signal_RO := middle_PFCU1;
               signal_RO_prev  := valid_signal_RO;
               failure_RO := 0;
               count_RO := 0  
             endif;

             // HERE //                                 



/* Plane Physics
 *================
 * - time must not pass here 
 */

 




/** 
 * References 
 *============
 *
 * - Pieter J. Mosterman and Jason Ghidella: Model Reuse for the Training of Fault Scenarios in Aerospace
 *
 */
