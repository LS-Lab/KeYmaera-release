\programVariables {
R cP, cW, cV,cA, cPoint, commitDist, slowV, dP,dPv, desiredFloor, dtimer, 
	     ep, t, ptimer, passC, passH,
	     dMode, dArrive, dOpen, dClose, dReversal,
	     pMode, pEntering, pExiting, pIdle, pActive, pBackout;
}
/*
	649 Elevator Simulator model
	v0.2 - starting simple
	@author Aaron Kane
    @provable

	Report version - Cleaned up comments/old code etc.
*/


\problem {

	\[ dArrive:=0; dOpen:=1; dClose:=2; dReversal:=3; dMode:=dArrive; 
	     pIdle:=0; pEntering:=1; pExiting:=2; pActive:=3; pBackout:=4; pMode:=pIdle
	/* variable declarations */
	\] (

	/* some conditions */
	passC=0 & passH=0
	& cP=0 & cW=0 & dP=0 & cV=0 & desiredFloor=0
	& dPv=1 & slowV=0.25 & cA=1
	& commitDist = slowV^2/(2*cA) & ep<=0.2
	->
		\[(	
			/* Passenger Model*/
			(
			(?pMode=pIdle;
				?true
			)
			++
			(?pMode=pActive;
				(passH:=0 ++ passH:=1 ++ passH:=2);
				pMode:=pExiting
			)
			++
			(?pMode=pEntering;
				if (passH>0) then
					if (ptimer>=2) then
						ptimer:=ptimer-2;
						passH:=passH-1;
						passC:= passC+1
					else
						pMode:=pBackout;
						dMode:=dReversal
					fi
				else
					pMode:=pIdle
				fi
			)
			++
			(?pMode=pExiting;
				if (passC>0) then
					( /* use nondet choice for passenger exit or not */
						pMode:=pEntering;
						?true /* no exit */
						++    /* exit */
						(if (ptimer>=2) then 
							ptimer:=ptimer-2;
							passC:=passC-1
						else
							pMode:=pBackout;
							dMode:=dReversal
						fi	
						)
					)
				else /* noone in car, go to entering */
					pMode:=pEntering
				fi	
			)
			++
			(?pMode=pBackout;
				if (ptimer>=2) then 
					pMode:=pExiting
				fi
			)
			)
			++
			/* Elevator Model */
			/* stopped */
			((? cV=0;
				t:=0;
				if (desiredFloor=cP) then /* big setup - at our floor? */
					(? dMode=dArrive;
						{dP'=dPv, dP<=450};
						{dP'=dPv, ptimer'=0.002, dP>=450, dP<=1000};
						if (pMode=pIdle) then
							pMode:= pActive
						fi;
						if (dP=1000) then
							dMode:=dOpen
						fi
					)	
					++
					(? dMode=dOpen;
						{dtimer'=1, ptimer'=1, dtimer<=3};
						if (dtimer=3) then
							dMode:=dClose
						fi
					)
					++
					(? dMode=dClose;
						{dP'=-dPv, ptimer'=0.002, dP>=450};
						/* do passenger stuff here */	
						?pMode=pIdle;
						{dP'=-dPv, dP<=450, dP>=0};
						if (dP=0) then
							if (desiredFloor>10) then
								desiredFloor:=0
							else
								desiredFloor:= desiredFloor+5
							fi;
							dMode:=dArrive;
							ptimer:=0;
							dtimer:=0
						fi
					)
					++
					(? dMode=dReversal;
						dtimer:=0;
						ptimer:=0;
						dMode:=dArrive
					)
				else /* Stopped but not at desired floor, move towards it*/
					(?dP=0; /* ensure doors are closed */
					if (desiredFloor>cP) then
						commitDist := cV^2/(2*cA);
						{cP'=cV, cV'=cA, cV<=slowV, t'=1, 
						 t<=ep, cP<=desiredFloor-(cV^2/(2*cA))}
					else
						commitDist := cV^2/(2*cA);
						{cP'=cV, cV'=-cA, cV>=-slowV, t'=1, 
						 t<=ep, cP>=desiredFloor+(cV^2/(2*cA))}
					fi
					)
				fi
			)
			++
			/* moving */
			(? cV!=0;
				t:=0;
				if (cV>0) then
					/* constant accel, real stopping */
					commitDist := cV^2/(2*cA);
					{cP'=cV, cV'=cA, t'=1, 
					 t<=ep, cV<=slowV, cP<=desiredFloor-(cV^2/(2*cA))};
					{cP'=cV, t'=1, 
					 t<=ep, cV=slowV, cP<=desiredFloor-commitDist};
					{cP'=cV, cV'=-cA, t'=1, 
					 t<=ep, cP<=desiredFloor, cP>=desiredFloor-(cV^2/(2*cA)), cV>=0} 
				else 
					/* constant instant accel, real stopping */	
					commitDist := cV^2/(2*cA);
					{cP'=cV, cV'=-cA, t'=1, 
					 t<=ep, cV>=-slowV, cP>=desiredFloor+(cV^2/(2*cA))};
					{cP'=cV, t'=1, 
					 t<=ep, cV=-slowV, cP>=desiredFloor+commitDist};
					{cP'=cV, cV'=cA, t'=1, 
					 t<=ep, cP>=desiredFloor, cP<=desiredFloor+(cV^2/(2*cA)),cV<=0} 
				fi
			))
		
/* ########### Important proofs - stuff we want to prove 
###################################################################*/
/* R2.1b - must be at landing when doors open 
		)*@invariant(dP!=0 -> cP=desiredFloor)\] (dP!=0 -> cP=desiredFloor)
*/
/* R2.1a - desiredFloor should always be a real floor
		)*@invariant(desiredFloor=0|desiredFloor=5|desiredFloor=10|desiredFloor=15)\] 
		 (desiredFloor=0|desiredFloor=5|desiredFloor=10|desiredFloor=15)
*/
/* R2.3 - must be stopped when doors open
		)*@invariant((dP!=0->cV=0) & (cV>0->cP<=desiredFloor))\] (dP!=0 -> cV=0)
*/
/* R2.5 - always within hoistway limits
		)*@invariant(desiredFloor!=0->cP<=desiredFloor 
		             & desiredFloor=0->cP>=desiredFloor) \] 
		 (desiredFloor!=0->(cP<=15&cP>=0) &desiredFloor=0->(cP<=15&cP>=0))
*/
/* extra1
		)*@invariant(pMode!=pIdle->dP>0 & dP>0->cV=0) \] 
		 (pMode!=pIdle->dP>0 & dP>0->cV=0 & pMode!=pIdle->cV=0)
*/
/* extra2*/
		)*@invariant(passH>0 -> pMode!=pIdle) \] (passH>0 -> pMode!=pIdle)



/* ########### stuff to help development 
##########################################################################*/
/*		)*@invariant(pMode!=pIdle->dP>0 & dP>0->cV=0 & pMode!=pIdle->cV=0) \] 
		 (pMode!=pIdle->cV=0)*/
/*		)*@invariant(cV <= slowV) \] (cV<=slowV)*/
/* proved6
		)*@invariant(desiredFloor<=15)\] (desiredFloor<=15)
		)*@invariant(desiredFloor>=0 & desiredFloor<=15)\] 
		 (desiredFloor>=0 & desiredFloor<=15)
*/

/* proved5
		)*@invariant(desiredFloor=0|desiredFloor=5|desiredFloor=10)\] 
		 (desiredFloor=0|desiredFloor=5|desiredFloor=10)
		)*@invariant(desiredFloor=0|desiredFloor=5|desiredFloor=10|desiredFloor=15)\] 
		 (desiredFloor=0|desiredFloor=5|desiredFloor=10|desiredFloor=15)
*/

/*		)*@invariant(desiredFloor!=0->cP<=desiredFloor) \] 
		 (desiredFloor!=0->cP<=desiredFloor) */
/*
		)*@invariant(dMode=dReversal -> (passH>0 | passC>0)) \] 
		 (dMode=dReversal -> (passH>0 | passC>0))
*/
/*
		)*@invariant(dMode=dOpen->dP=1000) \] (dMode=dOpen->dP=1000)
*/
/*
		)*@invariant(dP=0->(dMode=dArrive|dMode=dClose)) \] 
		 (dP=0->(dMode=dArrive|dMode=dClose))
*/
	)
}
