/*
 *	Car must stay on a straight lane.
 * 
 *  Invariant:
 *  - Car drives forward
 *  - Direction vector of car is a unit vector
 *  - Radius of circular trajectory is strictly positive
 *  - Car can stop within lane bounds or choose new curve to stay on lane
 * 
 *  Safety property:
 *  - Car is always on lane  
 * 
 *  Proof see ../../robixproofs/sttt/01_stayonlane.key.proof
 */

\functions{
	R ep;			 		/* time limit for control decisions */
 	R B;					/* maximum braking capability of the robot */
 	R b;					/* minimum braking capability of the robot */
	R A;					/* maximum feasible acceleration -b <= a <= A */
	R Om;					/* max. feasible rotational velocity of car */
	R y_l;					/* lane center position */
	R w_l;					/* lane width */
}
\programVariables{
	R x;		/* robot position: x */
	R y;		/* robot position: y */
	R v;		/* robot translational velocity */
	R a;		/* robot translational acceleration */
	R w;		/* robot rotational velocity */
	R dx; 		/* robot orientation: x */
	R dy; 		/* robot orientation: y */
	R r;		/* radius of curve */
	R t;		/* time */
}

\problem{  
	  v = 0				/* car is stopped initially */
	& r > 0
	& dx^2 + dy^2 = 1
	& y = y_l			/* located at lane center initially */
	& A >= 0
	& B > b
	& b > 0
	& Om >= 0
	& ep > 0
	& w_l > 0	
      -> \[	(	/* brake on current curve or remain stopped */
      			(a := *; ?-B <= a & a <= -b)
      			++(?v = 0; a := 0; w := 0)
      			/* or choose a new safe curve */
				++( /* Inside dynamic window? */
					a := *; ?-B <= a & a <= A;
					
					r := *; ?r > 0; /* car cannot spin on the spot */
					w := *; ?Abs(w) * r = v & -Om <= w & w <= Om;
					
					/* use that curve, if it allows the car to stay on the lane */
					?Abs(y - y_l) + v^2/(2*b) + (A/b + 1) * (A/2 * ep^2 + ep*v) < w_l/2
				);
				t := 0;	
				
				/* dynamics */
				{x' = v * dx, y' = v * dy, dx' = -w * dy, dy' = w * dx, v' = a, w' = a * 1/r,
						t' = 1, t <= ep, v >= 0
				}
				@invariant(
						t >= 0,
						dx^2 + dy^2 = 1
						/* proof hint for manual interaction: overapproximate 2-norm with infinity-norm */
						/*v = v0 + a*t,
						-t * (v - a/2*t) <= y - y0 & y - y0 <= t * (v - a/2*t),
						*/
					)
			)*
			@invariant(v >= 0
				& dx^2+dy^2 = 1
				& r > 0
				& Abs(y - y_l) + v^2/(2*b) < w_l/2
			)
		\] (y_l - w_l/2 < y & y < y_l + w_l/2)
}