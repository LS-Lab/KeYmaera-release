\programVariables {
  R x1, v1, a1, t;						/* car 1 */  
  R xi, vi;								/* incident */
  R vsl, xsl;							/* speed limit */  
  R B, A, D, ep, vmin;					/* system parameters */
}
/**
 * One lane, one car, one incident, one traffic center. 
 * Car needs up to ep time units to react.
 * Car can brake (with min B) and accelerate (with max. A).
 * Incident's position changes towards the vehicle with a maximum known velocity.
 * Checks that there is a speed limit within the alert area [xi - D, xi], and
 * that the car always complies with the speed limit.
 */ 
\problem {
	     vmin > 0
		& v1 >= vmin
		& vi >= 0
		& vsl >= vmin
		& xi - D > x1 + (v1^2 - vmin^2) / (2 * B) * (1 + vi / vmin)	
		& xsl >= x1 + (v1^2 - vsl^2) / (2 * B)
		& A >= 0
		& B > 0		
		& ep > 0
		& D >= 0						
      -> \[	(					
				/* control car */						
				(a1 := -B)					/* braking is always allowed */
				++ (?xsl >= x1 + (v1^2 - vsl^2) / (2 * B) + (A / B + 1) * (A / 2 * ep^2 + ep * v1);		/* outside speed limit */
					a1 := *;												/* accelerate only in a way that car is still able to brake down to the speed limit */
					?-B <= a1 & a1 <= A)
				++ (?x1 >= xsl;						/* within speed limit */
					a1 := *;
					?-B <= a1 & a1 <= (vsl - v1) / ep & a1 <= A)	/* accelerate only so much as not to exceed speed limit */
				++ (?v1 = vmin; a1 := 0);
								
				/* traffic center: keep current or issue new speed limit */
				if (xi - D <= x1 + ((v1^2 - vmin^2) / (2 * B) + (A/B + 1) * (A/2 * ep^2 + ep * v1)) * (1 + vi / vmin) & x1 <= xi) then
					xsl := *; vsl := *;
					/* time to reach xsl with min speed must be smaller than time incident needs to reach xsl */
					/* xsl must be greater than the distance the car needs in the worst case to brake down to vsl */
					?vsl >= vmin & xsl <= xi & xsl <= (xi * vmin + x1 * vi) / (vi + vmin) & xsl >= x1 + (v1^2 - vsl^2) / (2 * B) + (A / B + 1) * (A / 2 * ep^2 + ep * v1)
				else
					(xsl := xsl; vsl := vsl)
					++ (xsl := *; vsl := *; ?vsl >= vmin & xsl >= x1 + (v1^2 - vsl^2) / (2 * B) + (A / B + 1) * (A / 2 * ep^2 + ep * v1))				
				fi;
								
				t := 0;
				/* dynamics */
				{x1' = v1, v1' = a1, xi'=-vi, t' = 1, v1 >= vmin, t <= ep}				
			)*
			@invariant(v1 >= vmin & vsl >= vmin & (x1 + (v1^2 - vsl^2) / (2 * B) <= xsl | v1 <= vsl)
						& (x1 + (v1^2 - vmin^2) / (2 * B) * (1 + vi / vmin) < xi - D | x1 > xi 
							| x1 >= xsl | xsl <= xi & xsl <= (xi * vmin + x1 * vi) / (vi + vmin)
						)
			)			
		\] ((x1 <= xsl & x1 >= xi - D & x1 <= xi -> (xsl <= xi | v1 <= vsl)) & (x1 >= xsl -> v1 <= vsl))			
}
