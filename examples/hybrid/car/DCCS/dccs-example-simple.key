\programVariables {
  R x1, x2, v1, v2, a1, t; 
  R B, A, eps;
}
/**
 * One Lane Two Cars
 * The follow car (car 1) must always have a lower velocity than 
 * the lead car (car 2), which maintains a constant velocity. 
 *
 * @provable(in 2 seconds, 101 Nodes, 9 Branches, 0 User Interactions)
 * @see "Sarah M. Loos, Andre Platzer, and Ligia Nistor. Adaptive cruise control: Hybrid, distributed, and now formally verified. In Michael Butler and Wolfram Schulte, editors, 17th International Symposium on Formal Methods, FM, Limerick, Ireland, Proceedings, volume 6664 of LNCS, pages 42-56. Springer, 2011."
 * 
 * Variable Definitions:
 * x1, x2 position of car 1 and car 2
 * v1, v2 velocity of car 1 and car 2
 * a1     acceleration of car 1
 * A      max acceleration 
 * B      max braking force
 * eps    max time between sensor readings
 * t      time
 */

\problem{
    (x1 < x2 & 
     v1 >= 0 & 
     v2 >= 0 &
     v1 <= v2 &
     B  > 0 & 
     eps > 0 &
     A  > 0 
    )
->
  \[
    (
      if (v1 + A*eps <= v2 ) then
         a1 := A
      else
         if (v1 = 0) then
	   a1 := 0
	 else
	   a1 := -B
         fi
      fi;
      t := 0;
      {x1' = v1, v1' = a1, x2' = v2, t' = 1,  
        v1 >= 0 & t <= eps}
    )*@invariant(v1 <= v2 & x1 < x2 & v1 >= 0)
  \] (x1 < x2)
}
