\settings {
"#Proof-Settings-Config-File
#Mon May 11 23:09:57 CEST 2009
[DLOptions]counterExampleGenerator=Mathematica
[View]FontIndex=2
[DLOptions]termFactoryClass=de.uka.ilkd.key.dl.model.impl.TermFactoryImpl
[HOLLightOptions]ocamlPath=/usr/bin/ocaml
[Libraries]Default=acc.key-false, stringRules.key-false, deprecatedRules.key-false
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[DLOptions]BuiltInArithmeticIneqs=OFF
[ReduceOptions]rlcadpbfvs=DEFAULT
[ReduceOptions]rlcadaproj=DEFAULT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[DecisionProcedure]SmtBenchmarkArchiving=false
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[General]ProofAssistant=false
[ReduceOptions]rlcadprojonly=DEFAULT
[DecisionProcedureForTest]=Cogent
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[ReduceOptions]rlqeqsc=DEFAULT
[ReduceOptions]ReduceSwitch\ rlanuexgcdnormalize=DEFAULT
[ReduceOptions]rlcadbaseonly=DEFAULT
[DLOptions]simplifyAfterReduce=false
[View]HideIntermediateProofsteps=false
[DLOptions]readdQuantifiers=true
[ReduceOptions]rlcadrawformula=DEFAULT
[DLOptions]csdpPath=/usr/bin/csdp
[DLOptions]applyLocalSimplify=false
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[ReduceOptions]reduceBinary=/home/jdq/local/src/reduce-algebra/bin/reduce
[ReduceOptions]quantifierEliminationMethod=RLCAD
[DLOptions]DiffSat=AUTO
[DLOptions]simplifier=Mathematica
[HOLLightOptions]hollightPath=/
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[DLOptions]simplifyAfterODESolve=false
[ReduceOptions]rlall=true
[DLOptions]diffSatTimeout=4000
[DLOptions]linearTimeoutIncreaseFactor=2
[ReduceOptions]rlqesqsc=DEFAULT
[QepcadOptions]qepcadPath=/home/jdq/local/src/qepcad/qesource
[General]SoundNotification=false
[Choice]DefaultChoices=throughout-throughout\:toutOn , transactions-transactions\:transactionsOn , intRules-intRules\:arithmeticSemanticsIgnoringOF , programRules-programRules\:Java , transactionAbort-transactionAbort\:abortOn , nullPointerPolicy-nullPointerPolicy\:nullCheck , javacard-javacard\:jcOff
[ReduceOptions]rlcadextonly=DEFAULT
[Strategy]MaximumNumberOfAutomaticApplications=1000
[ReduceOptions]rlanuexsgnopt=DEFAULT
[ReduceOptions]rlcadpartial=DEFAULT
[General]UseJML=true
[DLOptions]useSOS=false
[MathematicaOptions]useEliminateList=true
[DLOptions]applyGammaRules=NEVER
[View]MaxTooltipLines=40
[General]StupidMode=true
[DLOptions]constantTimeoutIncreaseFactor=0
[QepcadOptions]saclibPath=/home/jdq/local/src/qepcad/saclib2.2.0
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[DLOptions]loopSatTimeout=200000
[DLOptions]odeSolver=Mathematica
[OrbitalOptions]precision=34
[HOLLightOptions]qeMethod=ProofProducing
[ReduceOptions]rlqedfs=DEFAULT
[QepcadOptions]qepcadMemoryLimit=2000000
[ReduceOptions]rlqeheu=DEFAULT
[ReduceOptions]rlanuexpsremseq=DEFAULT
[ReduceOptions]rlcadfulldimonly=DEFAULT
[DecisionProcedure]SmtZipProblemDir=false
[DLOptions]csdpForceInternal=false
[DLOptions]invariantRule=QUANTIFIERS
[General]DnDDirectionSensitive=true
[DecisionProcedure]SmtUseQuantifiers=true
[DLOptions]simplifyBeforeReduce=false
[DLOptions]applyToModality=false
[DLOptions]initialTimeout=2000
[ReduceOptions]rlcadaprojalways=DEFAULT
[DLOptions]useIterativeReduceRule=false
[Choice]Choices=transactions-transactions\:transactionsOn-transactions\:transactionsOff , throughout-throughout\:toutOn-throughout\:toutOff , programRules-programRules\:Java-programRules\:ODL-programRules\:dL , intRules-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF-intRules\:arithmeticSemanticsCheckingOF , transactionAbort-transactionAbort\:abortOn-transactionAbort\:abortOff , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck , javacard-javacard\:jcOff-javacard\:jcOn
[DecisionProcedure]=SIMPLIFY
[DLOptions]percentOfPowersetForIterativeReduce=70
[ReduceOptions]rlcadhongproj=DEFAULT
[MathematicaOptions]memoryConstraint=-1
[ReduceOptions]rlcadtrimtree=DEFAULT
[DLOptions]groebnerBasisCalculator=Groebnerian SOS
[ReduceOptions]rlcadfac=DEFAULT
[Strategy]Timeout=-1
[DLOptions]applyGlobalReduce=true
[OrbitalOptions]representation=big
[SimultaneousUpdateSimplifier]EagerSimplification=true
[Model]Source=1
[HOLLightOptions]harrisonqePath=/
[DLOptions]BuiltInArithmetic=OFF
[View]ShowWholeTaclet=false
[DLOptions]counterexampleTest=ON
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[ReduceOptions]rlcadisoallroots=DEFAULT
[MathematicaOptions]quantifierEliminationMethod=REDUCE
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[ReduceOptions]eliminateFractions=false
[ReduceOptions]rlcadte=DEFAULT
[DLOptions]ignoreAnnotations=true
[DLOptions]sosChecker=Internal SOS
[General]UseOCL=false
[OrbitalOptions]sparsePolynomials=true
[DLOptions]simplifyTimeout=0
[Strategy]ActiveStrategy=DLStrategy
[DLOptions]usePowersetIterativeReduce=true
[DLOptions]quadricTimeoutIncreaseFactor=0
[DLOptions]FOStrategy=IBC
[ReduceOptions]rlqepnf=DEFAULT
[DLOptions]applyLocalReduce=OFF
[DLOptions]quantifierEliminator=Mathematica
"
}

/**
 * Safety lemma for European Train Control System
 * @provable
 */
\functions {
R b;
R A;
R ep;
}

\problem {
\[
  R vdes, SB, mo, t, a, v, z, m, d, do, drive, brake, state ;
    drive := 0 ;
    brake := 1 ;
    state := drive
  \] (     v ^ 2 - d ^ 2 <= 2 * b * (m - z)
         & d >= 0
         & b >  0
         & A >= 0
         & ep >= 0
      -> \[
           ((do := d ;
               mo := m ;
               m := * ;
               d := * ;
               vdes := * ;
               ?d >= 0 & do ^ 2 - d ^ 2 <= 2 * b * (m - mo) & vdes >= 0)
             ++ state := brake
             ++ ((?v <= vdes ;
                 a := * ;
                 ?a >= -b & a <= A)
               ++ (?v >= vdes ;
                 a := * ;
                 ?a < 0 & a >= -b) ;
               SB := ((v ^ 2 - d ^ 2) / (2 * b) + (A / b + 1) * (A / 2 * ep ^ 2 + ep * v)) ;
               if(m - z <= SB | state = brake)
               then
                 a := -b
               fi ;
               t := 0 ;
               {z` = v, v` = a, t` = 1, v >= 0, t <= ep}))*
           \] (z >= m -> v <= d))

}

\proof {
(keyLog "0" (keyUser "jdq" ) (keyVersion "3f5651abe886597f7fcbafbae4ac191637a02b21"))

(branch "dummy ID"
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "assignment_to_update_right" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "assignment_to_update_right" (formula "1"))
(builtin "Update Simplification" (formula "1"))
(rule "assignment_to_update_right" (formula "1"))
(builtin "Update Simplification" (formula "1"))
(rule "imp_right" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "loop_inv_box_quan" (formula "6") (inst "inv=v ^ 2 - d ^ 2 <= 2 * b * (m - z) & d >= 0"))
(branch " Invariant Initially Valid"
   (builtin "Update Simplification" (formula "6"))
   (builtin "Eliminate Universal Quantifiers" (formula "1"))
)
(branch " Use Case"
   (builtin "Update Simplification" (formula "6"))
   (builtin "Eliminate Universal Quantifiers" (formula "1"))
)
(branch " Body Preserves Invariant"
   (builtin "Update Simplification" (formula "6"))
   (rule "all_right" (formula "6") (inst "skC=v_1"))
   (rule "all_right" (formula "6") (inst "skC=d_1"))
   (rule "all_right" (formula "6") (inst "skC=z_1"))
   (rule "all_right" (formula "6") (inst "skC=state_1"))
   (rule "all_right" (formula "6") (inst "skC=m_1"))
   (rule "all_right" (formula "6") (inst "skC=vdes_1"))
   (rule "imp_right" (formula "6"))
   (rule "and_left" (formula "1"))
   (rule "box_choice_right" (formula "8"))
   (branch " Case 1"
      (rule "box_choice_right" (formula "8"))
      (branch " Case 1"
         (rule "modality_split_right" (formula "8"))
         (rule "assignment_to_update_right" (formula "8"))
         (builtin "Update Simplification" (formula "8"))
         (rule "modality_split_right" (formula "8"))
         (rule "assignment_to_update_right" (formula "8"))
         (builtin "Update Simplification" (formula "8"))
         (rule "modality_split_right" (formula "8"))
         (rule "random_ass_box_right" (formula "8"))
         (builtin "Update Simplification" (formula "8"))
         (rule "all_right" (formula "8") (inst "skC=m_2"))
         (rule "modality_split_right" (formula "8"))
         (rule "random_ass_box_right" (formula "8"))
         (builtin "Update Simplification" (formula "8"))
         (rule "all_right" (formula "8") (inst "skC=d_2"))
         (rule "modality_split_right" (formula "8"))
         (rule "random_ass_box_right" (formula "8"))
         (builtin "Update Simplification" (formula "8"))
         (rule "all_right" (formula "8") (inst "skC=vdes_2"))
         (rule "box_quest_right" (formula "8"))
         (builtin "Update Simplification" (formula "1"))
         (builtin "Update Simplification" (formula "9"))
         (builtin "Eliminate Universal Quantifiers" (formula "1"))
      )
      (branch " Case 2"
         (rule "assignment_to_update_right" (formula "8"))
         (builtin "Update Simplification" (formula "8"))
         (builtin "Eliminate Universal Quantifiers" (formula "1"))
      )
   )
   (branch " Case 2"
      (rule "modality_split_right" (formula "8"))
      (rule "box_choice_right" (formula "8"))
      (branch " Case 1"
         (rule "modality_split_right" (formula "8"))
         (rule "box_quest_right" (formula "8"))
         (builtin "Update Simplification" (formula "1"))
         (rule "modality_split_right" (formula "9"))
         (rule "random_ass_box_right" (formula "9"))
         (builtin "Update Simplification" (formula "9"))
         (rule "all_right" (formula "9") (inst "skC=a_1"))
         (rule "box_quest_right" (formula "9"))
         (builtin "Update Simplification" (formula "1"))
         (rule "and_left" (formula "1"))
         (rule "modality_split_right" (formula "11"))
         (rule "assignment_to_update_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "modality_split_right" (formula "11"))
         (rule "if_then_right" (formula "11"))
         (branch " m - z <= SB | state = brake"
            (builtin "Update Simplification" (formula "1"))
            (rule "or_left" (formula "1"))
            (branch "    m_1
 - z_1
<= ((v_1) ^ 2 - (d_1) ^ 2) / (2 * b)
 + (A / b + 1) * (A / 2 * (ep) ^ 2 + ep * v_1)"
               (rule "assignment_to_update_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (rule "modality_split_right" (formula "12"))
               (rule "assignment_to_update_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (rule "ODESolve_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (builtin "Eliminate Universal Quantifiers" (formula "1"))
            )
            (branch " state_1 = 1"
               (rule "assignment_to_update_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (rule "modality_split_right" (formula "12"))
               (rule "assignment_to_update_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (rule "ODESolve_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (builtin "Eliminate Universal Quantifiers" (formula "1"))
            )
         )
         (branch " ! m - z <= SB | state = brake"
            (builtin "Update Simplification" (formula "1"))
            (rule "not_left" (formula "1"))
            (rule "or_right" (formula "11"))
            (rule "modality_split_right" (formula "13"))
            (rule "assignment_to_update_right" (formula "13"))
            (builtin "Update Simplification" (formula "13"))
            (rule "ODESolve_right" (formula "13"))
            (builtin "Update Simplification" (formula "13"))
            (rule "add_zero_right" (formula "13") (term "0,1,1,0,0,1,0"))
            (rule "all_right" (formula "13") (inst "skC=t2_0"))
            (rule "imp_right" (formula "13"))
            (rule "imp_right" (formula "14"))
            (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "7"))
            (rule "concrete_and_3" (formula "15"))
            (builtin "Eliminate Universal Quantifiers" (formula "3"))
         )
      )
      (branch " Case 2"
         (rule "modality_split_right" (formula "8"))
         (rule "box_quest_right" (formula "8"))
         (builtin "Update Simplification" (formula "1"))
         (rule "modality_split_right" (formula "9"))
         (rule "random_ass_box_right" (formula "9"))
         (builtin "Update Simplification" (formula "9"))
         (rule "all_right" (formula "9") (inst "skC=a_3"))
         (rule "box_quest_right" (formula "9"))
         (builtin "Update Simplification" (formula "1"))
         (rule "and_left" (formula "1"))
         (rule "modality_split_right" (formula "11"))
         (rule "assignment_to_update_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "modality_split_right" (formula "11"))
         (rule "if_then_right" (formula "11"))
         (branch " m - z <= SB | state = brake"
            (builtin "Update Simplification" (formula "1"))
            (rule "or_left" (formula "1"))
            (branch "    m_1
 - z_1
<= ((v_1) ^ 2 - (d_1) ^ 2) / (2 * b)
 + (A / b + 1) * (A / 2 * (ep) ^ 2 + ep * v_1)"
               (rule "assignment_to_update_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (rule "modality_split_right" (formula "12"))
               (rule "assignment_to_update_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (rule "ODESolve_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (builtin "Eliminate Universal Quantifiers" (formula "1"))
            )
            (branch " state_1 = 1"
               (rule "assignment_to_update_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (rule "modality_split_right" (formula "12"))
               (rule "assignment_to_update_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (rule "ODESolve_right" (formula "12"))
               (builtin "Update Simplification" (formula "12"))
               (builtin "Eliminate Universal Quantifiers" (formula "1"))
            )
         )
         (branch " ! m - z <= SB | state = brake"
            (builtin "Update Simplification" (formula "1"))
            (rule "not_left" (formula "1"))
            (rule "or_right" (formula "11"))
            (rule "modality_split_right" (formula "13"))
            (rule "assignment_to_update_right" (formula "13"))
            (builtin "Update Simplification" (formula "13"))
            (rule "ODESolve_right" (formula "13"))
            (builtin "Update Simplification" (formula "13"))
            (rule "add_zero_right" (formula "13") (term "0,1,1,0,0,1,0"))
            (rule "all_right" (formula "13") (inst "skC=t5_0"))
            (rule "imp_right" (formula "13"))
            (rule "imp_right" (formula "14"))
            (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "7"))
            (rule "concrete_and_3" (formula "15"))
            (builtin "Eliminate Universal Quantifiers" (formula "3"))
         )
      )
   )
)
)

}
