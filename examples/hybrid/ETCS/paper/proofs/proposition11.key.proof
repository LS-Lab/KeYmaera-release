/**
 * Safety lemma for European Train Control System
 * @provable using interactions enforcing candidate use and hiding superfluous SB constraint in diffind step.
 */
\functions {
R b;
R A;
R ep;
R l;
R u;
}

\problem {
\[
  R vdes, SB, mo, t, a, v, z, m, d, do, drive, brake, state ;
    drive := 0 ;
    brake := 1 ;
    state := drive
  \] (     v ^ 2 - d ^ 2 <= 2 * (b - u) * (m - z)
         & d >= 0
         & b >  u
         & u >= 0
         & l >= 0
         & A >= 0
         & ep >= 0
      -> \[
           (((do := d ;
               mo := m ;
               m := * ;
               d := * ;
               vdes := * ;
               ?d >= 0 & do ^ 2 - d ^ 2 <= 2 * (b - u) * (m - mo) & vdes >= 0)
             ++ state := brake
			 )
             ++ ((?v <= vdes ;
                 a := * ;
                 ?a >= -b & a <= A)
               ++ (?v >= vdes ;
                 a := * ;
                 ?a < 0 & a >= -b) ;
               SB := ((v ^ 2 - d ^ 2) / (2 * (b - u)) + ((A + u) / (b - u) + 1) * ((A + u) / 2 * ep ^ 2 + ep * v)) ;
               if(m - z <= SB | state = brake)
               then
                 a := -b
               fi ;
               t := 0 ;
               {z` = v, a - l <= v`, v` <= a + u, t` = 1, v >= 0, t <= ep}))*
           \] (z >= m -> v <= d))

}

\proof {
(keyLog "0" (keyUser "jdq" ) (keyVersion "34dc7e7d2e557c30f337a7b8ca73087d0e5a558f"))

(branch "dummy ID"
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "assignment_to_update_right" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "assignment_to_update_right" (formula "1"))
(builtin "Update Simplification" (formula "1"))
(rule "assignment_to_update_right" (formula "1"))
(builtin "Update Simplification" (formula "1"))
(rule "imp_right" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "loop_inv_box_quan" (formula "8") (inst "inv=v ^ 2 - d ^ 2 <= 2 * (b - u) * (m - z) & d >= 0"))
(branch " Invariant Initially Valid"
   (builtin "Update Simplification" (formula "8"))
   (builtin "Eliminate Universal Quantifiers" (formula "1"))
)
(branch " Use Case"
   (builtin "Update Simplification" (formula "8"))
   (builtin "Eliminate Universal Quantifiers" (formula "1"))
)
(branch " Body Preserves Invariant"
   (builtin "Update Simplification" (formula "8"))
   (rule "all_right" (formula "8") (inst "skC=v_1"))
   (rule "all_right" (formula "8") (inst "skC=d_1"))
   (rule "all_right" (formula "8") (inst "skC=z_1"))
   (rule "all_right" (formula "8") (inst "skC=state_1"))
   (rule "all_right" (formula "8") (inst "skC=m_1"))
   (rule "all_right" (formula "8") (inst "skC=vdes_1"))
   (rule "imp_right" (formula "8"))
   (rule "and_left" (formula "1"))
   (rule "box_choice_right" (formula "10"))
   (branch " Case 1"
      (rule "box_choice_right" (formula "10"))
      (branch " Case 1"
         (rule "modality_split_right" (formula "10"))
         (rule "assignment_to_update_right" (formula "10"))
         (builtin "Update Simplification" (formula "10"))
         (rule "modality_split_right" (formula "10"))
         (rule "assignment_to_update_right" (formula "10"))
         (builtin "Update Simplification" (formula "10"))
         (rule "modality_split_right" (formula "10"))
         (rule "random_ass_box_right" (formula "10"))
         (builtin "Update Simplification" (formula "10"))
         (rule "all_right" (formula "10") (inst "skC=m_2"))
         (rule "modality_split_right" (formula "10"))
         (rule "random_ass_box_right" (formula "10"))
         (builtin "Update Simplification" (formula "10"))
         (rule "all_right" (formula "10") (inst "skC=d_2"))
         (rule "modality_split_right" (formula "10"))
         (rule "random_ass_box_right" (formula "10"))
         (builtin "Update Simplification" (formula "10"))
         (rule "all_right" (formula "10") (inst "skC=vdes_2"))
         (rule "box_quest_right" (formula "10"))
         (builtin "Update Simplification" (formula "1"))
         (builtin "Update Simplification" (formula "11"))
         (builtin "Eliminate Universal Quantifiers" (formula "1"))
      )
      (branch " Case 2"
         (rule "assignment_to_update_right" (formula "10"))
         (builtin "Update Simplification" (formula "10"))
         (builtin "Eliminate Universal Quantifiers" (formula "1"))
      )
   )
   (branch " Case 2"
      (rule "modality_split_right" (formula "10"))
      (rule "box_choice_right" (formula "10"))
      (branch " Case 1"
         (rule "modality_split_right" (formula "10"))
         (rule "box_quest_right" (formula "10"))
         (builtin "Update Simplification" (formula "1"))
         (rule "modality_split_right" (formula "11"))
         (rule "random_ass_box_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "all_right" (formula "11") (inst "skC=a_1"))
         (rule "box_quest_right" (formula "11"))
         (builtin "Update Simplification" (formula "1"))
         (rule "and_left" (formula "1"))
         (rule "modality_split_right" (formula "13"))
         (rule "assignment_to_update_right" (formula "13"))
         (builtin "Update Simplification" (formula "13"))
         (rule "modality_split_right" (formula "13"))
         (rule "if_then_right" (formula "13"))
         (branch " m - z <= SB | state = brake"
            (builtin "Update Simplification" (formula "1"))
            (rule "or_left" (formula "1"))
            (branch "    m_1
 - z_1
<= ((v_1) ^ 2 - (d_1) ^ 2) / (2 * (b - u))
 +   ((A + u) / (b - u) + 1)
   * ((A + u) / 2 * (ep) ^ 2 + ep * v_1)"
               (rule "assignment_to_update_right" (formula "14"))
               (builtin "Update Simplification" (formula "14"))
               (rule "modality_split_right" (formula "14"))
               (rule "assignment_to_update_right" (formula "14"))
               (builtin "Update Simplification" (formula "14"))
               (rule "ODEINEQ_right" (formula "14"))
               (rule "diffind" (formula "14"))
               (branch " Invariant Initially Valid"
                  (builtin "Update Simplification" (formula "1"))
                  (builtin "Update Simplification" (formula "15"))
                  (builtin "Eliminate Universal Quantifiers" (formula "1"))
               )
               (branch " ODE Preserves Invariant"
                  (builtin "Update Simplification" (formula "14"))
                  (builtin "Eliminate Universal Quantifiers" (formula "1"))
               )
            )
            (branch " state_1 = 1"
               (rule "assignment_to_update_right" (formula "14"))
               (builtin "Update Simplification" (formula "14"))
               (rule "modality_split_right" (formula "14"))
               (rule "assignment_to_update_right" (formula "14"))
               (builtin "Update Simplification" (formula "14"))
               (rule "ODEINEQ_right" (formula "14"))
               (rule "diffind" (formula "14"))
               (branch " Invariant Initially Valid"
                  (builtin "Update Simplification" (formula "15"))
                  (builtin "Update Simplification" (formula "1"))
                  (builtin "Eliminate Universal Quantifiers" (formula "1"))
               )
               (branch " ODE Preserves Invariant"
                  (builtin "Update Simplification" (formula "14"))
                  (builtin "Eliminate Universal Quantifiers" (formula "1"))
               )
            )
         )
         (branch " ! m - z <= SB | state = brake"
            (builtin "Update Simplification" (formula "1"))
            (rule "not_left" (formula "1"))
            (rule "or_right" (formula "13"))
            (rule "modality_split_right" (formula "15"))
            (rule "assignment_to_update_right" (formula "15"))
            (builtin "Update Simplification" (formula "15"))
            (rule "ODEINEQ_right" (formula "15"))
            (rule "diffstrengthen" (formula "15") (inst "augment=   m
 - z
>= (v ^ 2 - d ^ 2) / (2 * (b - u))
 +   ((A + u) / (b - u) + 1)
   * ((A + u) / 2 * (ep - t) ^ 2 + (ep - t) * v)") (userinteraction))
            (branch " Invariant Valid"
               (rule "diffind" (formula "15"))
               (branch " Invariant Initially Valid"
                  (builtin "Update Simplification" (formula "1"))
                  (builtin "Update Simplification" (formula "16"))
                  (builtin "Eliminate Universal Quantifiers" (formula "1"))
               )
               (branch " ODE Preserves Invariant"
                  (builtin "Update Simplification" (formula "15"))
                  (rule "eval_literals" (formula "15") (term "0,0,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,1,1,0,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "1,1,0,1,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "1,0,1,0,0,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,0,1,0,1,0,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,1,0,1,0,1,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,1,1,0,0,1,0,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,1,1,0,1,0,1,0,1,1,0,0,0,0"))
                  (rule "all_right" (formula "15") (inst "skC=t_2"))
                  (rule "all_right" (formula "15") (inst "skC=v_3"))
                  (rule "all_right" (formula "15") (inst "skC=z_3"))
                  (rule "all_right" (formula "15") (inst "skC=dv_70"))
                  (rule "imp_right" (formula "15"))
                  (rule "and_left" (formula "1"))
                  (rule "and_left" (formula "1"))
                  (rule "and_left" (formula "1"))
                  (rule "hide_right" (formula "17") (userinteraction))
                  (builtin "Eliminate Universal Quantifiers" (formula "18"))
               )
            )
            (branch " Augmented Invariant"
               (rule "diffweaken" (formula "15"))
               (builtin "Update Simplification" (formula "15"))
               (rule "all_right" (formula "15") (inst "skC=t_4"))
               (rule "all_right" (formula "15") (inst "skC=v_5"))
               (rule "all_right" (formula "15") (inst "skC=z_5"))
               (rule "imp_right" (formula "15"))
               (rule "and_left" (formula "1"))
               (rule "and_left" (formula "1"))
               (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "8"))
               (rule "concrete_and_3" (formula "18"))
               (builtin "Eliminate Universal Quantifiers" (formula "4"))
            )
         )
      )
      (branch " Case 2"
         (rule "modality_split_right" (formula "10"))
         (rule "box_quest_right" (formula "10"))
         (builtin "Update Simplification" (formula "1"))
         (rule "modality_split_right" (formula "11"))
         (rule "random_ass_box_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "all_right" (formula "11") (inst "skC=a_3"))
         (rule "box_quest_right" (formula "11"))
         (builtin "Update Simplification" (formula "1"))
         (rule "and_left" (formula "1"))
         (rule "modality_split_right" (formula "13"))
         (rule "assignment_to_update_right" (formula "13"))
         (builtin "Update Simplification" (formula "13"))
         (rule "modality_split_right" (formula "13"))
         (rule "if_then_right" (formula "13"))
         (branch " m - z <= SB | state = brake"
            (builtin "Update Simplification" (formula "1"))
            (rule "or_left" (formula "1"))
            (branch "    m_1
 - z_1
<= ((v_1) ^ 2 - (d_1) ^ 2) / (2 * (b - u))
 +   ((A + u) / (b - u) + 1)
   * ((A + u) / 2 * (ep) ^ 2 + ep * v_1)"
               (rule "assignment_to_update_right" (formula "14"))
               (builtin "Update Simplification" (formula "14"))
               (rule "modality_split_right" (formula "14"))
               (rule "assignment_to_update_right" (formula "14"))
               (builtin "Update Simplification" (formula "14"))
               (rule "ODEINEQ_right" (formula "14"))
               (rule "diffind" (formula "14"))
               (branch " Invariant Initially Valid"
                  (builtin "Update Simplification" (formula "1"))
                  (builtin "Update Simplification" (formula "15"))
                  (builtin "Eliminate Universal Quantifiers" (formula "1"))
               )
               (branch " ODE Preserves Invariant"
                  (builtin "Update Simplification" (formula "14"))
                  (builtin "Eliminate Universal Quantifiers" (formula "1"))
               )
            )
            (branch " state_1 = 1"
               (rule "assignment_to_update_right" (formula "14"))
               (builtin "Update Simplification" (formula "14"))
               (rule "modality_split_right" (formula "14"))
               (rule "assignment_to_update_right" (formula "14"))
               (builtin "Update Simplification" (formula "14"))
               (rule "ODEINEQ_right" (formula "14"))
               (rule "diffind" (formula "14"))
               (branch " Invariant Initially Valid"
                  (builtin "Update Simplification" (formula "15"))
                  (builtin "Update Simplification" (formula "1"))
                  (builtin "Eliminate Universal Quantifiers" (formula "1"))
               )
               (branch " ODE Preserves Invariant"
                  (builtin "Update Simplification" (formula "14"))
                  (builtin "Eliminate Universal Quantifiers" (formula "1"))
               )
            )
         )
         (branch " ! m - z <= SB | state = brake"
            (builtin "Update Simplification" (formula "1"))
            (rule "not_left" (formula "1"))
            (rule "or_right" (formula "13"))
            (rule "modality_split_right" (formula "15"))
            (rule "assignment_to_update_right" (formula "15"))
            (builtin "Update Simplification" (formula "15"))
            (rule "ODEINEQ_right" (formula "15"))
            (rule "diffstrengthen" (formula "15") (inst "augment=   m
 - z
>= (v ^ 2 - d ^ 2) / (2 * (b - u))
 +   ((A + u) / (b - u) + 1)
   * ((A + u) / 2 * (ep - t) ^ 2 + (ep - t) * v)") (userinteraction))
            (branch " Invariant Valid"
               (rule "diffind" (formula "15"))
               (branch " Invariant Initially Valid"
                  (builtin "Update Simplification" (formula "1"))
                  (builtin "Update Simplification" (formula "16"))
                  (builtin "Eliminate Universal Quantifiers" (formula "1"))
               )
               (branch " ODE Preserves Invariant"
                  (builtin "Update Simplification" (formula "15"))
                  (rule "eval_literals" (formula "15") (term "0,0,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,1,1,0,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "1,1,0,1,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "1,0,1,0,0,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,0,1,0,1,0,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,1,0,1,0,1,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,1,1,0,0,1,0,1,1,0,0,0,0"))
                  (rule "eval_literals" (formula "15") (term "0,1,1,0,1,0,1,0,1,1,0,0,0,0"))
                  (rule "all_right" (formula "15") (inst "skC=t_1"))
                  (rule "all_right" (formula "15") (inst "skC=v_2"))
                  (rule "all_right" (formula "15") (inst "skC=z_2"))
                  (rule "all_right" (formula "15") (inst "skC=dv_68"))
                  (rule "imp_right" (formula "15"))
                  (rule "and_left" (formula "1"))
                  (rule "and_left" (formula "1"))
                  (rule "and_left" (formula "1"))
                  (rule "hide_right" (formula "17") (userinteraction))
                  (builtin "Eliminate Universal Quantifiers" (formula "18"))
               )
            )
            (branch " Augmented Invariant"
               (rule "diffweaken" (formula "15"))
               (builtin "Update Simplification" (formula "15"))
               (rule "all_right" (formula "15") (inst "skC=t_3"))
               (rule "all_right" (formula "15") (inst "skC=v_4"))
               (rule "all_right" (formula "15") (inst "skC=z_4"))
               (rule "imp_right" (formula "15"))
               (rule "and_left" (formula "1"))
               (rule "and_left" (formula "1"))
               (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "8"))
               (rule "concrete_and_3" (formula "18"))
               (builtin "Eliminate Universal Quantifiers" (formula "4"))
            )
         )
      )
   )
)
)

}
