\settings {
"#Proof-Settings-Config-File
#Tue Sep 04 15:24:19 CEST 2007
[DLOptions]callReduce=true
[DecisionProcedure]SmtBenchmarkArchiving=false
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NONE
[DLOptions]linearTimeoutIncreaseFactor=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[Model]Source=1
[DLOptions]useTimeoutStrategy=true
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[MathematicaOptions]useEliminateList=true
[Choice]DefaultChoices=transactions-transactions\:transactionsOn , programRules-programRules\:Java , throughout-throughout\:toutOn , transactionAbort-transactionAbort\:abortOn , intRules-intRules\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\:nullCheck
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[General]SuggestiveVarNames=false
[DLOptions]quantifierEliminator=Mathematica
[DLOptions]normalizeEquations=true
[View]HideIntermediateProofsteps=false
[DecisionProcedureForTest]=SIMPLIFY
[SimultaneousUpdateSimplifier]EagerSimplification=false
[DecisionProcedure]=SIMPLIFY
[Strategy]ActiveStrategy=DLStrategy
[View]ShowWholeTaclet=false
[DLOptions]splitBeyondFO=false
[MathematicaOptions]quantifierEliminationMethod=REDUCE
[Libraries]Default=acc.key-false, stringRules.key-false, deprecatedRules.key-false
[DLOptions]applyGammaRules=NEVER
[General]OuterRenaming=false
[DLOptions]counterExampleGenerator=Mathematica
[DLOptions]simplifyBeforeReduce=true
[OrbitalOptions]representation=big
[DecisionProcedure]SmtZipProblemDir=false
[DLOptions]readdQuantifiers=true
[OrbitalOptions]precision=0
[General]StupidMode=true
[DLOptions]initialTimeout=2000
[DLOptions]quadricTimeoutIncreaseFactor=0
[General]DnDDirectionSensitive=true
[General]ProofAssistant=false
[View]FontIndex=2
[DLOptions]simplfier=Mathematica
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[DLOptions]odeSolver=Mathematica
[DecisionProcedure]SmtUseQuantifiers=true
[DLOptions]applyToModality=false
[DLOptions]constantTimeoutIncreaseFactor=0
[Strategy]MaximumNumberOfAutomaticApplications=1000
[View]MaxTooltipLines=40
[General]SoundNotification=true
[DLOptions]simplifyAfterReduce=true
[Choice]Choices=transactions-transactions\:transactionsOn-transactions\:transactionsOff , programRules-programRules\:ODL-programRules\:Java-programRules\:dL , transactionAbort-transactionAbort\:abortOff-transactionAbort\:abortOn , throughout-throughout\:toutOff-throughout\:toutOn , intRules-intRules\:arithmeticSemanticsCheckingOF-intRules\:javaSemantics-intRules\:arithmeticSemanticsIgnoringOF , nullPointerPolicy-nullPointerPolicy\:noNullCheck-nullPointerPolicy\:nullCheck
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[DLOptions]useFindInstanceTest=false
"
}

\sorts{
R;
}

\functions {
R b;
R amax;
R ep;
}

\problem {
\[
  R vdes ;
     R SB ;
     R mo ;
     R t ;
     R a ;
     R v ;
     R z ;
     R m ;
     R d ;
     R do ;
     R drive ;
     R brake ;
     R state ;
     drive := 0 ;
     brake := 1 ;
     state := drive
  \] (     v ^ 2 - d ^ 2 <= 2 * b * (m - z)
         & v >= 0
         & ep >  0
         & b >  0
         & amax >  0
         & d >= 0
      -> \<
           SB := *
           \> \[
                if(state = brake) 
                then 
                a := -b
                 else 
                (?v <= vdes ;
                       a := * ;
                       ?a >= 0 & a <= amax) 
                    ++ (?v >= vdes ;
                       a := * ;
                       ?a <= 0 & a >= -b)
                fi ;
                   if(m - z <= SB) 
                then 
                a := -b
                fi ;
                   t := 0 ;
                   {z` = v, v` = a, t` = 1, v >= 0 & t <= ep}
                \] (z >= m -> v <= d))

}

\proof {
(keyLog "0" (keyUser "jdq" ) (keyVersion "queselHybrid.158"))

(branch "dummy ID"
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "eliminate_variable_decl" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "assignment_to_update_right" (formula "1"))
(rule "modality_split_right" (formula "1"))
(rule "assignment_to_update_right" (formula "1"))
(builtin "Update Simplification" (formula "1"))
(rule "assignment_to_update_right" (formula "1"))
(builtin "Update Simplification" (formula "1"))
(rule "imp_right" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "and_left" (formula "1"))
(rule "less_equal_left" (formula "1"))
(rule "random_ass_dia_right" (formula "7"))
(builtin "Update Simplification" (formula "7"))
(rule "ex_right" (formula "7") (inst "_NAME_MV_q=SB_0_0") (userinteraction))
(rule "assignment_to_update_right" (formula "7"))
(builtin "Update Simplification" (formula "7"))
(rule "modality_split_right" (formula "7"))
(rule "if_then_else_right" (formula "7"))
(branch " state = brake"
   (builtin "Update Simplification" (formula "1"))
   (rule "simplify_form_left" (formula "1"))
   (rule "close_by_false" (formula "1"))
)
(branch " ! state = brake"
   (builtin "Update Simplification" (formula "1"))
   (rule "not_left" (formula "1"))
   (rule "simplify_form_right" (formula "7"))
   (rule "false_right" (formula "7"))
   (rule "box_choice_right" (formula "7"))
   (branch " Case 1"
      (rule "modality_split_right" (formula "7"))
      (rule "box_quest_right" (formula "7"))
      (builtin "Update Simplification" (formula "1"))
      (rule "less_equal_left" (formula "1"))
      (rule "modality_split_right" (formula "8"))
      (rule "random_ass_box_right" (formula "8"))
      (builtin "Update Simplification" (formula "8"))
      (rule "all_right" (formula "8") (inst "skC=a_0_0"))
      (rule "assignment_to_update_right" (formula "8"))
      (builtin "Update Simplification" (formula "8"))
      (rule "box_quest_right" (formula "8"))
      (builtin "Update Simplification" (formula "1"))
      (rule "and_left" (formula "1"))
      (rule "less_equal_left" (formula "2"))
      (rule "modality_split_right" (formula "10"))
      (rule "if_then_right" (formula "10"))
      (branch " m - z <= SB"
         (builtin "Update Simplification" (formula "1"))
         (rule "less_equal_left" (formula "1"))
         (rule "assignment_to_update_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "modality_split_right" (formula "11"))
         (rule "assignment_to_update_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "ODESolve_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "apply_subst" (formula "11") (term "1,0,0,1,0"))
         (rule "all_right" (formula "11") (inst "skC=t0_0"))
         (rule "imp_right" (formula "11"))
         (rule "imp_right" (formula "12"))
         (rule "imp_right" (formula "13"))
         (rule "less_equal_right" (formula "14"))
         (rule "reduce_form_left" (formula "3"))
         (rule "simplify_form_left" (formula "3"))
         (rule "or_left" (formula "3"))
         (branch "   v >= 0
& (  t0_0 = 0 & ep >= 0
   | t0_0 >  0
   & ep >= t0_0
   & b <= t0_0 ^ -1 * v)"
            (rule "and_left" (formula "3"))
            (rule "or_left" (formula "3"))
            (branch " t0_0 = 0 & ep >= 0"
               (builtin "Eliminate Universal Quantifiers" (formula "3"))
            )
            (branch " t0_0 >  0 & ep >= t0_0 & b <= t0_0 ^ -1 * v"
               (rule "and_left" (formula "3"))
               (rule "and_left" (formula "3"))
               (rule "less_equal_left" (formula "5"))
               (rule "simplify_greater_greater_equal_left" (formula "6") (ifseqformula "3"))
               (rule "hide_left" (formula "6") (userinteraction))
               (rule "hide_left" (formula "6") (userinteraction))
               (rule "hide_left" (formula "6") (userinteraction))
               (builtin "Eliminate Universal Quantifiers")
            )
         )
         (branch " t0_0 <  0"
            (rule "hide_left" (formula "5") (userinteraction))
            (rule "hide_left" (formula "5") (userinteraction))
            (rule "hide_left" (formula "5") (userinteraction))
            (builtin "Eliminate Universal Quantifiers")
         )
      )
      (branch " ! m - z <= SB"
         (builtin "Update Simplification" (formula "1"))
         (rule "not_left" (formula "1"))
         (rule "less_equal_right" (formula "10"))
         (rule "modality_split_right" (formula "11"))
         (rule "assignment_to_update_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "ODESolve_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "apply_subst" (formula "11") (term "1,0,0,1,0"))
         (rule "all_right" (formula "11") (inst "skC=t3_0"))
         (rule "imp_right" (formula "11"))
         (rule "imp_right" (formula "12"))
         (rule "imp_right" (formula "13"))
         (rule "less_equal_right" (formula "14"))
         (rule "reduce_form_left" (formula "3"))
         (rule "simplify_form_left" (formula "3"))
         (rule "or_left" (formula "3"))
         (branch "   v >= 0
& (  t3_0(SB_0_0) = 0 & ep >= 0
   | t3_0(SB_0_0) >  0
   & ep >= t3_0(SB_0_0)
   & a_0_0(SB_0_0) + v * t3_0(SB_0_0) ^ -1 >= 0)"
            (rule "and_left" (formula "3"))
            (rule "or_left" (formula "3"))
            (branch " t3_0(SB_0_0) = 0 & ep >= 0"
               (rule "and_left" (formula "3"))
               (rule "simplify_greater_greater_equal_left" (formula "4") (ifseqformula "12"))
               (builtin "Eliminate Universal Quantifiers" (formula "14"))
            )
            (branch "   t3_0(SB_0_0) >  0
& ep >= t3_0(SB_0_0)
& a_0_0(SB_0_0) + v * t3_0(SB_0_0) ^ -1 >= 0"
               (rule "and_left" (formula "3"))
               (rule "and_left" (formula "3"))
               (rule "simplify_greater_greater_equal_left" (formula "6") (ifseqformula "3"))
               (opengoal "\\[   R vdes ;      R SB ;      R mo ;      R t ;      R a ;      R v ;      R z ;      R m ;      R d ;      R do ;      R drive ;      R brake ;      R state ;      drive := 0 ;      brake := 1 ;      state := drive   \\] (     v ^ 2 - d ^ 2 <= 2 * b * (m - z)          & v >= 0          & ep >  0          & b >  0          & amax >  0          & d >= 0       -> \\<            SB := *            \\> \\[                 if(state = brake)                  then                  a := -b                  else                  (?v <= vdes ;                        a := * ;                        ?a >= 0 & a <= amax)                      ++ (?v >= vdes ;                        a := * ;                        ?a <= 0 & a >= -b)                 fi ;                    if(m - z <= SB)                  then                  a := -b                 fi ;                    t := 0 ;                    {z` = v, v` = a, t` = 1, v >= 0 & t <= ep}                 \\] (z >= m -> v <= d)) ")
            )
         )
         (branch " t3_0(SB_0_0) <  0"
            (builtin "Eliminate Universal Quantifiers" (formula "3"))
         )
      )
   )
   (branch " Case 2"
      (rule "modality_split_right" (formula "7"))
      (rule "box_quest_right" (formula "7"))
      (builtin "Update Simplification" (formula "1"))
      (rule "modality_split_right" (formula "8"))
      (rule "random_ass_box_right" (formula "8"))
      (builtin "Update Simplification" (formula "8"))
      (rule "all_right" (formula "8") (inst "skC=a_1_0"))
      (rule "assignment_to_update_right" (formula "8"))
      (builtin "Update Simplification" (formula "8"))
      (rule "box_quest_right" (formula "8"))
      (builtin "Update Simplification" (formula "1"))
      (rule "and_left" (formula "1"))
      (rule "less_equal_left" (formula "1"))
      (rule "modality_split_right" (formula "10"))
      (rule "if_then_right" (formula "10"))
      (branch " m - z <= SB"
         (builtin "Update Simplification" (formula "1"))
         (rule "less_equal_left" (formula "1"))
         (rule "assignment_to_update_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "modality_split_right" (formula "11"))
         (rule "assignment_to_update_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "ODESolve_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "apply_subst" (formula "11") (term "1,0,0,1,0"))
         (rule "all_right" (formula "11") (inst "skC=t1_0"))
         (rule "imp_right" (formula "11"))
         (rule "imp_right" (formula "12"))
         (rule "imp_right" (formula "13"))
         (rule "less_equal_right" (formula "14"))
         (rule "reduce_form_left" (formula "3"))
         (rule "simplify_form_left" (formula "3"))
         (rule "or_left" (formula "3"))
         (branch "   v >= 0
& (  t1_0 = 0 & ep >= 0
   | t1_0 >  0
   & ep >= t1_0
   & b <= t1_0 ^ -1 * v)"
            (rule "and_left" (formula "3"))
            (rule "or_left" (formula "3"))
            (branch " t1_0 = 0 & ep >= 0"
               (rule "replace_known_left" (formula "5") (ifseqformula "5") (userinteraction))
               (rule "hide_left" (formula "6") (userinteraction))
               (rule "hide_left" (formula "6") (userinteraction))
               (rule "true_left" (formula "5"))
               (rule "and_left" (formula "3"))
               (rule "simplify_greater_greater_equal_left" (formula "4") (ifseqformula "9"))
               (builtin "Eliminate Universal Quantifiers" (formula "11"))
            )
            (branch " t1_0 >  0 & ep >= t1_0 & b <= t1_0 ^ -1 * v"
               (rule "hide_left" (formula "6") (userinteraction))
               (rule "hide_left" (formula "6") (userinteraction))
               (rule "hide_left" (formula "5") (userinteraction))
               (rule "and_left" (formula "3"))
               (rule "and_left" (formula "3"))
               (rule "less_equal_left" (formula "5"))
               (rule "simplify_greater_greater_equal_left" (formula "6") (ifseqformula "3"))
               (builtin "Eliminate Universal Quantifiers" (formula "12"))
            )
         )
         (branch " t1_0 <  0"
            (rule "simplify_form_ass_left" (formula "3") (ifseqformula "4") (userinteraction))
            (rule "close_by_false" (formula "3") (userinteraction))
         )
      )
      (branch " ! m - z <= SB"
         (builtin "Update Simplification" (formula "1"))
         (rule "not_left" (formula "1"))
         (rule "less_equal_right" (formula "10"))
         (rule "modality_split_right" (formula "11"))
         (rule "assignment_to_update_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "ODESolve_right" (formula "11"))
         (builtin "Update Simplification" (formula "11"))
         (rule "apply_subst" (formula "11") (term "1,0,0,1,0"))
         (rule "all_right" (formula "11") (inst "skC=t2_0"))
         (rule "imp_right" (formula "11"))
         (rule "imp_right" (formula "12"))
         (rule "imp_right" (formula "13"))
         (rule "less_equal_right" (formula "14"))
         (rule "reduce_form_left" (formula "3"))
         (rule "simplify_form_left" (formula "3"))
         (rule "or_left" (formula "3"))
         (branch "   v >= 0
& (  t2_0(SB_0_0) = 0 & ep >= 0
   | t2_0(SB_0_0) >  0
   & ep >= t2_0(SB_0_0)
   & a_1_0(SB_0_0) + v * t2_0(SB_0_0) ^ -1 >= 0)"
            (rule "and_left" (formula "3"))
            (rule "or_left" (formula "3"))
            (branch " t2_0(SB_0_0) = 0 & ep >= 0"
               (rule "and_left" (formula "3") (userinteraction))
               (rule "simplify_form_ass_left" (formula "1") (ifseqformula "3") (userinteraction))
               (rule "simplify_form_ass_left" (formula "2") (ifseqformula "3") (userinteraction))
               (rule "simplify_greater_greater_equal_left" (formula "4") (ifseqformula "12"))
               (builtin "Eliminate Universal Quantifiers" (formula "14"))
            )
            (branch "   t2_0(SB_0_0) >  0
& ep >= t2_0(SB_0_0)
& a_1_0(SB_0_0) + v * t2_0(SB_0_0) ^ -1 >= 0"
               (opengoal "\\[   R vdes ;      R SB ;      R mo ;      R t ;      R a ;      R v ;      R z ;      R m ;      R d ;      R do ;      R drive ;      R brake ;      R state ;      drive := 0 ;      brake := 1 ;      state := drive   \\] (     v ^ 2 - d ^ 2 <= 2 * b * (m - z)          & v >= 0          & ep >  0          & b >  0          & amax >  0          & d >= 0       -> \\<            SB := *            \\> \\[                 if(state = brake)                  then                  a := -b                  else                  (?v <= vdes ;                        a := * ;                        ?a >= 0 & a <= amax)                      ++ (?v >= vdes ;                        a := * ;                        ?a <= 0 & a >= -b)                 fi ;                    if(m - z <= SB)                  then                  a := -b                 fi ;                    t := 0 ;                    {z` = v, v` = a, t` = 1, v >= 0 & t <= ep}                 \\] (z >= m -> v <= d)) ")
            )
         )
         (branch " t2_0(SB_0_0) <  0"
            (rule "simplify_form_ass_left" (formula "4") (ifseqformula "3") (userinteraction))
            (rule "close_by_false" (formula "4") (userinteraction))
         )
      )
   )
)
)

}
