/**
 *  2D version of the cooperative controller described in "An
 *  Integrated system for planning, navigation, and robotic
 *  assistance for skull base surgery"
 *
 *  This problem is described in a single cartesian coordinate
 *  system
 * 
 *  qx x-position of the tool tip
 *  qy y-position of the tool tip
 *
 *  K is the scale factor between force and velocity in the admittance
 *    control law
 *  
 */

/* boundary is on x axis */
\functions{
 R Sqrt(R);
}


\problem {
\[
  R qx, qy, K, fx, fy, fxp, fyp, e, t, g, dist, disc, fnp, fn, d0, nx, ny, px, py
  \] (     K >  0
         & e >  0
         & nx ^ 2 + ny ^ 2 = 1
         & (qx - px) * nx + (qy - py) * ny >= 0
      -> \[
           (fxp := * ;
             (fyp := * ;
               (fnp := (fxp * nx + fyp * ny) ;
                 (fn := (fx * nx + fy * ny) ;
                   (d0 := ((qx - px) * nx + (qy - py) * ny) ;
                     (dist := (d0 + K * (fn * e + (fnp * e ^ 2) / 2)) ;
                       (disc := ((K * fn) ^ 2 - ((2 * K) * fnp) * d0) ;
                         ((?(fnp <= 0 & dist >= 0) ;
                             g := 0)
                           ++ ((?(fnp <= 0 & dist <= 0) ;
                               g := (fn + (d0 + ((K * fnp) * e ^ 2) / 2) / (K * e)))
                             ++ ((?(fnp >= 0 & (fn <= 0 & disc <= 0)) ;
                                 g := 0)
                               ++ ((?(fnp >= 0 & (fn <= 0 & (disc >= 0 & fn + fnp * e >= 0))) ;
                                   g := (fn - Sqrt(((2 * d0) * fnp) / K)))
                                 ++ ((?(fnp >= 0 & (fn <= 0 & (disc >= 0 & (fn + fnp * e <= 0 & dist <= 0)))) ;
                                     g := (fn - Sqrt(((2 * d0) * fnp) / K)))
                                   ++ ((?(fnp >= 0 & (fn <= 0 & (disc >= 0 & (fn + fnp * e <= 0 & dist >= 0)))) ;
                                       g := 0)
                                     ++ (?(fnp >= 0 & fn >= 0) ;
                                       g := 0)))))) ;
                           (t := 0 ;
                             {qx' = K * (fx - g * nx), qy' = K * (fy - g * ny), fx' = fxp, fy' = fyp, t' = 1, t <= e})))))))))*
           \] (qx - px) * nx + (qy - py) * ny >= 0)

}
