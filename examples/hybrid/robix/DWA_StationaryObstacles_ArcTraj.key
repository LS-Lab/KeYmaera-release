/*
 *	Robot must safely follow the dynamic window navigation approach.
 *  Proof see DWA_StationaryObstacle_ArcTraj.key.proof
 * 
 *  - Stationary obstacles
 *  - Robot follows a circular trajectory
 *  - Robot measures distance to nearest obstacle on that trajectory
 *  - Invariant:
 * 		- Robot drives forward
 * 		- Robot stays on its circle, which has strictly positive radius
 *  	- Robot is stopped, or robot has sufficient space to stop
 * 
 *  - Safety property
 * 		- Robot is stopped, or robot has sufficient space to stop 
 *
 *	@author Stefan Mitsch, Khalil Ghorbal, Andre Platzer
 *	@see On Provably Safe Obstacle Avoidance for Autonomous Robotic Ground Vehicles
 *	@link http://symbolaris.com/pub/robix.pdf
 */

\functions{
	R ep;			 		/* time limit for control decisions */
 	R b;					/* minimum braking capability of the robot */
	R A;					/* maximum acceleration -b <= a <= A */
	R Om;					/* max. rotational velocity for dynamic window */
}
\programVariables{
	R x;		/* robot position: x */
	R y;		/* robot position: y */
	R v;		/* robot translational velocity */
	R a;		/* robot translational acceleration */
	R w;		/* robot rotational velocity */
	R dx; 		/* robot orientation: x */
	R dy; 		/* robot orientation: y */
	R cx;		/* rotation center: x */
	R cy;		/* rotation center: y */
	R r;		/* radius of curve */
	R ox;		/* position of nearest obstacle on curve */
	R oy;
	R t;		/* time */
}

\problem{  
	  v >= 0
	& (Abs(x - ox) > v^2 / (2*b) | Abs(y - oy) > v^2 / (2*b))
	& r * w = v
	& dx = -1/r * (y - cy)
	& dy = 1/r * (x - cx)
	& r^2=(x-cx)^2+(y-cy)^2
	& r > 0
	& A >= 0
	& b > 0
	& Om >= 0
	& ep > 0	
      -> \[	(	/* brake on current curve or remain stopped */
      			(a := -b)
      			++(?v = 0; a := 0; w := 0)
      			/* or choose a new safe curve */
				++( /* Inside dynamic window? */
					a := *; ?-b <= a & a <= A;
					
					cx := *;		
					cy := *;
					r := *; ?r > 0 & r^2 = (x - cx)^2 + (y - cy)^2 & dx = -1/r * (y - cy) & dy = 1/r * (x - cx); 
					w := *; ?w * r = v & -Om <= w & w <= Om;
					
					/* uncomment and remove from test above for omnidirectional drive */
					/*dx := -1/r * (y - cy);
					dy := 1/r * (x - cx);*/
					
					/* for the chosen a, w, cx, cy: nearest obstacle on that curve */
					ox := *;
					oy := *;
					
					/* use that curve, if it is a safe one (admissible velocities) */
					?((x - cx)^2 + (y - cy)^2 = (ox - cx)^2 + (oy - cy)^2) 
						& (Abs(x - ox) > v^2/(2*b) + (A/b + 1) * (A/2 * ep^2 + ep*v) 
							| Abs(y - oy) > v^2/(2*b) + (A/b + 1) * (A/2 * ep^2 + ep*v))
				);
				t := 0;	
				
				/* dynamics */
				{x' = v * dx, y' = v * dy, dx' = -w * dy, dy' = w * dx, v' = a, w' = a * 1/r,
						t' = 1, t <= ep, v >= 0
				}
				@invariant(
						t >= 0, 
						r * w = v,
						dx = -1/r * (y - cy),
						dy = 1/r * (x - cx),
						r^2=(x-cx)^2+(y-cy)^2
						/* proof hint: overapproximate 2-norm with infinity-norm */
						/*v = v0 + a*t,
						-t * (v - a/2*t) <= x - x0 & x - x0 <= t * (v - a/2*t),
						-t * (v - a/2*t) <= y - y0 & y - y0 <= t * (v - a/2*t)
						*/
					)
			)*
			@invariant(v >= 0
				& r * w = v
				& dx = -1/r * (y - cy)
				& dy = 1/r * (x - cx)
				& r^2 = (x-cx)^2+(y-cy)^2
				& r > 0
				& (v = 0 | Abs(x - ox) > v^2 / (2*b) | Abs(y - oy) > v^2 / (2*b))
			)
		\] (v = 0 | (x - ox)^2 + (y - oy)^2 > (v^2/(2*b))^2)
}