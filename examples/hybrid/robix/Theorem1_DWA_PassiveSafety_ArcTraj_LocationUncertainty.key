/*
 *	Robot must safely follow the dynamic window navigation approach.
 *  Model for passive safety, circular trajectory, and location uncertainty.
 *  Theorem 1
 *	Proof see Theorem1_DWA_PassiveSafety_ArcTraj_LocationUncertainty.key.proof
 * 
 *  Invariant (psi_ps):
 *  - Robot drives forward
 *  - Direction vector of robot is a unit vector
 *  - Radius of circular trajectory is strictly positive
 *  - Robot is stopped or robot can still stop (accounting for uncertainty) before collision with obstacle occurs
 * 
 *  Safety property:
 *  - Robot is stopped or robot can still stop before collision with obstacle occurs  
 *
 *	@author Stefan Mitsch, Khalil Ghorbal, Andre Platzer
 *	@see On Provably Safe Obstacle Avoidance for Autonomous Robotic Ground Vehicles
 *	@link http://symbolaris.com/pub/robix.pdf
 */

\functions{
	R ep;			 		/* time limit for control decisions */
 	R b;					/* minimum braking capability of the robot */
	R A;					/* maximum acceleration -b <= a <= A */
	R V;					/* maximum velocity of obstacles */
	R Om;					/* max. rotational velocity for dynamic window */
	R U_p;					/* bound on location uncertainty */
}
\programVariables{
	R x;		/* robot position: x */
	R y;		/* robot position: y */
	R xm;		/* robot measured position: x */
	R ym;		/* robot measured position: y */
	R v;		/* robot translational velocity */
	R a;		/* robot translational acceleration */
	R w;		/* robot rotational velocity */
	R dx; 		/* robot orientation: x */
	R dy; 		/* robot orientation: y */
	R cx;		/* rotation center: x */
	R cy;		/* rotation center: y */
	R r;		/* radius of curve */
	R ox;		/* position summary of obstacles */
	R oy;
	R odx;		/* direction and linear velocity of obstacle */
	R ody;
	R t;		/* time */
}

\problem{  
	  v >= 0
	& (Abs(x - ox) > v^2 / (2*b) + v*V / b | Abs(y - oy) > v^2 / (2*b) + v*V / b)
	& r > 0
	& dx^2 + dy^2 = 1
	& A >= 0
	& b > 0
	& V >= 0
	& U_p >= 0
	& ep > 0	
      -> \[	(	/* control obstacle */
      			odx := *;
      			ody := *;
      			?odx^2 + ody^2 <= V^2;
      			
      			/* measure position */
      			xm := *; ?x - U_p <= xm & xm <= x + U_p;
      			ym := *; ?y - U_p <= ym & ym <= y + U_p;
      
      			/* brake on current curve or remain stopped */
      			(a := -b)
      			++(?v = 0; a := 0; w := 0)
      			/* or choose a new safe curve */
				++( /* Inside dynamic window? */
					a := *; ?-b <= a & a <= A;
					
					cx := *;		
					cy := *;
					r := *; ?r > 0 & r^2 = (xm - cx)^2 + (ym - cy)^2; /* do not spin */
					w := *; ?w * r = v & -Om <= w & w <= Om;
					
					/* uncomment for omnidirectional drive */
					/*dx := -1/r * (ym - cy);
					dy := 1/r * (xm - cx);*/
					
					/* for the chosen a, w, cx, cy: worst case position of obstacles wrt. curve */
					ox := *;
					oy := *;
					
					/* use that curve, if it is a safe one (admissible velocities) */
					?Abs(xm - ox) > v^2/(2*b) + V*v/b + (A/b + 1) * (A/2 * ep^2 + ep*(v+V)) + U_p
						 | Abs(ym - oy) > v^2/(2*b) + V*v/b + (A/b + 1) * (A/2 * ep^2 + ep*(v+V)) + U_p
				);
				t := 0;	
				
				/* dynamics */
				{x' = v * dx, y' = v * dy, dx' = -w * dy, dy' = w * dx, v' = a, w' = a * 1/r,
						ox' = odx, oy' = ody,
						t' = 1, t <= ep, v >= 0
				}
				@invariant(
						  dx^2 + dy^2 = 1,
						  t >= 0
						/* proof hint for manual interaction: overapproximate 2-norm with infinity-norm */
						/*v = v0 + a*t,
						-t * (v - a/2*t) <= x - x0 & x - x0 <= t * (v - a/2*t),
						-t * (v - a/2*t) <= y - y0 & y - y0 <= t * (v - a/2*t),
						-t * V <= ox - ox0 & ox - ox0 <= t * V,
						-t * V <= oy - oy0 & oy - oy0 <= t * V,
						*/
					)
			)*
			@invariant(v >= 0
				& dx^2 + dy^2 = 1
				& r > 0
				& (v = 0 | Abs(x - ox) > v^2 / (2*b) + v*V / b | Abs(y - oy) > v^2 / (2*b) + v*V / b)
			)
		\] (v = 0 | (x - ox)^2 + (y - oy)^2 > (v^2/(2*b))^2)				
}